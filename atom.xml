<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Charles&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shunyangli.github.io/"/>
  <updated>2020-06-17T10:56:09.935Z</updated>
  <id>https://shunyangli.github.io/</id>
  
  <author>
    <name>Charles</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cpp learning note</title>
    <link href="https://shunyangli.github.io/2020/06/01/cpp-learning-note/"/>
    <id>https://shunyangli.github.io/2020/06/01/cpp-learning-note/</id>
    <published>2020-06-01T06:41:33.000Z</published>
    <updated>2020-06-17T10:56:09.935Z</updated>
    
    <content type="html"><![CDATA[<p>COMP6771 learning note.</p><h1 id="cpp"><a href="#cpp" class="headerlink" title="cpp"></a>cpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello world"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">auto main() -&gt; int &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello world"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="cpp-数据类型"><a href="#cpp-数据类型" class="headerlink" title="cpp 数据类型"></a>cpp 数据类型</h1><p>学过c语言应该对数据类型都有所了解，cpp的数据类型和c语言差不多，但是比c语言要多几种。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span>, <span class="keyword">int</span>, <span class="keyword">float</span>, <span class="keyword">double</span>, <span class="keyword">char</span>, <span class="keyword">void</span>(无类型), <span class="keyword">wchar_t</span>(宽字符型)</span><br></pre></td></tr></table></figure><p><code>wchar_t</code> 是这样定义的，所以<code>wchar_t</code>和<code>short int</code>占用的空间一样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">short</span> <span class="keyword">int</span> <span class="keyword">wchar_t</span>;</span><br></pre></td></tr></table></figure><p><code>typedef</code>的作用就是给数据类型换一个名字而已，语法：<code>typedef type name</code>，比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> bit;</span><br></pre></td></tr></table></figure><p>编译器会理解成<code>bit</code>和<code>int</code>是一样的数据类型。</p><p><strong>枚举类型：</strong></p><p><code>enum</code>是枚举类型的关键词，枚举类型的定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="keyword">enum</span>-name &#123; <span class="built_in">list</span> of names&#125; var-<span class="built_in">list</span>;</span><br></pre></td></tr></table></figure><p>enum-name 是枚举类型名。list of name 是由逗号分隔开的。</p><p>例如，我们可以使用枚举类型来定义一个color：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> color &#123;</span><br><span class="line">    red,</span><br><span class="line">    green,</span><br><span class="line">    blue</span><br><span class="line">&#125; c;</span><br></pre></td></tr></table></figure><p>在color里面red默认是0，green默认是1，blue默认是2。也可以手动去更改相对应的数字，比如:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> color &#123;</span><br><span class="line">    red = <span class="number">1</span>,</span><br><span class="line">    green,</span><br><span class="line">    blue</span><br><span class="line">&#125; c;</span><br></pre></td></tr></table></figure><p>那么green就是2，blue就是3。也可以去定义<code>c = red || c = blue</code>等等，这样c代表的就是不同的数字。一般在去设定人物名称或者别的不同类型的时候会用到枚举来替代数字，这样更容易分辨。比如说：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// assume:</span></span><br><span class="line"><span class="comment">// 0 is red,</span></span><br><span class="line"><span class="comment">// 1 is green</span></span><br><span class="line"><span class="comment">// 这样的话很难记住，如果使用枚举就不需要考虑这些，直接对数据进行判断就行</span></span><br><span class="line"><span class="keyword">if</span> (color == red) <span class="comment">/*better than*/</span> <span class="keyword">if</span> (color == <span class="number">1</span>)</span><br><span class="line"><span class="comment">// it's hard to known what is 1</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">enum</span> color &#123;</span><br><span class="line">    red,</span><br><span class="line">    green,</span><br><span class="line">    blue</span><br><span class="line">&#125; c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    c = blue;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; color::red &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>提示：</em></p><ol><li>枚举变量可以直接输出，但<strong>不能直接输入</strong></li><li><strong>不能直接将常量赋给枚举变量</strong></li><li>不同类型的枚举变量之间<strong>不能相互赋值</strong></li><li>枚举变量的输入输出<strong>一般都采用switch</strong>语句将其转换为字符或字符串；枚举类型数据的其他处理也往往应用switch语句，以保证程序的合法性和可读性。</li></ol><p><strong>常见的类型修饰符：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span>, <span class="keyword">short</span>, <span class="keyword">signed</span>, <span class="keyword">unsigned</span></span><br></pre></td></tr></table></figure><p><em>long int 与 int 都是 4 个字节</em></p><p>可以使用<code>&lt;limits&gt;</code> 来查看相对应的数据类型的限制（在c语言里面声明头文件需要<code>*.h</code>，在cpp里面不需要带.h）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Type size"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Int: "</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">int</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Max int: "</span> &lt;&lt; numeric_limits&lt;<span class="keyword">int</span>&gt;::max() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Min int: "</span> &lt;&lt; numeric_limits&lt;<span class="keyword">int</span>&gt;::min() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用<code>using namespace xxx;</code>，在调用function的时候不需要<code>xxx:cout</code>，可以直接使用function。<code>endl = \n</code>，就是换行符的意思。<code>&lt;&lt;</code>可以理解为合并字符串，有点类似于shell里面的<code>&lt;</code>（<del>不一样，只是类似</del>） <code>numeric_limits</code>这个函数里面使用到了<em>泛型</em>，但是忘得差不多了o(╥﹏╥)o。。。慢慢补吧，如果学过Java那么应该对这部分比较熟悉。</p><p>变量的声明：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type variable_name = value;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b,c;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> b;</span><br></pre></td></tr></table></figure><p>未初始化的变量都被默认为null。</p><p><strong><em>声明extern关键字的全局变量和函数可以使得它们能够跨文件被访问。</em></strong></p><h1 id="cpp-变量作用域"><a href="#cpp-变量作用域" class="headerlink" title="cpp 变量作用域"></a>cpp 变量作用域</h1><p><strong>局部变量：</strong></p><p>在函数或代码块内部声明的变量称为局部变量。他们在函数体内声明后仅能被其声明的所在函数体内部的后续语句操作。局部变量不能被函数外部访问到。也就是说只作用于这一个函数内：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cal(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = a + b;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如在<code>int cal(int,int)</code>里面定义了一个c的变量，那么这个c只能作用于<code>cal</code>这个function内。</p><p><strong>全局变量：</strong></p><p>在整个cpp文件内都可以用。在整个生命周期内都可以使用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    cal(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    sum = a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以在任意函数调用<code>sum</code>这个变量。</p><h1 id="cpp-常量"><a href="#cpp-常量" class="headerlink" title="cpp 常量"></a>cpp 常量</h1><p>二进制，八进制，十进制，十六进制。二进制是以<code>0bxx</code>开头，数字范围是0和1。八进制是0开头的，数字范围是0-7。十进制就是我们常用的数字。十六进制是<code>ox</code>开头，取值范围是<code>0-9, A-F</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">212 // 合法   </span><br><span class="line">215u// 合法  </span><br><span class="line">0xFeeL  // 合法  </span><br><span class="line">078 // 不合法: 8不是合法的八进制  </span><br><span class="line">032UU   // 不合法: U后缀不能重复使用</span><br></pre></td></tr></table></figure><p>其中<code>u</code>代表的是<code>unsigned</code>，也可以是<code>l</code> 等：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">85 // 十进制</span><br><span class="line">0213   // 八进制</span><br><span class="line">0x4b   // 十六进制</span><br><span class="line">30 // 整型</span><br><span class="line">30u// 无符号整型</span><br><span class="line">30l// 长整型</span><br><span class="line">30ul   // 无符号整型</span><br></pre></td></tr></table></figure><h1 id="cpp储存类型"><a href="#cpp储存类型" class="headerlink" title="cpp储存类型"></a>cpp储存类型</h1><p>储存类型如下：</p><ol><li>auto</li><li>register</li><li>static</li><li>extern</li><li>mutable</li></ol><p><strong>auto储存类型：</strong></p><p><strong>auto</strong> 关键字用于两种情况：声明变量时根据初始化表达式自动推断该变量的类型、声明函数时函数返回值的占位符。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> a = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">int</span> month;</span><br></pre></td></tr></table></figure><p>auto 仅能运用于函数内的局部变量。</p><p><strong>register 存储类型：</strong></p><p><strong>register</strong> 存储类用于定义存<strong>储在寄存器中而不是 RAM 中的局部变量</strong>。这意味着变量的最大尺寸等于寄存器的大小（通常是一个词），<strong>且不能对它应用一元的 ‘&amp;’ 运算符</strong>（因为它没有内存位置）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">register</span> <span class="keyword">int</span>  miles;</span><br></pre></td></tr></table></figure><p><strong>register类型应该仅应用于需要快速访问的变量</strong>，比如计数器。需要注意的是，定义 register 类型的变量并不意味着该变量一定就存储在寄存器中，这仅仅意味着需要按照硬件以及具体实现的限制来判定到底是不是存储在寄存器中。</p><p><strong>static储存类型：</strong></p><p><strong>static</strong> 存储类型的变量意味着该变量将会从始至终地存活在程序的整个生命周期内，而不会随着每次访问到它所在的代码块时就建立该变量，离开代码块时就销毁该变量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">call_num</span> <span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    call_num();</span><br><span class="line">    call_num();</span><br><span class="line">    call_num();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">call_num</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a-- &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>extern 存储类型：</strong></p><p><strong>extern</strong> 存储类型用于使全局变量的引用对所有程序文件可见。如果前面已经定义了一个变量名，那么就不能再使用 extern 来声明同一变量名的变量了。有点类似于Python的<code>import</code>。</p><p>在<code>main.app</code>中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">write_line</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    num = <span class="number">1</span>;</span><br><span class="line">    write_line();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>write.app</code>中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> num;</span><br><span class="line"><span class="comment">//void write_line();</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write_line</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"count is : "</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译： <code>g++ main.cpp write.app -o main</code></p><p>运行：<code>./main</code></p><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count is : 1</span><br></pre></td></tr></table></figure><p>写着写着发现和C语言如此相似（基础部分）。(<em>^▽^</em>)</p><h1 id="cpp-Const-类型"><a href="#cpp-Const-类型" class="headerlink" title="cpp Const 类型"></a>cpp Const 类型</h1><p><strong>Const</strong> 被当做一个很基础但是很有用的关键字。</p><p><strong>先说下为什么用const：</strong></p><ol><li>Clear code (know a function won’t try and modify something just by reading the signature)</li><li>Immutable objects are easier to reason about.</li><li>The complier <strong>may</strong> be able to mkae certain optimisations</li><li>Immutable objects are <strong>much</strong> easier to use in multithreading situations.</li></ol><p>eg:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> y = <span class="number">173</span></span><br></pre></td></tr></table></figure><p><strong>const修饰普通类型的变量：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = a;</span><br><span class="line"></span><br><span class="line">a = <span class="number">8</span>; <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p>a可以被定义为一个常量，也可以把a的内容赋值给b。<strong>但是不能对b再次赋值</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">auto main() -&gt; int &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> *p = (<span class="keyword">int</span>*)&amp;a;</span><br><span class="line">    *p = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"A: "</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Output: </span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">A: 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>我们可以通过得到a的地址，然后对地址直接重新赋值的方法来改变a的值。<strong>（指针就是一个变量的地址，&amp;取地址，*取内容）</strong>。</p><p><strong>const修饰指针变量：</strong></p><ol><li>const修饰指针指向的内容，则内容为不变量</li><li>const修饰指针，则指针为不变量</li><li>const修饰指针和指针指向的内容，则指针和指针指向的内容都是不可变</li></ol><p>For 1：</p><p>内容不可以变，但是可以通过地址重新改变数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b = a</span><br></pre></td></tr></table></figure><p>当<code>int b = a</code>的时候b只是得到了a的内容，所以可以修改。</p><p>For 2：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> * <span class="keyword">const</span> p = &amp;a;</span><br><span class="line">*p = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// error code</span></span><br><span class="line"><span class="keyword">int</span> c = <span class="number">10</span>;</span><br><span class="line">p = &amp;c;</span><br></pre></td></tr></table></figure><p><em>在const左边，代表地址不可变，所以在第一次把a的地址赋值给p的时候没什么问题，但是当把c的地址赋值给p是就不行，*</em>因为地址不可以变**。</p><p>For 3：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> p = &amp;a;</span><br></pre></td></tr></table></figure><p>啥都变不了。</p><p><strong>ps: 左定值，右定向，const修饰不变量</strong></p><h2 id="References-and-const"><a href="#References-and-const" class="headerlink" title="References and const"></a>References and const</h2><p>在这里reference可以表示为引用的意思。在reference里面<code>&amp;</code>不带比较地址。<strong>一个reference天生就是const。也就是说，一旦将一个reference绑定到一个对象，就无法再将它重新绑定到另一个不同的对象。在声 明一个reference之后没有写法可以将它重新绑定到另外一个对象</strong></p><ul><li><strong>A reference to const means you can’t modify the object using the reference</strong></li><li><strong>The object is still able to be modified, just not through this reference</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span>&amp; ref = i;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ref &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">i++; <span class="comment">// This is fine</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ref &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">ref++; <span class="comment">// This is not</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span>&amp; jref = j; <span class="comment">// this is allowed</span></span><br><span class="line"><span class="keyword">auto</span>&amp; ref = j; <span class="comment">// not allowed</span></span><br></pre></td></tr></table></figure><h1 id="cpp-functions"><a href="#cpp-functions" class="headerlink" title="cpp functions"></a>cpp functions</h1><p>c++function有两种放回形式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">auto square(int const x) -&gt; int &#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">square</span><span class="params">(<span class="keyword">int</span> <span class="keyword">const</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Overload：</strong></p><p><strong>指函数名相同，但是它的参数表列个数或顺序，类型不同</strong>。<em>但是不能靠返回类型来判断。</em><br>（1）相同的范围（在同一个作用域中） ；<br>（2）函数名字相同；<br>（3）参数不同；<br>（4）virtual 关键字可有可无。<br>（5）返回值可以不同；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">auto square(int const x) -&gt; int &#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">auto square(double const x) -&gt; double &#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>突然发现了一个很有意思的东西：<code>const int * = int const *</code></strong></p><h2 id="Overload-Resolution"><a href="#Overload-Resolution" class="headerlink" title="Overload Resolution"></a>Overload Resolution</h2><p>这个过程简称方程匹配（function matching）</p><ol><li>Find function name</li><li>Select viable ones: Same number arguments + each argument convertible</li><li>Best match：Type much better in at least one argument</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auto g() -&gt; void;</span><br><span class="line">auto f(int) -&gt; void;</span><br><span class="line">auto f(int, int) -&gt; void;</span><br><span class="line">auto f(double, double = 3.14) -&gt; void;</span><br><span class="line">f(<span class="number">5.6</span>); <span class="comment">// calls f(double, double)</span></span><br></pre></td></tr></table></figure><p>尽量少的overload，或者不用，因为不容易分辨。</p><h2 id="Functions-pass-by-reference"><a href="#Functions-pass-by-reference" class="headerlink" title="Functions: pass by reference"></a>Functions: pass by reference</h2><ul><li>The formal parameter merely acts as an alias for the actual parameter</li><li>Anytime the method/function uses the formal parameter (for reading or writing), it is actually using the actual parameter</li><li>Pass by reference is useful when:<ul><li><strong>The argument has no copy operation</strong></li><li><strong>The argument is large</strong></li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">auto swap(int&amp; x, int&amp; y) -&gt; void &#123;</span><br><span class="line">  <span class="keyword">auto</span> <span class="keyword">const</span> tmp = x;</span><br><span class="line">  x = y;</span><br><span class="line">  y = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">auto main() -&gt; int &#123;</span><br><span class="line">  <span class="keyword">auto</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">auto</span> j = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">' '</span> &lt;&lt; j &lt;&lt; <span class="string">'\n'</span>; <span class="comment">// 1 2</span></span><br><span class="line">  swap(i, j);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">' '</span> &lt;&lt; j &lt;&lt; <span class="string">'\n'</span>; <span class="comment">// 2 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>reference可以让function的执行速度变快。</p><h1 id="structures"><a href="#structures" class="headerlink" title="structures"></a>structures</h1><p>和c语言的structure差不多的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">scientist</span> &#123;</span></span><br><span class="line">    <span class="built_in">string</span> family_name;</span><br><span class="line">    <span class="built_in">string</span> given_name;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; files;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">auto main() -&gt; int &#123;</span><br><span class="line">    scientist s = scientist &#123;</span><br><span class="line">        .family_name = <span class="string">"Li"</span>,</span><br><span class="line">        .given_name = <span class="string">"Shunyang"</span>,</span><br><span class="line">        .files = &#123;</span><br><span class="line">                <span class="string">"c++"</span>,</span><br><span class="line">                <span class="string">"python"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s.family_name  &lt;&lt; <span class="string">" "</span> &lt;&lt; s.given_name &lt;&lt; s.files[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Declarations-vs-Definitions"><a href="#Declarations-vs-Definitions" class="headerlink" title="Declarations vs Definitions"></a>Declarations vs Definitions</h1><ol><li>A declaration makes known the type and the name of a variable</li><li>A definition is a declaration, but also does extra things<ol><li>A variable definition allocates storage for, and constructs a variable</li><li>A class definition allows you to create variables of the class’ type</li><li>You can call functions with only a declaration, but must provide a definition later</li></ol></li><li>Everything must have precisely one definition</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">declared_fn</span><span class="params">(<span class="keyword">int</span> arg)</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">declared_type</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This class is defined, but not all the methods are.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">defined_type</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">declared_member_fn</span><span class="params">(<span class="keyword">double</span>)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">defined_member_fn</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123; <span class="keyword">return</span> arg; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// These are all defined.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">defined_fn</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">auto</span> vd = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;&#123;&#125;;</span><br></pre></td></tr></table></figure><p><strong>In c++, the global will not 0 without initialization，in function it will be null without initialization both are defination</strong></p><h1 id="Program-error"><a href="#Program-error" class="headerlink" title="Program error"></a>Program error</h1><ol><li>Compile-time</li><li>Link-time</li><li>Run-time</li><li>Logic</li></ol><p>这些错误循序渐进。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto main() -&gt; int &#123;</span><br><span class="line">  a = <span class="number">5</span>; <span class="comment">// Compile-time error: type not specified</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为没有返回任何数据，在编译的过程中就可以发现的错误。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"catch2/catch.hpp"</span></span></span><br><span class="line"></span><br><span class="line">auto is_cs6771() -&gt; bool;</span><br><span class="line"></span><br><span class="line">TEST_CASE(<span class="string">"This is all the code"</span>)</span><br><span class="line">  CHECK(is_cs6771()); <span class="comment">// Link-time error: is_cs6771 not defined.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到function相对应的文件和声明。（can not find library）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// attempting to open a file...</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">auto</span> file = <span class="built_in">std</span>::ifstream(<span class="string">"hello.txt"</span>); <span class="keyword">not</span> file) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"Error: file not found.\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行时候出错，不能找到相对应的资源。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> empty = <span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">""</span>);</span><br><span class="line">CHECK(empty[<span class="number">0</span>] == <span class="string">'C'</span>); <span class="comment">// Logic error: bad character access</span></span><br></pre></td></tr></table></figure><p>逻辑上的错误，属于操作失误，比如说out index range，这些都是操作的失误。</p><h1 id="Test-Case"><a href="#Test-Case" class="headerlink" title="Test Case"></a>Test Case</h1><p>在cpp test case里面，CHECK和REQUIRED的区别：REQUIRE会导致test立马fail，但是CHECK不会，只会导致一个fail，test case还能继续。</p><h1 id="Week-2-lecture-notes"><a href="#Week-2-lecture-notes" class="headerlink" title="Week 2 lecture notes"></a>Week 2 lecture notes</h1><p>Why do we want to use libraries:</p><ul><li>well documented</li><li>well tested</li><li>well reviewed</li><li>many feedback</li></ul><p>What we use:</p><ul><li>c++ stl</li><li>abseil</li><li>catch2 (testing)</li><li>{fmt} string format</li><li>gsl-lite</li><li>range-v3 (iterators)</li></ul><p><strong>Algorithms and Conatiners and Ranges combined to Iterators.</strong></p><p><code>std::vecotr</code> is always the defalut container</p><p>Sequence containers:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::vecotr</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">array</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">deque</span></span><br><span class="line"><span class="built_in">std</span>::forward_list</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">list</span></span><br></pre></td></tr></table></figure><p>Unordered associate container:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a collection of unique keys</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">unordered_map</span></span><br><span class="line">absl::flat_hash_map</span><br><span class="line"></span><br><span class="line"><span class="comment">// a unique key with a values</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">unordered_set</span></span><br><span class="line">absl::flat_hash_set</span><br></pre></td></tr></table></figure><h2 id="String-in-cpp"><a href="#String-in-cpp" class="headerlink" title="String in cpp"></a>String in cpp</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> gretting = <span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">"hello world"</span>);</span><br></pre></td></tr></table></figure><p>可以在一个区域内使用<code>using namespaces</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>::string_literals;</span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> str = <span class="string">"hello world"</span>s;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼接字符串</span></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> str = absl::StrCat(<span class="string">"hello"</span>, <span class="string">"word"</span>);</span><br></pre></td></tr></table></figure><p>formatting string</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fmt/format.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有点类似python的写法，参考python的写法</span></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> str = fmt::format(<span class="string">"Hello: &#123;&#125;"</span>, <span class="string">"world"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// name parameters, 这个参数可以多次使用</span></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> str = fmt::format(<span class="string">"&#123;key&#125;: &#123;value&#125;, &#123;value&#125;"</span>, fmt::arg(<span class="string">"key"</span>, <span class="number">1</span>),</span><br><span class="line">                            fmt::arg(<span class="string">"value"</span>, <span class="number">12</span>));</span><br></pre></td></tr></table></figure><h2 id="vector-in-cpp"><a href="#vector-in-cpp" class="headerlink" title="vector in cpp"></a>vector in cpp</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> vec = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">// 删除末尾的元素</span></span><br><span class="line">vec.pop_back();</span><br><span class="line">REQUIRE(ranges::distance(vec) == <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// erase 的作用也是删除元素，不过可以删除任意位置的元素</span></span><br><span class="line"><span class="comment">// index 从0开始的</span></span><br><span class="line"><span class="built_in">std</span>::erase(vec, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空list</span></span><br><span class="line">vec.clear();)</span><br></pre></td></tr></table></figure><p>初始化数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化数组长度为5，且每一个元素为0</span></span><br><span class="line"><span class="keyword">auto</span> vec = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">5</span>);</span><br><span class="line">REQUIRE(ranges::distance(vec) == <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">CHECK(vec[<span class="number">0</span>] == <span class="number">0</span>);</span><br><span class="line">CHECK(vec[<span class="number">1</span>] == <span class="number">0</span>);</span><br><span class="line">CHECK(vec[<span class="number">2</span>] == <span class="number">0</span>);</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以指定初始化内容</span></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> str = <span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">"hello world"</span>);</span><br><span class="line"><span class="keyword">auto</span> all = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="number">2</span>, str);</span><br><span class="line"></span><br><span class="line">CHECK(all[<span class="number">0</span>] == str);</span><br><span class="line">CHECK(all[<span class="number">1</span>] == str);</span><br></pre></td></tr></table></figure><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p>可以直接根据reference来写。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#inlcude <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// stack 是先进后出的数据结构</span></span><br><span class="line"><span class="keyword">auto</span> <span class="built_in">stack</span> = <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;card&gt;();</span><br><span class="line">REQUIRE(<span class="built_in">stack</span>.empty());</span><br></pre></td></tr></table></figure><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><p>可以直接根据reference来写。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#inlcude <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 先进先出</span></span><br><span class="line"><span class="keyword">auto</span> <span class="built_in">queue</span> = <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&#123;&#125;;</span><br><span class="line"><span class="built_in">queue</span>.push(<span class="string">"x"</span>);</span><br><span class="line"><span class="built_in">queue</span>.pop();</span><br></pre></td></tr></table></figure><p>记得插图</p><h2 id="some-algorithm-in-iterators"><a href="#some-algorithm-in-iterators" class="headerlink" title="some algorithm in iterators"></a>some algorithm in iterators</h2><p>有毒，直接卡死了。。。但是别的因该是可以的，在使用<code>ranges::swap()</code>的时候速度很快。<br>但是感觉和<code>std::swap</code>没什么区别。。。稍微快了那么一点。。。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#inlcude <span class="meta-string">&lt;range/v3/algorithm.hpp&gt;</span></span></span><br><span class="line"><span class="comment">// count numbers</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> num = ranges::count(<span class="built_in">vector</span>, <span class="string">"x"</span>);</span><br><span class="line"><span class="keyword">auto</span> node = ranges::find(<span class="built_in">vector</span>, <span class="string">"x"</span>);</span><br><span class="line"><span class="comment">// node != vector.end() 才算是找到了，和普通的find效果是一样的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ranges::adjacent_find 的做用就是找到两个相邻的一样的数据，并且直接返回该数据</span></span><br><span class="line"><span class="comment">// a, b, c, a ranges::adjacent_find(xxx, a)会返回最后一个a</span></span><br><span class="line"><span class="keyword">auto</span> node = ranges::adjacent_find(<span class="built_in">vector</span>, <span class="string">"x"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ranges::next(xx), 下一个， iterator的形式</span></span><br><span class="line"><span class="keyword">auto</span> node = ranges::next(<span class="built_in">vector</span>);</span><br></pre></td></tr></table></figure><h2 id="Lambda-expressions"><a href="#Lambda-expressions" class="headerlink" title="Lambda expressions"></a>Lambda expressions</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;range/v3/algorithm.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> vec = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>&#125;;</span><br><span class="line"><span class="comment">// 使用lambda表达式来计算a的数量</span></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> numbers = ranges::count_if(vec, [](<span class="keyword">auto</span> <span class="keyword">const</span>&amp; x) &#123;</span><br><span class="line">    <span class="keyword">return</span> x == <span class="string">'a'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以指定返回格式，一般都是bool</span></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> numbers = ranges::count_if(vec, [](<span class="keyword">auto</span> <span class="keyword">const</span>&amp; x)-&gt;<span class="keyword">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x == <span class="string">'a'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">CHECK(numbers == <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>Surprise binary search</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;range/v3/algorithm.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">auto</span> nums = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&#123;<span class="string">'1'</span>,<span class="string">'3'</span>,<span class="string">'2'</span>, <span class="string">'1'</span>, <span class="string">'1'</span>&#125;;</span><br><span class="line"><span class="comment">// 排序，这两种方法都可以排序，但是ranges快一点。。</span></span><br><span class="line">ranges::sort(nums);</span><br><span class="line"><span class="built_in">std</span>::sort(nums);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"range/v3/algorithm/is_sorted.hpp"</span></span></span><br><span class="line"><span class="comment">// 检查是否排序</span></span><br><span class="line">ranges::is_sorted(nums);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取某一个区间, 这个区间内都是这个element</span></span><br><span class="line"><span class="keyword">auto</span> [first, last] = ranges::equal_range(nums, <span class="string">'1'</span>);</span><br><span class="line"><span class="comment">// first = 3, last = 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用[temp] 需要声明temp</span></span><br><span class="line"><span class="keyword">auto</span> temp = <span class="string">"1"</span>;</span><br><span class="line">ranges::all_of(first, last, [temp](<span class="keyword">auto</span> <span class="keyword">const</span>&amp; x) &#123;<span class="keyword">return</span> x == temp&#125;);</span><br></pre></td></tr></table></figure><h1 id="Week-2-part-2"><a href="#Week-2-part-2" class="headerlink" title="Week 2 part 2"></a>Week 2 part 2</h1><p>the difference between <code>ranges::distance</code> and <code>vector::size</code><br>下面三种方法都是为了使用auto，来遍历数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// E.g. 1</span></span><br><span class="line"><span class="keyword">auto</span> v = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(other.size());</span><br><span class="line"></span><br><span class="line"><span class="comment">// E.g. 2 (yuck, but best option till you get more experience)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0</span>; i &lt; ranges::distance(v); ++i) &#123;</span><br><span class="line">    <span class="keyword">using</span> size_type = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::size_type; <span class="comment">// C++ typedef</span></span><br><span class="line">    v[gsl_lite::narrow_cast&lt;size_type&gt;(i)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// E.g. 3 i should not leave the scope of the loop</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::size_type&#123;<span class="number">0</span>&#125;; i &lt; v.size(); ++i) &#123;</span><br><span class="line">    v[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类型转换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> doubles = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;&#123;<span class="number">0.0</span>,<span class="number">1.0</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> ints = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;doubles.begin(), doubles.end()&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所以这时候ints就是</span></span><br><span class="line"><span class="comment">// 2 个0</span></span><br><span class="line">CHECK(ints = <span class="built_in">std</span>::<span class="built_in">vector</span>(<span class="number">2</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>genreate a sequence of integers on deman<br>生成一个序列</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#inlcude <span class="meta-string">&lt;range/v3/numberic.hpp&gt;</span></span></span><br><span class="line"><span class="comment">// 初始化大小为10的vector</span></span><br><span class="line"><span class="keyword">auto</span> vec = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// iota的作用就是生成一个从0到vec长度的数字存到vec里面</span></span><br><span class="line"><span class="comment">// 0..ranges::distance(vec)</span></span><br><span class="line">ranges::iota(vec, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><strong>使用piping</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;range/v3/range.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;range/v3/view.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 老师ppt上写错了</span></span><br><span class="line"><span class="comment">// 生成的结果好像是array，但是没办法检查type，我也不知道了</span></span><br><span class="line"><span class="comment">// 生成结果是iota_view 不是array </span></span><br><span class="line"><span class="comment">// 输出结果 [0,1,2,3,4,5,6,7,8,9]</span></span><br><span class="line"><span class="keyword">auto</span> numbers = ranges::views::iota(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过使用pipling的方法转换</span></span><br><span class="line"><span class="keyword">auto</span> vec = numbers | ranges::to&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&gt;;</span><br></pre></td></tr></table></figure><p><strong>Filters(keep if)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;range/v3/range.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;range/v3/view.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> view = ranges::views;</span><br><span class="line"><span class="keyword">auto</span> is_blue = [] (card <span class="keyword">const</span> c) &#123;<span class="keyword">return</span> c.lolor == color::blue&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> all_blue = hand | views::filter(is_blue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 都可以check是不是有这个元素</span></span><br><span class="line">ranges::find();</span><br><span class="line"><span class="comment">// 也可以使用lambda表达式</span></span><br><span class="line">ranges::any_of();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除某个元素，都可以使用lambda的表达式</span></span><br><span class="line"><span class="keyword">auto</span> no_blue = hand | views::remove_if(is_blue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在使用find的时候差别</span></span><br><span class="line"><span class="built_in">std</span>::find(vec.begin(), vec.end(), x);</span><br><span class="line">ranges::find(vec, x);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// reversing, 反转链表</span></span><br><span class="line"><span class="keyword">auto</span> res = hand | views::reverse;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还有一个find_if, 但是返回的是指针, 需要*得到内容</span></span><br><span class="line"><span class="keyword">auto</span> res = ranges::find_if (hand, is_blue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种用法</span></span><br><span class="line">ranges::to&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&gt;(views::reverse(hand));</span><br></pre></td></tr></table></figure><p>transform<br>通过一种形式来转换吧，可以理解为替换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> res = hand | views::transform([]()&#123;&#125;);</span><br></pre></td></tr></table></figure><p>split</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">views::split(<span class="string">' '</span>) | views::transform([]()&#123;&#125;) | ranges::to&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;;</span><br></pre></td></tr></table></figure><p>join</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> words = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&#123;<span class="string">"hello"</span>, <span class="string">"word"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> res = words | views::join(<span class="string">' '</span>) | ranges::to&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;;</span><br></pre></td></tr></table></figure><p>concatenating ranges (结合ranges)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> str1 = <span class="string">"hello "</span>;</span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> str2 = <span class="string">"word"</span>;</span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> str3 = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&#123;<span class="string">" ni"</span>, <span class="string">" hao"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并字符串</span></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> str = views::concat(str1, str2, str3 | views::join(<span class="string">' '</span>)) | ranges:to&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;;</span><br></pre></td></tr></table></figure><p>use only the first n elements</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> vec = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">// 取前两个</span></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> n = vec | views::take(<span class="number">2</span>) | ranges::to&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取后几个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> n = vec | views::take_last(<span class="number">2</span>) | ranges::to&lt;<span class="built_in">vector</span>&gt;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;COMP6771 learning note.&lt;/p&gt;
&lt;h1 id=&quot;cpp&quot;&gt;&lt;a href=&quot;#cpp&quot; class=&quot;headerlink&quot; title=&quot;cpp&quot;&gt;&lt;/a&gt;cpp&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="cpp" scheme="https://shunyangli.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>leetcode</title>
    <link href="https://shunyangli.github.io/2020/05/26/leetcode/"/>
    <id>https://shunyangli.github.io/2020/05/26/leetcode/</id>
    <published>2020-05-26T05:37:21.000Z</published>
    <updated>2020-06-19T13:20:36.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>刷题更让我们对一门语言有更加深入的理解，也可以增进对数据结构的理解，百里无一害。</p><h1 id="Two-Sum"><a href="#Two-Sum" class="headerlink" title="Two Sum"></a>Two Sum</h1><p><a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="noopener">Two Sum</a></p><p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.</p><p>You may assume that each input would have <strong>exactly</strong> one solution, and you may not use the <em>same</em> element twice.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [2, 7, 11, 15], target = 9,</span><br><span class="line"></span><br><span class="line">Because nums[0] + nums[1] = 2 + 7 = 9,</span><br><span class="line">return [0, 1].</span><br></pre></td></tr></table></figure><p>这也是我处女面试的第一个算法，当时想的方法是最暴力的方法，直接两个循环完事，但是时间复杂度是$O(n^{2})$，那是相当的高o(╥﹏╥)o。后来想了一下找到了一个简单的方法，当时由于太紧张写的不太好。当时的问题方法也稍微有点不同，<em>当时要求的是找到相对应的数字，不是index</em>。 先回顾一下当时的算法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] another(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">int</span> head = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> tail = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sort it</span></span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> value = nums[head] + nums[tail];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (value == target) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (value &gt; target) tail -= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> head += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (head == tail) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (head != tail) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;nums[head], nums[tail]&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当时想到的是两头同时遍历的方法，但是有个前提要求就是list必须是排过序的，当<code>nums</code>无限大时排序所消耗的时间可以忽略的，这个方法有点类似于<strong>binary search</strong>。我当时也想过用<code>HashMap</code>，好像处于什么原因被面试官否定了，whatever不重要的。不闲扯了，我们开始看这题的比较优化的算法，时间复杂度是<code>O(n)</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i ++) &#123;</span><br><span class="line">        <span class="keyword">int</span> minus = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(minus)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;map.get(minus), i&#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>算法思路：</p><ol><li>因为是用的<code>HashMap</code>所以在检测key是否contain的话使用的是hash的方法，所以复杂度是$O(1)$</li><li>第7-11行，是来判断这个HashMap是否包含这个num，如果这个num不包含在HashMap里面，然后把该num存到HashMap里面，num当做key，index当做value。这样就相当于把访问过的num和num的index存到HashMap里面，然后再遍历nums的时候得对每个数可以得到一个差值，然后判断这个差值是否存在HashMap里面，如果存在就代表得到这个结果了，如果不存在就把这个<code>nums[i]</code>存到HashMap。</li></ol><h1 id="Add-Two-Numbers"><a href="#Add-Two-Numbers" class="headerlink" title="Add Two Numbers"></a>Add Two Numbers</h1><p><a href="https://leetcode.com/problems/add-two-numbers/" target="_blank" rel="noopener">Add Two Numbers</a></p><p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong> and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">Output: 7 -&gt; 0 -&gt; 8</span><br><span class="line">Explanation: 342 + 465 = 807.</span><br></pre></td></tr></table></figure><p>算法思想：</p><p><strong>主要应该考虑一下边界情况：</strong></p><ol><li>当sum&gt;=10 </li><li>两个链表不一样长</li><li>在最后一个数字相加的时候sum&gt;=10</li></ol><p>第6行的while语句就是为了两条链表不一样长度。第7-8行判断如果该链表不为null就取该val，不然的话就为0（为了不影响下面的计算）。<code>int overflow = 0</code>是为了解决和超过10的情况，第9行把溢出的数字和v1，v2相加，然后把该结果取余就是结果。然后把<code>overflow = sum/10</code> 得到进位数。每次生成新的数字之后生成一个新的node没然后链接起来。<strong>主要是考虑不同的边界情况。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> overflow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l1 == <span class="keyword">null</span> &amp;&amp; l2 == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    ListNode new_node = <span class="keyword">new</span> ListNode();</span><br><span class="line">    ListNode head = new_node;</span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="keyword">null</span> || l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> v1 = (l1 != <span class="keyword">null</span>) ? l1.val : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> v2 = (l2 != <span class="keyword">null</span>) ? l2.val : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = v1+v2 + overflow;</span><br><span class="line">        overflow = sum / <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (l1 != <span class="keyword">null</span>) l1 = l1.next;</span><br><span class="line">        <span class="keyword">if</span> (l2 != <span class="keyword">null</span>) l2 = l2.next;</span><br><span class="line">        new_node.val = sum % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (l1 != <span class="keyword">null</span> || l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            new_node.next = <span class="keyword">new</span> ListNode();</span><br><span class="line">            new_node = new_node.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (overflow &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        new_node.next = <span class="keyword">new</span> ListNode(overflow % <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Longest-Substring-Without-Repeating-Characters"><a href="#Longest-Substring-Without-Repeating-Characters" class="headerlink" title="Longest Substring Without Repeating Characters"></a>Longest Substring Without Repeating Characters</h1><p>Given a string, find the length of the <strong>longest substring</strong> without repeating characters.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;abcabcbb&quot;</span><br><span class="line">Output: 3 </span><br><span class="line">Explanation: The answer is &quot;abc&quot;, with the length of 3.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;bbbbb&quot;</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: The answer is &quot;b&quot;, with the length of 1.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;pwwkew&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The answer is &quot;wke&quot;, with the length of 3. </span><br><span class="line">             Note that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.</span><br></pre></td></tr></table></figure><p>解题方法&amp;思路：</p><p>首先说下题意，我刚开始是没理解题意来得（暴露了自己的无知╮(╯▽╰)╭），题意就是匹配到最长的子字符串，并且不能重复。比如<code>pwwkew</code> 可以匹配到<code>wke</code> 最后一个w不可以被匹配到，因为该子字符串已经包含了一个w。</p><p>算法解析：<del>我们可以使用暴力解法：双循环（但是不推荐)</del>。我们可以使用HashMap来解决该问题，因为HashMap查询的时候只需要$O(1)$的时间复杂度。</p><ol><li>首先对该字符串进行遍历，如果该字符不在HashMap里面，则把该字符添加到HashMap，取max（HashMap length, ans）</li><li>如果该字符已经出现在HashMap里面，从HashMap里面去除一个字符，然后current index保持不变（会对该index进行再次遍历）</li><li>循环</li></ol><p>有点类似于：当一个字符不在该HashMap，push进去，如果已经在了，pop出来。然后在push之后计算最大的长度是多少。（进去一个如果已经存在就pop出来一个，<strong>因为重点是长度，所以不需要关心到底是哪些字符</strong>）。</p><p>Python伪代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LongSubString</span><span class="params">(s)</span>:</span></span><br><span class="line">4<span class="keyword">while</span> i &lt; len(s):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s[i] <span class="keyword">in</span> hashmap:</span><br><span class="line">      hashmap[s[i]] = <span class="number">0</span></span><br><span class="line">      ans = max(len(hashmap), ans)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">del</span> hashmap[s[d]]</span><br><span class="line">      d += <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>Java解决方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongestSubstring</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> remove = <span class="number">0</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length();) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(s.charAt(i))) &#123;</span><br><span class="line">                map.put(s.charAt(i), <span class="number">0</span>);</span><br><span class="line">                ans = Math.max(map.size(), ans);</span><br><span class="line">                i ++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.remove(s.charAt(remove));</span><br><span class="line">                remove += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LongestSubstring lon = <span class="keyword">new</span> LongestSubstring();</span><br><span class="line">        System.out.println(lon.lengthOfLongestSubstring(<span class="string">"abcabcbb"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Valid-Parentheses"><a href="#Valid-Parentheses" class="headerlink" title="Valid Parentheses"></a>Valid Parentheses</h1><p><a href="https://leetcode.com/problems/valid-parentheses/" target="_blank" rel="noopener">valid parentheses</a></p><p>Given a string containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p><p>An input string is valid if:</p><ol><li>Open brackets must be closed by the same type of brackets.</li><li>Open brackets must be closed in the correct order.</li></ol><p>Note that an empty string is also considered valid.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;()&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;(]&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p><strong>Example 4:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;([)]&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p><strong>Example 5:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;&#123;[]&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p>解题思路：</p><p>这个题我使用了stack（栈）的方法来解决这个问题。stack是一种先进后出的数据结构，所以更加适合这种问题。</p><ol><li>我们先来初始化一个HashMap来存相对应的括号</li><li>先判断该HashMap是否存在该左括号，如果存在就把左括号push到stack里面，</li><li>如果不存在先判断stack是否有数据（因为不存在的情况只有该字符是右括号的情况）</li><li>然后根据stack pop出来的结果在HashMap找到相对应的右括号，然后判断该字符和HashMap里面的右括号是否匹配。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;Character&gt;();</span><br><span class="line">    Map&lt;Character, Character&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">'['</span>, <span class="string">']'</span>);</span><br><span class="line">    map.put(<span class="string">'('</span>, <span class="string">')'</span>);</span><br><span class="line">    map.put(<span class="string">'&#123;'</span>, <span class="string">'&#125;'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(s.charAt(i))) &#123;</span><br><span class="line">            stack.push(s.charAt(i));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (stack.isEmpty()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (!map.get(stack.pop()).equals(s.charAt(i))) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Reverse-Integer"><a href="#Reverse-Integer" class="headerlink" title="Reverse Integer"></a>Reverse Integer</h1><p><a href="https://leetcode.com/problems/reverse-integer/" target="_blank" rel="noopener">reverse integer</a></p><p>Given a 32-bit signed integer, reverse digits of an integer.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 123</span><br><span class="line">Output: 321</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: -123</span><br><span class="line">Output: -321</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 120</span><br><span class="line">Output: 21</span><br></pre></td></tr></table></figure><p>本来以为这个题很简单，使用了最简单的算法，但是呢，出现了一个整型溢出的问题o(╥﹏╥)o。</p><p>先解析一下思路吧：</p><ol><li>首先我们可以用<code>x%10</code>来得到最后一个数字（因为数字不可能大于10）</li><li><code>x/10</code>是把最后一位数去掉</li><li><code>reverse*10</code>是为了整体向左移一位，比如(44, 44*10 = 440)多出一个空位，然后加上<code>x%10</code>的数字</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> reverse = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> last_digit = x % <span class="number">10</span>;</span><br><span class="line">        reverse = reverse * <span class="number">10</span> + last_digit;</span><br><span class="line">        x = x / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> reverse ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样如果数字区间在$[−2^{31}, 2^{31} − 1]$的话那么就会出现溢出的问题了，大家可以使用<code>1534236469</code>来尝试一下。</p><p>所以这时候我们就需要来做些判断了：</p><p>当<code>reverse &gt; intMAX/10</code>的时候我们基本上就可以确定他会溢出了，比如说<code>intMAX = 2147483647</code>，假设我们的<code>reverse = 214748365</code> 这时候<code>intMAX/10 =214748364</code>，<code>reverse &gt; intMAX</code>。这时候如果<code>reverse * 10</code>我们不管最后一个数字是什么了，<code>reverse</code>已经超出了int取值范围。</p><p>正确代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> reverse = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> last_digit = x % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (reverse &gt; Integer.MAX_VALUE / <span class="number">10</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (reverse &lt; Integer.MIN_VALUE / <span class="number">10</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        reverse = reverse * <span class="number">10</span> + last_digit;</span><br><span class="line">        x = x / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> reverse ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Palindrome-Number"><a href="#Palindrome-Number" class="headerlink" title="Palindrome Number"></a>Palindrome Number</h1><p><a href="https://leetcode.com/problems/palindrome-number/" target="_blank" rel="noopener">palindrome number</a></p><p>Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 121</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: -121</span><br><span class="line">Output: false</span><br><span class="line">Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: 10</span><br><span class="line">Output: false</span><br><span class="line">Explanation: Reads 01 from right to left. Therefore it is not a palindrome.</span><br></pre></td></tr></table></figure><p>回文数也就是说该数字等于翻转后的数字，<code>num = reverse(num)</code>。首先我们可以确定如果该数字是负数直接false就好了。我们可以使用上一题的思路，把数字翻转然后看是否相等。<strong>也可以把边界情况考虑进行。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> reverse = <span class="number">0</span>, temp = x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> last_digit = temp % <span class="number">10</span>;</span><br><span class="line">        reverse = reverse * <span class="number">10</span> + last_digit;</span><br><span class="line">        temp = temp / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> reverse == x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Longest-Common-Prefix"><a href="#Longest-Common-Prefix" class="headerlink" title="Longest Common Prefix"></a>Longest Common Prefix</h1><p>Write a function to find the longest common prefix string amongst an array of strings.</p><p>If there is no common prefix, return an empty string <code>&quot;&quot;</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">Output: &quot;fl&quot;</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">Output: &quot;&quot;</span><br><span class="line">Explanation: There is no common prefix among the input strings.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><p>All given inputs are in lowercase letters <code>a-z</code>.</p><p>集体思路：</p><p>采用了垂直对比法。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">s1 = &apos;flower&apos;</span><br><span class="line"></span><br><span class="line">s2 = &apos;flow&apos;</span><br><span class="line">s3 = &apos;flight&apos;</span><br><span class="line"></span><br><span class="line">我们第一层循环是表示当前string的index, i = 0;</span><br><span class="line">然后得到第一个string的第i个char</span><br><span class="line">第二个循环式为了和剩余的string比对，</span><br><span class="line">如果i的大小等于当前string的长度也就意味着遇到了结束点，比如当i=3的时候，i = s2.length，也就意味着有结束点了。</span><br><span class="line"></span><br><span class="line">c != strs[j].charAt(i) 这就语句是为了判断当前string的第i个char是否和第一个相等，如果不想当也就意味着可以返回i之前的数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">最后一行意味着strs[0]是最短的字符串，而且strs[0]是comm prefix</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs[<span class="number">0</span>].length(); i ++ ) &#123;</span><br><span class="line">        <span class="keyword">char</span> c = strs[<span class="number">0</span>].charAt(i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; strs.length; j ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == strs[j].length() || c != strs[j].charAt(i))</span><br><span class="line">                <span class="keyword">return</span> strs[<span class="number">0</span>].substring(<span class="number">0</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以试着得到最短的string，然后进行循环，思路差不多：</p><p>这种情况其实没什么必要，因为可能没循环结束就return了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get the shortest string length</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.length; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (strs[i].length() &lt; min) &#123;</span><br><span class="line">            min = strs[i].length();</span><br><span class="line">            index = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i  = <span class="number">0</span>; i &lt; min; i ++) &#123;</span><br><span class="line">        <span class="keyword">char</span> c = strs[<span class="number">0</span>].charAt(i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c != str.charAt(i)) <span class="keyword">return</span> str.substring(<span class="number">0</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> strs[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Merge-Two-Sorted-Lists"><a href="#Merge-Two-Sorted-Lists" class="headerlink" title="Merge Two Sorted Lists"></a>Merge Two Sorted Lists</h1><p><a href="https://leetcode.com/problems/merge-two-sorted-lists/" target="_blank" rel="noopener">Merge two sorted lists</a></p><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure><p>这个好像没什么说的，就直接对比大小然后merge在一起就行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    ListNode head = <span class="keyword">new</span> ListNode();</span><br><span class="line">    ListNode temp = head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        temp.next = <span class="keyword">new</span> ListNode();</span><br><span class="line">        temp = temp.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (l1.val &lt;= l2.val) &#123;</span><br><span class="line">            temp.val = l1.val;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            temp.val = l2.val;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l1 != <span class="keyword">null</span>) temp.next = l1;</span><br><span class="line">    <span class="keyword">if</span> (l2 != <span class="keyword">null</span>) temp.next = l2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Remove-Duplicates-from-Sorted-Array"><a href="#Remove-Duplicates-from-Sorted-Array" class="headerlink" title="Remove Duplicates from Sorted Array"></a>Remove Duplicates from Sorted Array</h1><p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener">Remove Duplicates from Sorted Array</a></p><p>Given a sorted array <em>nums</em>, remove the duplicates <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener"><strong>in-place</strong></a> such that each element appear only <em>once</em> and return the new length.</p><p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener">in-place</a></strong> with O(1) extra memory.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [1,1,2],</span><br><span class="line"></span><br><span class="line">Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.</span><br><span class="line"></span><br><span class="line">It doesn&apos;t matter what you leave beyond the returned length.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line"></span><br><span class="line">Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.</span><br><span class="line"></span><br><span class="line">It doesn&apos;t matter what values are set beyond the returned length.</span><br></pre></td></tr></table></figure><p>最获取长度的同时需要对array内部数据进行修改：</p><p>通过每次记录num，如果不相同的话，对数组的其实位置开始修改，然后curr是正在修改的index。（也会随着i增加而增加，如果所有数字都不一样）只不过是重新赋值了一次而已。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> dup = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> curr = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dup != nums[i]) &#123;</span><br><span class="line">            dup = nums[i];</span><br><span class="line">            nums[curr++] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> curr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Roman-to-Integer"><a href="#Roman-to-Integer" class="headerlink" title="Roman to Integer"></a>Roman to Integer</h1><p><a href="https://leetcode.com/problems/roman-to-integer/" target="_blank" rel="noopener">Roman to Integer</a></p><p>Roman numerals are represented by seven different symbols: <code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Symbol       Value</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure><p>For example, two is written as <code>II</code> in Roman numeral, just two one’s added together. Twelve is written as, <code>XII</code>, which is simply <code>X</code> + <code>II</code>. The number twenty seven is written as <code>XXVII</code>, which is <code>XX</code> + <code>V</code> + <code>II</code>.</p><p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p><ul><li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9. </li><li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90. </li><li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li></ul><p>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;III&quot;</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;IV&quot;</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;IX&quot;</span><br><span class="line">Output: 9</span><br></pre></td></tr></table></figure><p><strong>Example 4:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;LVIII&quot;</span><br><span class="line">Output: 58</span><br><span class="line">Explanation: L = 50, V= 5, III = 3.</span><br></pre></td></tr></table></figure><p><strong>Example 5:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;MCMXCIV&quot;</span><br><span class="line">Output: 1994</span><br><span class="line">Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.</span><br></pre></td></tr></table></figure><p>好像没什么好说的就是简单的字符串操作而已：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">'I'</span>, <span class="number">1</span>);</span><br><span class="line">    map.put(<span class="string">'V'</span>, <span class="number">5</span>);</span><br><span class="line">    map.put(<span class="string">'X'</span>, <span class="number">10</span>);</span><br><span class="line">    map.put(<span class="string">'L'</span>, <span class="number">50</span>);</span><br><span class="line">    map.put(<span class="string">'C'</span>, <span class="number">100</span>);</span><br><span class="line">    map.put(<span class="string">'D'</span>, <span class="number">500</span>);</span><br><span class="line">    map.put(<span class="string">'M'</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i ++) &#123;</span><br><span class="line">        <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'V'</span> || c == <span class="string">'X'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i-<span class="number">1</span>) == <span class="string">'I'</span>) res += map.get(c) - <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">else</span> res += map.get(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> res += map.get(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'L'</span> || c == <span class="string">'C'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i-<span class="number">1</span>) == <span class="string">'X'</span>) res += map.get(c) - <span class="number">20</span>;</span><br><span class="line">                <span class="keyword">else</span> res += map.get(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> res += map.get(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'D'</span> || c == <span class="string">'M'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i-<span class="number">1</span>) == <span class="string">'C'</span>) res += map.get(c) - <span class="number">200</span>;</span><br><span class="line">                <span class="keyword">else</span> res += map.get(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> res += map.get(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res += map.get(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Remove-Element"><a href="#Remove-Element" class="headerlink" title="Remove Element"></a>Remove Element</h1><p><a href="https://leetcode.com/problems/remove-element/" target="_blank" rel="noopener">Remove Element</a></p><p>Given an array <em>nums</em> and a value <em>val</em>, remove all instances of that value <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener"><strong>in-place</strong></a> and return the new length.</p><p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener">in-place</a></strong> with O(1) extra memory.</p><p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [3,2,2,3], val = 3,</span><br><span class="line"></span><br><span class="line">Your function should return length = 2, with the first two elements of nums being 2.</span><br><span class="line"></span><br><span class="line">It doesn&apos;t matter what you leave beyond the returned length.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [0,1,2,2,3,0,4,2], val = 2,</span><br><span class="line"></span><br><span class="line">Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.</span><br><span class="line"></span><br><span class="line">Note that the order of those five elements can be arbitrary.</span><br><span class="line"></span><br><span class="line">It doesn&apos;t matter what values are set beyond the returned length.</span><br></pre></td></tr></table></figure><p>这个和前面那个remove duplicate number是一个思路：</p><p>这个算法很简单，但是效率贼高。其实很好理解，就是当这个数字不等于val的时候，会用之前的curr（非重复的数字坐标）来替换当前的val。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">3, 2, 2, 3 &amp; val = 2</span><br><span class="line">curr = 0</span><br><span class="line"></span><br><span class="line">when i = 0, val != nums[i] num[curr++] = nums[i] -&gt; nums[0] = nums[0] and curr = 1 now</span><br><span class="line">when i = 1, val == nums[i] continue</span><br><span class="line">when i = 2, val == nums[i] continue</span><br><span class="line">when i = 3, val != nums[i] num[curr++] = nums[i] -&gt; nums[1] = nums[3] and curr = 2 now</span><br><span class="line"></span><br><span class="line">so nums = 3, 3, 2, 3 and curr = 2, we do not care index &gt; 1 values,</span><br><span class="line">so we done</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> curr = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (val != nums[i]) &#123;</span><br><span class="line">            nums[curr++] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> curr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Implement-strStr"><a href="#Implement-strStr" class="headerlink" title="Implement strStr()"></a>Implement strStr()</h1><p><a href="https://leetcode.com/problems/implement-strstr/" target="_blank" rel="noopener">Implement strStr()</a></p><p>Return the index of the first occurrence of needle in haystack, or <strong>-1</strong> if needle is not part of haystack.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: haystack = &quot;hello&quot;, needle = &quot;ll&quot;</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot;</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure><p><strong>返回要求的是index，我还以为是长度一度迷茫为啥不对o(╥﹏╥)o</strong>，一个for就能解决的问题，我们先去<code>needle</code>的第一个字符，然后在循环<code>haystack</code>的时候如果里面有字符和<code>needle</code>的第一个字符匹配了就用<code>substring</code>来接取相对应的长度，然后判断是否和<code>needle</code>相等（需要判断index的长度是不是超过了<code>haystack</code>的长度）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span><span class="params">(String haystack, String needle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (needle.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = needle.charAt(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; haystack.length(); i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (haystack.charAt(i) == c) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + needle.length() &gt; haystack.length()) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (haystack.substring(i, i+needle.length()).equals(needle)) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Search-insert-position"><a href="#Search-insert-position" class="headerlink" title="Search insert position"></a>Search insert position</h1><p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p><p>You may assume no duplicates in the array.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,3,5,6], 5</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,3,5,6], 2</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p>就是找到合适的位置，然后返回相对应的index，没什么难度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt;= target) <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nums.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Median-of-two-sorted-array"><a href="#Median-of-two-sorted-array" class="headerlink" title="Median of two sorted array"></a>Median of two sorted array</h1><p>There are two sorted arrays <strong>nums1</strong> and <strong>nums2</strong> of size m and n respectively.</p><p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p><p>You may assume <strong>nums1</strong> and <strong>nums2</strong> cannot be both empty.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nums1 = [1, 3]</span><br><span class="line">nums2 = [2]</span><br><span class="line"></span><br><span class="line">The median is 2.0</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nums1 = [1, 2]</span><br><span class="line">nums2 = [3, 4]</span><br><span class="line"></span><br><span class="line">The median is (2 + 3)/2 = 2.5</span><br></pre></td></tr></table></figure><p>没办法太菜了找不到合适的方法来写了，有想过分开循环，但是这样需要有很多的判断条件，晚会会再尝试的，目前就快的方法就是合并array了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> l1 = <span class="number">0</span>, l2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (l1 &lt; nums1.length &amp;&amp; l2 &lt; nums2.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1[l1] &lt; nums2[l2]) &#123;</span><br><span class="line">            list.add(nums1[l1]);</span><br><span class="line">            l1 += <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            list.add(nums2[l2]);</span><br><span class="line">            l2 += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add n2</span></span><br><span class="line">    <span class="keyword">if</span> (l1 &gt;= nums1.length) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l2; i &lt; nums2.length; i ++) list.add(nums2[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l1; i &lt; nums1.length; i ++) list.add(nums1[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = list.size();</span><br><span class="line">    <span class="keyword">if</span> (len % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> list.get(len/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">double</span>) (list.get(len/<span class="number">2</span>) + list.get(len/<span class="number">2</span>-<span class="number">1</span>)) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="String-to-Integer-atoi"><a href="#String-to-Integer-atoi" class="headerlink" title="String to Integer (atoi)"></a>String to Integer (atoi)</h1><p><a href="https://leetcode.com/problems/string-to-integer-atoi/" target="_blank" rel="noopener">String to Integer (atoi)</a></p><p>Implement <code>atoi</code> which converts a string to an integer.</p><p>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p><p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p><p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p><p>If no valid conversion could be performed, a zero value is returned.</p><p><strong>Note:</strong></p><ul><li>Only the space character <code>&#39; &#39;</code> is considered as whitespace character.</li><li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. If the numerical value is out of the range of representable values, INT_MAX (231 − 1) or INT_MIN (−231) is returned.</li></ul><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;42&quot;</span><br><span class="line">Output: 42</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;   -42&quot;</span><br><span class="line">Output: -42</span><br><span class="line">Explanation: The first non-whitespace character is &apos;-&apos;, which is the minus sign.</span><br><span class="line">             Then take as many numerical digits as possible, which gets 42.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;4193 with words&quot;</span><br><span class="line">Output: 4193</span><br><span class="line">Explanation: Conversion stops at digit &apos;3&apos; as the next character is not a numerical digit.</span><br></pre></td></tr></table></figure><p><strong>Example 4:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;words and 987&quot;</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: The first non-whitespace character is &apos;w&apos;, which is not a numerical </span><br><span class="line">             digit or a +/- sign. Therefore no valid conversion could be performed.</span><br></pre></td></tr></table></figure><p><strong>Example 5:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;-91283472332&quot;</span><br><span class="line">Output: -2147483648</span><br><span class="line">Explanation: The number &quot;-91283472332&quot; is out of the range of a 32-bit signed integer.</span><br><span class="line">             Thefore INT_MIN (−231) is returned.</span><br></pre></td></tr></table></figure><p>这是我写LeetCode以来submit最多的次数╮(╯▽╰)╭，里面条件的限制和符号的判定太烦了。给大家写一下判断条件：</p><ol><li>空格只能出现在最前面，一旦出现了-+0-9这些符号，之后再遇到空格就要break</li><li>-+符号考虑到符号的问题</li><li>只能以数字开头的才能提取数字，如果不是就return 0</li><li>考虑到整型溢出的问题</li></ol><p>就是判断条件有点麻烦，其他的还好，我写的有点乱七八糟的，讲究看下。。。如果有好的idea可以写在comment里面，我会修改的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// + or -</span></span><br><span class="line">    <span class="keyword">int</span> operation = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (str.equals(<span class="string">""</span>))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> whitespace = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">boolean</span> sign = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i ++) &#123;</span><br><span class="line">        <span class="keyword">char</span> c = str.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (whitespace &amp;&amp; c == <span class="string">' '</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (!whitespace &amp;&amp; c == <span class="string">' '</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> ((c == <span class="string">'-'</span> || c == <span class="string">'+'</span>) &amp;&amp; sign) &#123;</span><br><span class="line">            operation = (c == <span class="string">'-'</span>)?-<span class="number">1</span>:<span class="number">1</span>;</span><br><span class="line">            sign = <span class="keyword">false</span>;</span><br><span class="line">            whitespace=<span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) <span class="keyword">break</span>;</span><br><span class="line">        whitespace = <span class="keyword">false</span>;</span><br><span class="line">        sign=<span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (res*operation &gt; Integer.MAX_VALUE/<span class="number">10</span> || res*operation &lt; Integer.MIN_VALUE/<span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (operation &gt; <span class="number">0</span>) <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (res*operation == Integer.MAX_VALUE/<span class="number">10</span>) <span class="keyword">if</span> ((<span class="keyword">int</span>)c-<span class="number">48</span> &gt;= Integer.MAX_VALUE %<span class="number">10</span>) <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">if</span> (res*operation == Integer.MIN_VALUE/<span class="number">10</span>) <span class="keyword">if</span> ((<span class="keyword">int</span>)(c-<span class="number">48</span>) * -<span class="number">1</span> &lt;= Integer.MIN_VALUE % <span class="number">10</span>) <span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line">        res = res * <span class="number">10</span> + (<span class="keyword">int</span>) c - <span class="number">48</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res *= operation;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Container-With-Most-Water"><a href="#Container-With-Most-Water" class="headerlink" title="Container With Most Water"></a>Container With Most Water</h1><p><a href="https://leetcode.com/problems/container-with-most-water/" target="_blank" rel="noopener">Container With Most Water</a></p><p><img src="/2020/05/26/leetcode/1.png" alt></p><p>本来觉得是要用动态规划，可是看了大佬的代码和idea瞬间觉得自己的思路是错的。这个题其实就是变相的求最大面积，我们可以知道长方体的面积是长*高，在遍历这个list的时候长度是一直在减小的，如果长度变小我们只有找到更大的高度才能使面积最大。那么我们可以从两头同时开始遍历，如果<code>left &lt; right</code> 那么left向左移，因为我们要找到higher height，如果<code>left &gt;= right</code> right向左移就行了。这样就会找到最大的area。</p><p>ps：不想想太复杂，试着从最基本的信息去推断，比如这个面积，如果一个变量变下，那另一个变量只有变大才能找到最大的。（😁学习到了）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = height.length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        max = Math.max(max, Math.min(height[l], height[r]) * Math.abs(r - l));</span><br><span class="line">        <span class="keyword">if</span> (height[l] &lt; height[r]) l ++;</span><br><span class="line">        <span class="keyword">else</span> r --;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Merge-Sorted-Array"><a href="#Merge-Sorted-Array" class="headerlink" title="Merge Sorted Array"></a>Merge Sorted Array</h1><p><a href="https://leetcode.com/problems/merge-sorted-array/" target="_blank" rel="noopener">Merge Sorted Array</a></p><p>Given two sorted integer arrays <em>nums1</em> and <em>nums2</em>, merge <em>nums2</em> into <em>nums1</em> as one sorted array.</p><p><strong>Note:</strong></p><ul><li>The number of elements initialized in <em>nums1</em> and <em>nums2</em> are <em>m</em> and <em>n</em> respectively.</li><li>You may assume that <em>nums1</em> has enough space (size that is greater or equal to <em>m</em> + <em>n</em>) to hold additional elements from <em>nums2</em>.</li></ul><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">nums1 = [1,2,3,0,0,0], m = 3</span><br><span class="line">nums2 = [2,5,6],       n = 3</span><br><span class="line"></span><br><span class="line">Output: [1,2,2,3,5,6]</span><br></pre></td></tr></table></figure><p>这是我今天逛<a href="https://www.nowcoder.com/" target="_blank" rel="noopener">牛客</a>的时候发现的一道题，然后想了一下，按照我现在的思想好像只知道直接merge然后sort。还有一种就是正序插入，但是每个element都需要后移一位，但是这样的效率太低了，看了网上的大神的idea之后就发现了新大陆。因为这个list是拍过序的，那么我们就知道了最后一个元素肯定是最大。那么我们为什么不从后面往前面循环呢，这样不需要元素以为，只需要直接赋值就好了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// the last position of array</span></span><br><span class="line">    <span class="keyword">int</span> last = nums1.length - <span class="number">1</span>;</span><br><span class="line">    m--; n--;</span><br><span class="line">    <span class="keyword">while</span> (m &gt; <span class="number">0</span> &amp;&amp; n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1[m] &gt; nums2[n]) nums1[last--] = nums1[m--];</span><br><span class="line">        <span class="keyword">else</span> nums1[last--] = nums2[n--];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m &gt; <span class="number">0</span>) nums1[last--] = nums1[m--];</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) nums1[last--] = nums2[n--];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Single-Number"><a href="#Single-Number" class="headerlink" title="Single Number"></a>Single Number</h1><p>Given a <strong>non-empty</strong> array of integers, every element appears <em>twice</em> except for one. Find that single one.</p><p><strong>Note:</strong></p><p>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,2,1]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [4,1,2,1,2]</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure><p>庆幸一下终于可以独立思考出来一些简单的算法了。这个题其实算是还OK的，可以使用HashMap解决，因为HashMap监测key的时候的时间复杂度是$O(1)$，所以整体时间是$O(n)$。在loop里面去判断该数字是否存在HashMap里面，如果不存在就push进去，如果已经存在就删除。那么最后剩下的那个元素肯定是single（<del>单身狗</del>）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span> <span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> value : A) &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(value)) &#123;</span><br><span class="line">            map.remove(value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(value, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(map.keySet().toArray()[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ps: 在discuss里面看到了一个特别骚的操作。。。真的骚操作。。。</p><p>使用了异或（exclusive OR简称xor）这个来判断的，异或的话空间复杂度只有$O(1)$。</p><blockquote><p>$1\oplus0=1$</p><p>$1\oplus1=1$</p><p>$0\oplus0=0$</p><p>$0\oplus1=1$</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        res ^= nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行吧。。。牛逼。。</p><h1 id="Remove-Nth-Node-From-End-of-List"><a href="#Remove-Nth-Node-From-End-of-List" class="headerlink" title="Remove Nth Node From End of List"></a>Remove Nth Node From End of List</h1><p><a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="noopener">Remove Nth Node From End of List</a></p><p>Given a linked list, remove the <em>n</em>-th node from the end of list and return its head.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.</span><br><span class="line"></span><br><span class="line">After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><p>Given <em>n</em> will always be valid.</p><p><strong>Follow up:</strong></p><p>Could you do this in one pass?</p><p>解析：</p><p>题意就是删除倒数第N的节点。这个可以使用一个快慢指针的方法来解决，先让快的指针移动n个node，然后慢的指针开始移动。这样当快的指针为null的时候，慢的指针刚好就是要删除的节点。</p><p><img src="/2020/05/26/leetcode/2.png" alt></p><p>其实可以当<code>fast.next == null</code>的时候就停止。这样<code>slow.next = slow.next.next</code>是一样的，因为我的代码用了<code>curr</code>来判断是否为null（删除的元素是不是head）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> val;</span><br><span class="line">     ListNode next;</span><br><span class="line">     ListNode() &#123;&#125;</span><br><span class="line">     ListNode(<span class="keyword">int</span> val) &#123; <span class="keyword">this</span>.val = val; &#125;</span><br><span class="line">     ListNode(<span class="keyword">int</span> val, ListNode next) &#123; <span class="keyword">this</span>.val = val; <span class="keyword">this</span>.next = next; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    ListNode curr = <span class="keyword">null</span>;</span><br><span class="line">    ListNode slow = head;</span><br><span class="line">    ListNode fast = head;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            curr = slow;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        n --;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// means at the head</span></span><br><span class="line">    <span class="keyword">if</span>(curr == <span class="keyword">null</span>) head = head.next;</span><br><span class="line">    <span class="keyword">if</span> (curr != <span class="keyword">null</span>) curr.next = slow.next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Maximum-Subarray"><a href="#Maximum-Subarray" class="headerlink" title="Maximum Subarray"></a>Maximum Subarray</h1><p><a href="https://leetcode.com/problems/maximum-subarray/" target="_blank" rel="noopener">Maximum Subarray</a></p><p>Given an integer array <code>nums</code>, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [-2,1,-3,4,-1,2,1,-5,4],</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: [4,-1,2,1] has the largest sum = 6.</span><br></pre></td></tr></table></figure><p><strong>Follow up:</strong></p><p>If you have figured out the O(<em>n</em>) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p><p>题意解析：找到和最大的子序列。</p><p>算法解析：</p><p>可以使用动态规划来做。初始化一个数组长度和原数组一样，如果<code>i-1</code>的数字小于零就表示这就不用需要进行加和，因为加负数就是在减小，然后把<code>i</code>就行赋值。在每次循环的时候找到最大的值就行（<code>max</code>,<code>dp[i]</code>取最大的）。<code>dp[i]</code>存的结果：如果<code>dp[i-1]</code>小于零那就是本身，不然就是<code>dp[i-1] + num[i]</code>加上当前数字。</p><p><img src="/2020/05/26/leetcode/3.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">    dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[i-<span class="number">1</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            dp[i] = nums[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dp[i] = dp[i-<span class="number">1</span>] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        max = Math.max(dp[i], max);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了大佬的思路之后发现了新天地，可以节省一些内存空间，降低空间复杂度：</p><p>只需要两个空间的位置就行了，因为我们只需要<code>i</code>和<code>i-1</code>这两个参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    temp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp[(i - <span class="number">1</span>) % <span class="number">2</span>] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            temp[i % <span class="number">2</span>] = temp[(i-<span class="number">1</span>) % <span class="number">2</span>] + nums[i];</span><br><span class="line">            max = Math.max(temp[i%<span class="number">2</span>], max);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            temp[i % <span class="number">2</span>] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Climbing-Stairs"><a href="#Climbing-Stairs" class="headerlink" title="Climbing Stairs"></a>Climbing Stairs</h1><p><a href="https://leetcode.com/problems/climbing-stairs/" target="_blank" rel="noopener">Climbing Stairs</a></p><p>You are climbing a stair case. It takes <em>n</em> steps to reach to the top.</p><p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p><p><strong>Note:</strong> Given <em>n</em> will be a positive integer.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: 2</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: There are two ways to climb to the top.</span><br><span class="line">1. 1 step + 1 step</span><br><span class="line">2. 2 steps</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: There are three ways to climb to the top.</span><br><span class="line">1. 1 step + 1 step + 1 step</span><br><span class="line">2. 1 step + 2 steps</span><br><span class="line">3. 2 steps + 1 step</span><br></pre></td></tr></table></figure><p>这是一个很经典的动态规划的问题。一次可以走一阶楼梯或者两阶楼梯。在第一层的时候肯定只能上一阶，第二层的时候可以是1+1（连续走两个一阶）或者2（直接两阶）所以是两种方法，第三层的时候可以是1+1+1, 1+2, 2+1三种方法。所以可以看出$f(n)=f(n-1)+f(n-2)$的算法。</p><p><img src="/2020/05/26/leetcode/4.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    array[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    array[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i ++ )&#123;</span><br><span class="line">        array[i] = array[i-<span class="number">1</span>] + array[i-<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> array[n-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Best-Time-to-Buy-and-Sell-Stock"><a href="#Best-Time-to-Buy-and-Sell-Stock" class="headerlink" title="Best Time to Buy and Sell Stock"></a>Best Time to Buy and Sell Stock</h1><p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">Best Time to Buy and Sell Stock</a></p><p>Say you have an array for which the <em>i</em>th element is the price of a given stock on day <em>i</em>.</p><p>If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p><p>Note that you cannot sell a stock before you buy one.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [7,1,5,3,6,4]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.</span><br><span class="line">             Not 7-1 = 6, as selling price needs to be larger than buying price.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [7,6,4,3,1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: In this case, no transaction is done, i.e. max profit = 0.</span><br></pre></td></tr></table></figure><p>这个题的思路稍微简单一点，可以使用动态规划来找到最小的买入价格，然后我们就可以根绝在买入价格最低的日期之后，找到卖出价格最高的点，这样收益就是最大的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (prices.length &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>, stock = prices[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> price : prices) &#123;</span><br><span class="line">        <span class="keyword">int</span> receive = price - stock;</span><br><span class="line">      <span class="comment">// 找到最大收入</span></span><br><span class="line">        <span class="keyword">if</span> (receive &gt;= <span class="number">0</span>) max = Math.max(max, price-stock);</span><br><span class="line">4444<span class="comment">// 找到最新的收入</span></span><br><span class="line">        stock = Math.min(stock, price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Linked-List-Cycle"><a href="#Linked-List-Cycle" class="headerlink" title="Linked List Cycle"></a>Linked List Cycle</h1><p>Given a linked list, determine if it has a cycle in it.</p><p>To represent a cycle in the given linked list, we use an integer <code>pos</code> which represents the position (0-indexed) in the linked list where tail connects to. If <code>pos</code> is <code>-1</code>, then there is no cycle in the linked list.</p><p><img src="/2020/05/26/leetcode/5.png" alt></p><p>算法思路：</p><p>一开始想到的是用HashMap的方式来解决这个问题，但是这样的话空间复杂度就高了很多就是$O(n)$了，然后看了一下大神们的解法，就是利用快慢指针的方法，两种我都试了一下：</p><ol><li>HashMap的方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    Map&lt;ListNode, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    ListNode curr = head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(curr)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span> map.put(curr, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        curr = curr.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>快慢指针的方法</p><p>这样效率高，内存占用少</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    ListNode slow = head;</span><br><span class="line">    ListNode fast = head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (slow == fast) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Find-First-and-Last-Position-of-Element-in-Sorted-Array"><a href="#Find-First-and-Last-Position-of-Element-in-Sorted-Array" class="headerlink" title="Find First and Last Position of Element in Sorted Array"></a>Find First and Last Position of Element in Sorted Array</h1><p><a href="https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/" target="_blank" rel="noopener"> Find First and Last Position of Element in Sorted Array</a></p><p>Given an array of integers <code>nums</code> sorted in ascending order, find the starting and ending position of a given <code>target</code> value.</p><p>Your algorithm’s runtime complexity must be in the order of <em>O</em>(log <em>n</em>).</p><p>If the target is not found in the array, return <code>[-1, -1]</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [5,7,7,8,8,10], target = 8</span><br><span class="line">Output: [3,4]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [5,7,7,8,8,10], target = 6</span><br><span class="line">Output: [-1,-1]</span><br></pre></td></tr></table></figure><p>使用了一个<del>二分查找法</del>，头尾遍历法，不过貌似时间复杂度有点高。。没有别人那么快，花了1ms才通过。一会准备去看看大神的思路，看看有没有好的idea。第23-28行的主要作用是考虑到起始位置和结束位置在同一个地方，当其中有任何一个数字不是-1的时候，代表已经找到这个数字了，但是<code>head==tail</code>的时候就会结束循环了，所以会进行一个判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] searchRange(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">1</span>)<span class="keyword">return</span>  (nums[<span class="number">0</span>] == target) ? <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">0</span>, <span class="number">0</span>&#125;: <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> head = <span class="number">0</span>, tail = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>[] range = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (head &lt;= tail) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[head] == target) &#123;</span><br><span class="line">            range[<span class="number">0</span>] = head;</span><br><span class="line">            <span class="keyword">if</span> (range[<span class="number">1</span>] != -<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nums[tail] == target) &#123;</span><br><span class="line">            range[<span class="number">1</span>] = tail;</span><br><span class="line">            <span class="keyword">if</span> (range[<span class="number">0</span>] != -<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nums[head] &lt; target) head ++;</span><br><span class="line">        <span class="keyword">if</span> (nums[tail] &gt; target) tail --;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (head == tail) &#123;</span><br><span class="line">        <span class="keyword">if</span> (range[<span class="number">0</span>] == -<span class="number">1</span> || range[<span class="number">1</span>] == -<span class="number">1</span>) &#123;</span><br><span class="line">            range[<span class="number">0</span>] = Math.max(range[<span class="number">0</span>], range[<span class="number">1</span>]);</span><br><span class="line">            range[<span class="number">1</span>] = Math.max(range[<span class="number">0</span>], range[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> range;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刚去看了一下discussion里面，然后发现自己写的二分查找不叫二分查找，只能算是一个两头遍历的循环。然后根据二分查找的方法写了一份：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] searchRange(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> head = <span class="number">0</span>, tail = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>[] range = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (head &lt;= tail) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (head + tail) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            tail = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            head = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// make a loop from head to tail and tail to end</span></span><br><span class="line">            <span class="keyword">while</span> (head &lt;= mid) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[head] == target) &#123;</span><br><span class="line">                    range[<span class="number">0</span>] = head;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                head ++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (tail &gt;= mid) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[tail] == target) &#123;</span><br><span class="line">                    range[<span class="number">1</span>] = tail;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                tail --;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> range;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Pow-x-n"><a href="#Pow-x-n" class="headerlink" title="Pow(x, n)"></a>Pow(x, n)</h1><p><a href="https://leetcode.com/problems/powx-n/" target="_blank" rel="noopener"> Pow(x, n)</a></p><p>Implement <a href="http://www.cplusplus.com/reference/valarray/pow/" target="_blank" rel="noopener">pow(<em>x</em>, <em>n</em>)</a>, which calculates <em>x</em> raised to the power <em>n</em> (xn).</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 2.00000, 10</span><br><span class="line">Output: 1024.00000</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 2.10000, 3</span><br><span class="line">Output: 9.26100</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: 2.00000, -2</span><br><span class="line">Output: 0.25000</span><br><span class="line">Explanation: 2-2 = 1/22 = 1/4 = 0.25</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li>-100.0 &lt; <em>x</em> &lt; 100.0</li><li><em>n</em> is a 32-bit signed integer, within the range [−231, 231 − 1]</li></ul><p>这个就是简单的求一下平方，然后给保留5位小数就行了，用Python简单的写了一波</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myPow</span><span class="params">(self, x, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type x: float</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: float</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        x = x**n</span><br><span class="line">        </span><br><span class="line">        x = <span class="number">2</span>**<span class="number">32</span><span class="number">-1</span> <span class="keyword">if</span> x &gt;= <span class="number">2</span>**<span class="number">32</span><span class="number">-1</span> <span class="keyword">else</span> x</span><br><span class="line">        x = <span class="number">-2</span>**<span class="number">32</span> <span class="keyword">if</span> x &lt;= <span class="number">-2</span>**<span class="number">32</span> <span class="keyword">else</span> x</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> round(x, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h1 id="Intersection-of-Two-Linked-Lists"><a href="#Intersection-of-Two-Linked-Lists" class="headerlink" title="Intersection of Two Linked Lists"></a>Intersection of Two Linked Lists</h1><p><a href="https://leetcode.com/problems/intersection-of-two-linked-lists/" target="_blank" rel="noopener">Intersection of Two Linked Lists</a></p><p><img src="/2020/05/26/leetcode/6.png" alt></p><p>也算是我第一次面试的第一道题。当时想的是暴力解决，double循环哈哈哈。这次写的时候想到了一个新的方法就是使用HashMap来解决，最坏的情况是$O(n+m)$，不过也比$O(n^2)$好。先把一个LinkList全部放到HashMap里面，然后循环第二个链表，看是不是有一样的node，如果有就直接return当前的node，如果直到循环结束还没有就<code>return null</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">    ListNode head = <span class="keyword">null</span>;</span><br><span class="line">    ListNode curr = headA;</span><br><span class="line">    Map&lt;ListNode, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="keyword">null</span>) &#123;</span><br><span class="line">        map.put(curr, curr.val);</span><br><span class="line">        curr = curr.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    curr = headB;</span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(curr)) &#123;</span><br><span class="line">            head = curr;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curr = curr.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在面试的时候面试官也给我说了另一种解法，就是假设已知两条链表的长度，然后先把两条链表截取到一样的长度，然后一个循环就能找到相对应的结果。这个我觉得时间复杂度比我的要高，就没写。</p><h1 id="Majority-Element"><a href="#Majority-Element" class="headerlink" title="Majority Element"></a>Majority Element</h1><p><a href="https://leetcode.com/problems/majority-element/" target="_blank" rel="noopener">Majority Element</a></p><p>Given an array of size <em>n</em>, find the majority element. The majority element is the element that appears <strong>more than</strong> <code>⌊ n/2 ⌋</code> times.</p><p>You may assume that the array is non-empty and the majority element always exist in the array.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [3,2,3]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,2,1,1,1,2,2]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><p>看到这一类的题，最先想到的就是使用HashMap来解决这个计数的问题，当计数的结果<code>&gt; nums.leng/2</code>的时候可以直接return就好了，准没错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length &lt;= <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> len = nums.length - <span class="number">1</span>;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(nums[i])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.get(nums[i]) + <span class="number">1</span> &gt;= nums.length/<span class="number">2</span>) <span class="keyword">return</span> nums[i];</span><br><span class="line">            map.put(nums[i], map.get(nums[i]) + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(nums[i], <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后看了一下官方的解法，就是先sort一下，如果该数字的个数大于总array长度的一般也就意味着sort完之后取中间那个数字准没错。。。那么简单的方法咋就没想到呢o(╥﹏╥)o</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">return</span> nums[nums.length/<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Min-Stack"><a href="#Min-Stack" class="headerlink" title="Min Stack"></a>Min Stack</h1><p><a href>Min Stack</a>(<a href="https://leetcode.com/problems/min-stack/" target="_blank" rel="noopener">https://leetcode.com/problems/min-stack/</a>)</p><p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p><ul><li>push(x) – Push element x onto stack.</li><li>pop() – Removes the element on top of the stack.</li><li>top() – Get the top element.</li><li>getMin() – Retrieve the minimum element in the stack.</li></ul><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Input</span><br><span class="line">[&quot;MinStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;getMin&quot;,&quot;pop&quot;,&quot;top&quot;,&quot;getMin&quot;]</span><br><span class="line">[[],[-2],[0],[-3],[],[],[],[]]</span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line">[null,null,null,null,-3,null,0,-2]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">MinStack minStack = new MinStack();</span><br><span class="line">minStack.push(-2);</span><br><span class="line">minStack.push(0);</span><br><span class="line">minStack.push(-3);</span><br><span class="line">minStack.getMin(); // return -3</span><br><span class="line">minStack.pop();</span><br><span class="line">minStack.top();    // return 0</span><br><span class="line">minStack.getMin(); // return -2</span><br></pre></td></tr></table></figure><p>这个只需要知道stack是先进后出的原则就行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; list;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> lens;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.lens = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list.add(x);</span><br><span class="line">        <span class="keyword">this</span>.lens ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.lens --;</span><br><span class="line">            <span class="keyword">this</span>.list.remove(<span class="keyword">this</span>.lens);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.list.get(<span class="keyword">this</span>.lens - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.min(<span class="keyword">this</span>.list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MinStack m = <span class="keyword">new</span> MinStack();</span><br><span class="line">        m.push(-<span class="number">2</span>);</span><br><span class="line">        m.push(<span class="number">0</span>);</span><br><span class="line">        m.push(-<span class="number">3</span>);</span><br><span class="line">        System.out.println(m.getMin());</span><br><span class="line">        m.pop();</span><br><span class="line">        System.out.println(m.top());   <span class="comment">// return 0</span></span><br><span class="line">        System.out.println(m.getMin()); <span class="comment">// return -2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Reverse-Linked-List"><a href="#Reverse-Linked-List" class="headerlink" title="Reverse Linked List"></a>Reverse Linked List</h1><p>Reverse a singly linked list.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">Output: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure><p>翻转链表可以循环实现，也可以用递归实现。</p><p><img src="/2020/05/26/leetcode/8.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      ListNode curr = head;</span><br><span class="line">      ListNode next = head.next;</span><br><span class="line">      ListNode temp = <span class="keyword">null</span>;</span><br><span class="line">      curr.next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (next != <span class="keyword">null</span>) &#123;</span><br><span class="line">          temp = next.next;</span><br><span class="line">          next.next = curr;</span><br><span class="line">          curr = next;</span><br><span class="line">          next = temp;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> curr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后递归的话就刚开始看可能不是特别好理解的。总感觉遇到递归就有点懵逼的感觉。。。</p><p><img src="/2020/05/26/leetcode/9.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">    ListNode last = reverseList(head.next);</span><br><span class="line"></span><br><span class="line">    head.next.next = head;</span><br><span class="line">    head.next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Palindrome-Linked-List"><a href="#Palindrome-Linked-List" class="headerlink" title="Palindrome Linked List"></a>Palindrome Linked List</h1><p><a href="https://leetcode.com/problems/palindrome-linked-list/" target="_blank" rel="noopener">Palindrome Linked List</a></p><p>Given a singly linked list, determine if it is a palindrome.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;2-&gt;1</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Follow up:</strong><br>Could you do it in O(n) time and O(1) space?</p><p>思路：</p><p>本来想的是用递归的方法算一下和，如果是回文的话结果应该是一样的，想法很美好，现实很残酷。。。LeetCode官方应该也考虑到这个问题了，如果算sum的话会导致整型溢出的问题。。。。不过也算是一个思路吧。o(╥﹏╥)o</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">long</span> [] nums = <span class="keyword">new</span> <span class="keyword">long</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    recur(head,nums);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nums[<span class="number">0</span>] == nums[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recur</span><span class="params">(ListNode curr, <span class="keyword">long</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (curr == <span class="keyword">null</span>) <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">    nums[<span class="number">0</span>] = nums[<span class="number">0</span>]*<span class="number">10</span> + curr.val;</span><br><span class="line">    recur(curr.next, nums);</span><br><span class="line">    nums[<span class="number">1</span>] = nums[<span class="number">1</span>]*<span class="number">10</span> + curr.val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最近遇到的题不是递归就是动态规划。。。看来这块有点薄弱，有时间要多练习一下。。看了discussion里面，有个大神写的也是递归的方法，类似于先把第一个指针走到结尾，第二个指针指向head，然后对比是不是一样。感觉很牛逼。。不过递归貌似花费时间有点久。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    recur(head, head);</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">recur</span><span class="params">(ListNode p1, ListNode p2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p1 == <span class="keyword">null</span>) <span class="keyword">return</span> p2;</span><br><span class="line">    ListNode node = recur(p1.next, p2);</span><br><span class="line">    <span class="keyword">if</span> (node.val != p1.val) flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> node.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ps: 还有一种快慢指针的方法。。就是走到中间，然后把两条链表分开对比就行了，但是感觉有点麻烦，还是不写了。。。</p><h1 id="Move-Zeroes"><a href="#Move-Zeroes" class="headerlink" title="Move Zeroes"></a>Move Zeroes</h1><p><a href="https://leetcode.com/problems/move-zeroes/" target="_blank" rel="noopener">Move Zeroes</a></p><p>Given an array <code>nums</code>, write a function to move all <code>0</code>‘s to the end of it while maintaining the relative order of the non-zero elements.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [0,1,0,3,12]</span><br><span class="line">Output: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><p><strong>Note</strong>:</p><ol><li>You must do this <strong>in-place</strong> without making a copy of the array.</li><li>Minimize the total number of operations.</li></ol><p>一开始看到这个想了一下双指针，一个从头开始一个从尾部开始，这样虽然可以把0都放到后面，但是这样就不是顺序来的了。。。看了一下大佬思路，也是双指针（方法思路没错对吧），只不过这个双指针都是从头开始的。先设置一个0的指针<code>zero=-1</code>因为我们一开始不知道0的位置在那，然后开始循环，如果该数字为0可以对<code>zero</code>进行赋值了（<code>zero == -1</code>），当<code>zero != -1</code>说明之前已经有了0的数字。然后如果该数字不等于0的时候表示可以对之前的zero的index进行替换，前提是<code>zero != -1</code>，然后判断zero和i的位置，如果i是zero的next说明是只有一个zero，不然的话就代表zero后面还是一个0的数字，所以这时候<code>zero++</code>就行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> zero = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (zero == -<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            nums[zero] = nums[i];</span><br><span class="line">            nums[i] = <span class="number">0</span>;</span><br><span class="line">            zero = (zero == i + <span class="number">1</span>) ? i : zero+<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (zero != -<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            zero = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Find-All-Numbers-Disappeared-in-an-Array"><a href="#Find-All-Numbers-Disappeared-in-an-Array" class="headerlink" title="Find All Numbers Disappeared in an Array"></a>Find All Numbers Disappeared in an Array</h1><p><a href="https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/" target="_blank" rel="noopener">Find All Numbers Disappeared in an Array</a></p><p>Given an array of integers where 1 ≤ a[i] ≤ <em>n</em> (<em>n</em> = size of array), some elements appear twice and others appear once.</p><p>Find all the elements of [1, <em>n</em>] inclusive that do not appear in this array.</p><p>Could you do it without extra space and in O(<em>n</em>) runtime? You may assume the returned list does not count as extra space.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[4,3,2,7,8,2,3,1]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[5,6]</span><br></pre></td></tr></table></figure><p>题解：数组长度1-n，要判断数组里面出现的数字是不是在1-n之间，如果少了哪个数字就给补上。</p><p>比如：<code>[2,2]</code>数组长度<code>1-2</code>，那么改数组少了1。</p><p>solution 1：</p><p>刚开始考虑的是先sort一下，然后判断index在0，末尾和中间的情况进行补全，但是貌似有点浪费时间了。。所以时间复杂度有点高$O(nlog_{n} + n)$。不过也算是一种方法对吧。。。o(╥﹏╥)o</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findDisappearedNumbers</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; dis = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> dis;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">while</span> (num &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        num --;</span><br><span class="line">        dis.add(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    num = nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i ++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (num + <span class="number">1</span> != nums[i] &amp;&amp; num != nums[i]) &#123;</span><br><span class="line">            num++;</span><br><span class="line">            dis.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        num = nums[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    num = nums[nums.length-<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (num != nums.length) &#123;</span><br><span class="line">        num++;</span><br><span class="line">        dis.add(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>solution 2：</p><p>看了一下discussion感觉他们写的方法屌爆了。。。因为数组里面的数字是在数组长度<code>1-n</code>之内的，所以这个时候我们可以做一个指示器的格式，把数组里面每个数字所对应的坐标变成负数，然后再寻找一个array里面哪些是负数。很欢喜。。</p><p><img src="/2020/05/26/leetcode/10.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findDisappearedNumbers</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; dis = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> dis;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i ++) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = Math.abs(nums[i]) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[index] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            nums[index] = -nums[index];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i ++) <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) dis.add(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Word-Ladder"><a href="#Word-Ladder" class="headerlink" title="Word Ladder"></a>Word Ladder</h1><p>126 题</p><p>Given two words (<em>beginWord</em> and <em>endWord</em>), and a dictionary’s word list, find the length of shortest transformation sequence from <em>beginWord</em> to <em>endWord</em>, such that:</p><ol><li>Only one letter can be changed at a time.</li><li>Each transformed word must exist in the word list.</li></ol><p><strong>Note:</strong></p><ul><li>Return 0 if there is no such transformation sequence.</li><li>All words have the same length.</li><li>All words contain only lowercase alphabetic characters.</li><li>You may assume no duplicates in the word list.</li><li>You may assume <em>beginWord</em> and <em>endWord</em> are non-empty and are not the same.</li></ul><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">beginWord = &quot;hit&quot;,</span><br><span class="line">endWord = &quot;cog&quot;,</span><br><span class="line">wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]</span><br><span class="line"></span><br><span class="line">Output: 5</span><br><span class="line"></span><br><span class="line">Explanation: As one shortest transformation is &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot;,</span><br><span class="line">return its length 5.</span><br></pre></td></tr></table></figure><p>词语接龙，一个老外很喜欢的游戏，我觉得他们的test有问题。。。这个数量就很奇怪，不过我还是按照我的方法来，我不觉得我写错了，使用了一个bfs的算法，因为每次改变一个单词其中的一个字符，然后判断新生成的字符是否在wordList之间，然后再判断是不是已经visited过的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordLadder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ladderLength</span><span class="params">(String beginWord, String endWord, List&lt;String&gt; wordList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!wordList.contains(endWord)) <span class="keyword">return</span> step;</span><br><span class="line">        Queue&lt;String&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(beginWord);</span><br><span class="line">        Set&lt;String&gt; visited = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            ++step;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; queue.size(); x ++) &#123;</span><br><span class="line">                String str = queue.poll();</span><br><span class="line">                visited.add(str);</span><br><span class="line">                <span class="keyword">if</span> (str.equals(endWord)) <span class="keyword">return</span> step;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i ++) &#123;</span><br><span class="line">                    <span class="keyword">char</span>[] temp = str.toCharArray();</span><br><span class="line">                    <span class="keyword">char</span> ch = temp[i];</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">char</span> c = <span class="string">'a'</span>; c &lt;= <span class="string">'z'</span>; c ++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (c == ch) <span class="keyword">continue</span>;</span><br><span class="line">                        temp[i] = c;</span><br><span class="line">                        String t = <span class="keyword">new</span> String(temp);</span><br><span class="line">                        <span class="keyword">if</span> (!wordList.contains(t)) <span class="keyword">continue</span>;</span><br><span class="line">                        <span class="keyword">if</span> (visited.contains(t)) <span class="keyword">continue</span>;</span><br><span class="line">                        queue.offer(t);</span><br><span class="line">                        visited.add(t);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> step;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WordLadder w = <span class="keyword">new</span> WordLadder();</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(</span><br><span class="line">                Arrays.asList(<span class="string">"hot"</span>,<span class="string">"dot"</span>,<span class="string">"dog"</span>,<span class="string">"lot"</span>,<span class="string">"log"</span>,<span class="string">"cog"</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res = w.ladderLength(<span class="string">"hit"</span>, <span class="string">"cog"</span>, list);</span><br><span class="line"></span><br><span class="line">        System.out.println(res);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Letter-Combinations-of-a-Phone-Number"><a href="#Letter-Combinations-of-a-Phone-Number" class="headerlink" title="Letter Combinations of a Phone Number"></a>Letter Combinations of a Phone Number</h1><p><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/" target="_blank" rel="noopener">Letter Combinations of a Phone Number</a></p><p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent.</p><p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p><p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" alt="img"></p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;23&quot;</span><br><span class="line">Output: [&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].</span><br></pre></td></tr></table></figure><p>思路1：</p><p>每个数字代表几个相对应的数据，把这些代表的数据进行排列组合。这个第一个想到的就是loop，逐层递进，因为如果是三个数字的话，就是只组合成三个字母的string，可以先把1，2组合得到的结果去和3组合。这样就行了，还有别的算法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LetterCombinationsofaPhoneNumber</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">letterCombinations</span><span class="params">(String digits)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        HashMap&lt;Character, String&gt; maps = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        maps.put(<span class="string">'2'</span>, <span class="string">"abc"</span>);</span><br><span class="line">        maps.put(<span class="string">'3'</span>, <span class="string">"def"</span>);</span><br><span class="line">        maps.put(<span class="string">'4'</span>, <span class="string">"ghi"</span>);</span><br><span class="line">        maps.put(<span class="string">'5'</span>, <span class="string">"jkl"</span>);</span><br><span class="line">        maps.put(<span class="string">'6'</span>, <span class="string">"mno"</span>);</span><br><span class="line">        maps.put(<span class="string">'7'</span>, <span class="string">"pqrs"</span>);</span><br><span class="line">        maps.put(<span class="string">'8'</span>, <span class="string">"tuv"</span>);</span><br><span class="line">        maps.put(<span class="string">'9'</span>, <span class="string">"wyxz"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先实验一下相乘的办法，因为还有很多好的办法，一会慢慢看</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digits.length(); i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!maps.containsKey(digits.charAt(i))) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            String str = maps.get(digits.charAt(i));</span><br><span class="line">            result = mul(result, <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(str.split(<span class="string">""</span>))));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">mul</span><span class="params">(List&lt;String&gt; s1, List&lt;String&gt; s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s1.size() == <span class="number">0</span> &amp;&amp; s2.size() != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s1.size() != <span class="number">0</span> &amp;&amp; s2.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String value : s1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String s : s2) &#123;</span><br><span class="line">                result.add(value + s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LetterCombinationsofaPhoneNumber l = <span class="keyword">new</span> LetterCombinationsofaPhoneNumber();</span><br><span class="line">        String str = <span class="string">"23"</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; res = l.letterCombinations(str);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : res) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路2：</p><p>想学习一下dfs的算法。。。学习使用dfs和递归的方法，这个算法的思路就是直接访问到最底层的str，然后遍历最底层的list，遍历完之后返回到上一层，然后对上一层进行遍历，同时还会使用到最底层的元素。。。递归有点绕。。</p><p><img src="/2020/05/26/leetcode/11.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">letterCombinations</span><span class="params">(String digits)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (digits == <span class="keyword">null</span> || digits.length() == <span class="number">0</span>) <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    HashMap&lt;Character, String&gt; maps = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    maps.put(<span class="string">'2'</span>, <span class="string">"abc"</span>);</span><br><span class="line">    maps.put(<span class="string">'3'</span>, <span class="string">"def"</span>);</span><br><span class="line">    maps.put(<span class="string">'4'</span>, <span class="string">"ghi"</span>);</span><br><span class="line">    maps.put(<span class="string">'5'</span>, <span class="string">"jkl"</span>);</span><br><span class="line">    maps.put(<span class="string">'6'</span>, <span class="string">"mno"</span>);</span><br><span class="line">    maps.put(<span class="string">'7'</span>, <span class="string">"pqrs"</span>);</span><br><span class="line">    maps.put(<span class="string">'8'</span>, <span class="string">"tuv"</span>);</span><br><span class="line">    maps.put(<span class="string">'9'</span>, <span class="string">"wyxz"</span>);</span><br><span class="line"></span><br><span class="line">    dfs(digits, <span class="number">0</span>, <span class="string">""</span>, result, maps);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(String digits, <span class="keyword">int</span> index, String temp, List&lt;String&gt; res, HashMap&lt;Character, String&gt; maps)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index == digits.length()) &#123;</span><br><span class="line">        res.add(temp);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String t = maps.get(digits.charAt(index));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.length(); i ++) &#123;</span><br><span class="line">        dfs(digits, index + <span class="number">1</span>, temp + t.charAt(i), res, maps);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3Sum"><a href="#3Sum" class="headerlink" title="3Sum"></a>3Sum</h1><p>Given an array <code>nums</code> of <em>n</em> integers, are there elements <em>a</em>, <em>b</em>, <em>c</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> = 0? Find all unique triplets in the array which gives the sum of zero.</p><p><strong>Note:</strong></p><p>The solution set must not contain duplicate triplets.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Given array nums = [-1, 0, 1, 2, -1, -4],</span><br><span class="line"></span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [-1, 0, 1],</span><br><span class="line">  [-1, -1, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>找到三个数字和为0，这个题也是我之前就在写的一个，但是因为一些原因没做出来，然后今天下午写了一种方法，能运行，但是运行到最后一个的时候超时了，因为加了过多的sort和if的条件语句，在discussion看了一个大佬的方法之后醍醐灌顶，意识到自己少加个条件的问题。。。首先需要sort一下，然后循环遍历，在第一层循环的时候可以用<code>sum = - num</code>这样就只需要在剩余的numbers里面进行一个二分查找，找到相对应的和为<code>-num</code>的数据，当找到之后仍然需要接着二分查找，因为可能还有别的数字和为<code>-num</code>，但是我们需要考虑的一个最重要的因素就是<strong>数字不能重复</strong>，因为同一个数字只能找到那么多和为0的list。如果大家有更好的解决方法可以给我留言。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (nums.length &lt; <span class="number">3</span>) <span class="keyword">return</span> list;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assume the list is sorted</span></span><br><span class="line">    <span class="comment">// then just make a loop</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i ++) &#123;</span><br><span class="line">      <span class="comment">// 避免重复循环的问题，因为每个数字只有那么几个相对应的list</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> num = -nums[i];</span><br><span class="line">      <span class="comment">// 不需要重复的数据，所以从i+1开始</span></span><br><span class="line">        <span class="keyword">int</span> left = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (left == right) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (left == i) &#123;</span><br><span class="line">                left++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (right == i) &#123;</span><br><span class="line">                right --;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] + nums[right] == num) &#123;</span><br><span class="line">                <span class="comment">// then add numbers to the list</span></span><br><span class="line">                List&lt;Integer&gt; temp = <span class="keyword">new</span> LinkedList&lt;Integer&gt;(</span><br><span class="line">                        Arrays.asList(nums[i], nums[left], nums[right])</span><br><span class="line">                );</span><br><span class="line">                list.add(temp);</span><br><span class="line">              <span class="comment">// 因为后面还有可能存在类似的list，同时要主要不能重复</span></span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left+<span class="number">1</span>]) left ++;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right-<span class="number">1</span>]) right--;</span><br><span class="line">                left ++;</span><br><span class="line">                right --;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[left] + nums[right] &lt; num) &#123;</span><br><span class="line">                left ++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right --;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Swap-Nodes-in-Pairs"><a href="#Swap-Nodes-in-Pairs" class="headerlink" title="Swap Nodes in Pairs"></a>Swap Nodes in Pairs</h1><p>Given a linked list, swap every two adjacent nodes and return its head.</p><p>You may <strong>not</strong> modify the values in the list’s nodes, only nodes itself may be changed.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.</span><br></pre></td></tr></table></figure><p>交换node的位置，两两交换，要考虑的问题有两个，list长度为odd的时候怎么办，怎么去进行loop。</p><p><img src="/2020/05/26/leetcode/12.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">    ListNode curr = head;</span><br><span class="line">    head = curr.next;</span><br><span class="line">    ListNode last = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="keyword">null</span> &amp;&amp; curr.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ListNode next = curr.next;</span><br><span class="line">        ListNode temp = next.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (last != <span class="keyword">null</span>) &#123;</span><br><span class="line">            last.next = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        next.next = curr;</span><br><span class="line">        curr.next = <span class="keyword">null</span>;</span><br><span class="line">        last = curr;</span><br><span class="line"></span><br><span class="line">        curr = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (curr != <span class="keyword">null</span> &amp;&amp; curr.next == <span class="keyword">null</span>) last.next = curr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Generate-Parentheses"><a href="#Generate-Parentheses" class="headerlink" title="Generate Parentheses"></a>Generate Parentheses</h1><p><a href="https://leetcode.com/problems/generate-parentheses/" target="_blank" rel="noopener">Generate Parentheses</a></p><p>Given <em>n</em> pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p><p>For example, given <em>n</em> = 3, a solution set is:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &quot;((()))&quot;,</span><br><span class="line">  &quot;(()())&quot;,</span><br><span class="line">  &quot;(())()&quot;,</span><br><span class="line">  &quot;()(())&quot;,</span><br><span class="line">  &quot;()()()&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这个题主要是使用了递归的方法，首先一直添加<code>(</code>，直到最深度<code>n</code>，如果超过n肯定不合法了，因为左右括号是相对应的。当左括号达到最深度的时候，开始递归右括号，同时右括号的数量应该小于左括号。伪代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(left, right, depth, str, res)</span>:</span></span><br><span class="line">4<span class="keyword">if</span> str length == depth * <span class="number">2</span>:</span><br><span class="line">44res.add(str)</span><br><span class="line">4</span><br><span class="line">4<span class="keyword">if</span> left &lt; depth:</span><br><span class="line">44find(left+<span class="number">1</span>, right, depth, str+<span class="string">'('</span> , res)</span><br><span class="line">4</span><br><span class="line">4<span class="keyword">if</span> right &lt; left:</span><br><span class="line">44find(left, right+<span class="number">1</span>, depth, str+<span class="string">')'</span>, res)</span><br></pre></td></tr></table></figure><p>Java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenerateParentheses</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">        dfs(<span class="number">0</span>,<span class="number">0</span>,n,list, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> close, <span class="keyword">int</span> open, <span class="keyword">int</span> depth, List&lt;String&gt; res, String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str.length() == depth * <span class="number">2</span>) &#123;</span><br><span class="line">            res.add(str);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (open &lt; depth) &#123;</span><br><span class="line">            dfs(close, open + <span class="number">1</span>, depth, res , str + <span class="string">"("</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (close &lt; open) &#123;</span><br><span class="line">            dfs(close + <span class="number">1</span>, open, depth, res, str + <span class="string">")"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GenerateParentheses ge = <span class="keyword">new</span> GenerateParentheses();</span><br><span class="line">        List&lt;String&gt; res = ge.generateParenthesis(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String str : res) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Rotate-Array"><a href="#Rotate-Array" class="headerlink" title="Rotate Array"></a>Rotate Array</h1><p><a href="https://leetcode.com/problems/rotate-array/" target="_blank" rel="noopener">Rotate Array</a></p><p>Given an array, rotate the array to the right by <em>k</em> steps, where <em>k</em> is non-negative.</p><p><strong>Follow up:</strong></p><ul><li>Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.</li><li>Could you do it in-place with O(1) extra space?</li></ul><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,3,4,5,6,7], k = 3</span><br><span class="line">Output: [5,6,7,1,2,3,4]</span><br><span class="line">Explanation:</span><br><span class="line">rotate 1 steps to the right: [7,1,2,3,4,5,6]</span><br><span class="line">rotate 2 steps to the right: [6,7,1,2,3,4,5]</span><br><span class="line">rotate 3 steps to the right: [5,6,7,1,2,3,4]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [-1,-100,3,99], k = 2</span><br><span class="line">Output: [3,99,-1,-100]</span><br><span class="line">Explanation: </span><br><span class="line">rotate 1 steps to the right: [99,-1,-100,3]</span><br><span class="line">rotate 2 steps to the right: [3,99,-1,-100]</span><br></pre></td></tr></table></figure><p>就是根据k的个数，每个element向后移动k位，超出array的话在array的开头继续。</p><p>刚开始试了好几种方法，但是都不是特别理想，看了一下discussion，学到了。这个翻转链表实际是有规律的，先把整个array reverse一下，然后再把<code>0-k</code>reverse，然后把<code>k-end</code>reverse一下就可以得到最终的结果。。。很神奇的规律。。。</p><p><img src="/2020/05/26/leetcode/13.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个想法是在leetcode那边看到的，其工作原理就是先reverse一下</span></span><br><span class="line"><span class="comment"> * 然后在对前k个进行reverse，然后对k-len再reverse</span></span><br><span class="line"><span class="comment"> * 这样就能得到结果了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RotateArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length &lt; <span class="number">2</span> || k &lt; <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 整体反转</span></span><br><span class="line">        reverse(<span class="number">0</span>, nums.length - <span class="number">1</span>, nums);</span><br><span class="line"></span><br><span class="line">        reverse(<span class="number">0</span>, k % nums.length - <span class="number">1</span>, nums);</span><br><span class="line">        reverse(k % nums.length, nums.length - <span class="number">1</span>, nums);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = nums[left];</span><br><span class="line">            nums[left] = nums[right];</span><br><span class="line">            nums[right] = temp;</span><br><span class="line">            left ++;</span><br><span class="line">            right --;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RotateArray re = <span class="keyword">new</span> RotateArray();</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        re.rotate(nums, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(nums));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Plus-One"><a href="#Plus-One" class="headerlink" title="Plus One"></a>Plus One</h1><p>Given a <strong>non-empty</strong> array of digits representing a non-negative integer, plus one to the integer.</p><p>The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.</p><p>You may assume the integer does not contain any leading zero, except the number 0 itself.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3]</span><br><span class="line">Output: [1,2,4]</span><br><span class="line">Explanation: The array represents the integer 123.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [4,3,2,1]</span><br><span class="line">Output: [4,3,2,2]</span><br><span class="line">Explanation: The array represents the integer 4321.</span><br></pre></td></tr></table></figure><p>一个数学的问题，在最后面加1，然后如果大于10，那么前面的数字就需要加一。可以直接不用分类来讨论，我们可以设置一个循环<code>index &lt;= 0</code> ，<code>index = nums.length - 1</code>这样我们从最后面开始加1，<code>overflow</code>是用来判断是否溢出，在循环里面如果没有溢出，就表示前面数字加一的结果不大于10，所以可以直接break。还有一种如果循环结束了依然溢出了，这时候我们需要在array里面多加一个数字在最前面。</p><p><img src="/2020/05/26/leetcode/14.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlusOne</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] plusOne(<span class="keyword">int</span>[] digits) &#123;</span><br><span class="line">        <span class="keyword">int</span> lens = digits.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] nums = digits.clone();</span><br><span class="line">        <span class="keyword">int</span> overflow = <span class="number">0</span>;</span><br><span class="line">        nums[lens] += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (lens != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// every time plus one</span></span><br><span class="line">            nums[lens] += overflow;</span><br><span class="line">            overflow = nums[lens] / <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[lens] &gt; <span class="number">9</span>) nums[lens] %= <span class="number">10</span>;</span><br><span class="line">            lens --;</span><br><span class="line">            <span class="comment">// 当不溢出的时候就可以break了，因为不会进位了</span></span><br><span class="line">            <span class="keyword">if</span> (overflow == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果循环结束还溢出，说明还需要多开辟一个内存位置。</span></span><br><span class="line">        <span class="keyword">if</span> (overflow != <span class="number">0</span>) &#123;</span><br><span class="line">            nums = IntStream.concat(Arrays.stream(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>&#125;), Arrays.stream(nums)).toArray();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        PlusOne p = <span class="keyword">new</span> PlusOne();</span><br><span class="line">        <span class="keyword">int</span>[] res = p.plusOne(nums);</span><br><span class="line">        System.out.println(Arrays.toString(res));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;刷题更让我们对一门语言有更加深入的理解，也可以增进对数据结构的理解，百里无一害。&lt;/p&gt;
&lt;h1 id=&quot;Two-Sum&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://shunyangli.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://shunyangli.github.io/tags/leetcode/"/>
    
      <category term="algorithm" scheme="https://shunyangli.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Network</title>
    <link href="https://shunyangli.github.io/2020/05/12/Network/"/>
    <id>https://shunyangli.github.io/2020/05/12/Network/</id>
    <published>2020-05-12T05:08:40.000Z</published>
    <updated>2020-05-23T13:53:56.156Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OSI-七层模型"><a href="#OSI-七层模型" class="headerlink" title="OSI 七层模型"></a>OSI 七层模型</h1><ol><li>物理层<ul><li>主要作用就是传输比特流（1，0转化成电流强弱来进行传输），通过电缆，光缆等传输。</li></ul></li><li>数据链路层<ul><li>定义了如何让格式化数据以进行传输。而且还会提供错误检测和纠正，以确保数据的可靠传输。（如需要改正错误，由运输层的TCP完成）</li></ul></li><li>网络层<ul><li>使用无连接的网际协议IP和许多种路由选择协议。<strong>分组传输，路由选择。</strong></li></ul></li><li>运输层<ul><li>向两个主机进程之间的通信提供服务。一个主机可以有多个进程，所以运输层有<strong>复用和分用的功能</strong>。<strong>复用就是多个应用层进程可以同时使用下面运输层的服务。分用则是运输层把收到的信息分别交付给上面的应用层中相对应的进程。</strong> 运输层的主要两种协议：<strong>TCP, UDP</strong></li></ul></li><li>会话层<ul><li>通过传输层建立数据传输的通路。主要是在系统之间发起会话或者接受会话请求。（设备之间要相互认知可以是IP或者MAC地址等）。</li></ul></li><li>表示层<ul><li>可确保一个系统的应用层所发送的信息可以被另一个系统的应用层读取。</li></ul></li><li>应用层<ul><li>直接为用户的应用场景提供服务，比如HTTP协议，FTP协议等。</li></ul></li></ol><h1 id="TCP-IP-四层协议"><a href="#TCP-IP-四层协议" class="headerlink" title="TCP/IP 四层协议"></a>TCP/IP 四层协议</h1><p><img src="/2020/05/12/Network/tcp.png" alt></p><ol><li>网络接口层</li><li>网际IP层</li><li>运输层</li><li>应用层</li></ol><h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><p>Domain name service（域名系统）。可以将域名和IP地址相互映射的一个分布式数据库。主要是将域名翻译成电脑理解的IP地址，整个过程叫DNS域名解析。</p><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><p>URL由以下内容组成：<code>protocol://hostname:port/path/[parameters]#fragment</code>。</p><p>分别是：协议，域名，端口，路径，参数，分页。</p><p>有关HTTP的经典题目。</p><p><strong>经典面试题：</strong></p><ol><li>浏览器输入URL到返回页面的全过程？<ol><li>根据域名进行DNS解析，得到IP地址</li><li>根据IP地址建立TCP连接</li><li>发送HTTP请求</li><li>服务器处理请求</li><li>返回响应结果</li><li>关闭TCP连接</li><li>浏览器解析HTML</li><li>浏览器渲染</li></ol></li><li>一个浏览器和在与服务器建立一个TCP连接后是否会在一个HTTP请求完成后断开？<ul><li>在HTTP1.0 的时代在HTTP响应之后会断开TCP链接。但是每次重新建立和断开TCP代价过大（时间，CPU）。某些服务器对Connection: keep-alive 的header进行了支持。就是在完成HTTP请求之后TCP不会断开连接，这样可以重复使用。避免了SSL的开销</li><li>所以在HTTP1.1的时候就把connection header写进标准里面，并默认开启持久连接，除非请求中说明connection: close，否则浏览器和服务器直接会维持一段时间的TCP连接。</li></ul></li><li>一个TCP连接可以对应几个HTTP请求？<ul><li>当TCP是持久连接的时候可以发送多个HTTP请求。</li></ul></li><li>一个TCP连接中HTTP请求可以一起发送么（比如一起发三个请求，然后三个响应一起接受）？<ul><li>在HTTP1.1中，单个TCP连接在同一时刻只能处理一个请求。也就是说两个请求的生命周期不能重叠，任意两个HTTP请求从开始到结束的时间在同一个TCP连接里不能重叠。比如在请求<code>GET /index?q=x1</code> and <code>GET /index?q=x2</code>，服务器返回两个结果，但是浏览器没办法判断响应对应的请求</li><li>HTTP1.0试图使用Pipelining解决这个问题（按照顺序来响应请求），但是会出现一些问题：<ul><li>服务器不能正常处理HTTP pipelining</li><li>正确的流水线实现是复杂的</li><li><strong>Head-of-line Blocking连接头阻塞</strong>：假设服务器可以连续处理几个请求，<strong>按照标准服务器应该按照顺序来返回请求</strong>，假如某个请求会消耗大量时间，那么后面所有的请求都需要等着该请求处理完才可以响应</li></ul></li></ul></li><li>为什么有的时候刷新页面不需要重新建立SSL？<ul><li>因为TCP连接会维持一段时间，所以SSL可以复用</li></ul></li><li>浏览器对同一个Host建立TCP连接数量有没有限制？<ul><li>有，比如chrome最多允许6个TCP连接</li><li>如果收到HTML包含很多的图片标签，这些照片该怎么处理？<ul><li>如果图片都在HTTPS的连接并且在同一域名下，那么在SSL握手之后会和服务器协商使用HTTP2.0， 请求使用<strong>Multiplexing（多路复用）</strong>功能在这个连接上进行多路传输。（<strong>多路复用允许同时通过但一的HTTP2.0连接发起多重请求-响应</strong>）</li><li>如果不能使用HTTP2.0，那只能建立多个TCP连接了。</li></ul></li></ul></li><li>GET和POST的区别？<ul><li>首先GET和POST方法没有实质区别。只是报文格式不同。POST的报文：<code>POST /uri HTTP/1.1 \r\n</code>，GET的报文：<code>GET /uri HTTP/1.1 \r\n</code>。</li><li>GET的参数是在URL或者Cookie传参，POST则是在body，但是这个只是默认的通用的格式，并不是协议的限制。POST也可以使用URL传参，GET也可以用body传参。只是一个用法约定而一</li><li><strong>GET的数据长度会有一定限制</strong>，因为GET的参数普遍在URL中，浏览器会对URL的长度有一定限制，所以参数长度有一定限制。POST没有限制</li><li>GET的请求更适用于请求一些普遍可见的信息，不适合传输密码这些重要的隐私信息。当传输隐私信息可以使用POST来请求，不可见相对安全</li><li><strong>POST会发送两个TCP数据包</strong>，因为POST是把header和body分开，先发送header，当服务端返回100状态码之后再发送body</li><li></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OSI-七层模型&quot;&gt;&lt;a href=&quot;#OSI-七层模型&quot; class=&quot;headerlink&quot; title=&quot;OSI 七层模型&quot;&gt;&lt;/a&gt;OSI 七层模型&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;物理层&lt;ul&gt;
&lt;li&gt;主要作用就是传输比特流（1，0转化成电流强弱来进行传输）
      
    
    </summary>
    
    
    
      <category term="network" scheme="https://shunyangli.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm</title>
    <link href="https://shunyangli.github.io/2020/05/03/Algorithm/"/>
    <id>https://shunyangli.github.io/2020/05/03/Algorithm/</id>
    <published>2020-05-03T10:09:59.000Z</published>
    <updated>2020-05-12T11:36:07.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DFS-amp-BFS"><a href="#DFS-amp-BFS" class="headerlink" title="DFS &amp; BFS"></a>DFS &amp; BFS</h1><p>DFS：Depth First Search，深度优先搜索算法，是一种以stack实现的算法。</p><p>BFS：Breath First Search，广度优先搜索算法，是一种以queue实现的算法。</p><p><strong>stack和queue的区别：</strong>stack是先进后出，queue是先进先出。</p><p>假设我们已知一个graph如下：</p><p><img src="/2020/05/03/Algorithm/1.png" alt></p><h2 id="首先我们使用DFS来遍历整个图"><a href="#首先我们使用DFS来遍历整个图" class="headerlink" title="首先我们使用DFS来遍历整个图"></a>首先我们使用DFS来遍历整个图</h2><ol><li><p>我们需要把图的数据录入到<code>dict</code>里面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">graphs = &#123;</span><br><span class="line">    <span class="string">'A'</span>: [<span class="string">'B'</span>, <span class="string">'C'</span>],</span><br><span class="line">    <span class="string">'B'</span>: [<span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>],</span><br><span class="line">    <span class="string">'C'</span>: [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>],</span><br><span class="line">    <span class="string">'D'</span>: [<span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>],</span><br><span class="line">    <span class="string">'E'</span>: [<span class="string">'C'</span>, <span class="string">'D'</span>],</span><br><span class="line">    <span class="string">'F'</span>: [<span class="string">'D'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>规划dfs算法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(graph, s)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    we use stack to do dfs</span></span><br><span class="line"><span class="string">    :param graph: graph data</span></span><br><span class="line"><span class="string">    :param s: start node</span></span><br><span class="line"><span class="string">    :return: the dfs data</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    stack = [s]</span><br><span class="line">    visited = [s]</span><br><span class="line">    <span class="keyword">while</span> len(stack) &gt; <span class="number">0</span>:</span><br><span class="line">        vertex = stack.pop() <span class="comment"># 弹出最后一个元素</span></span><br><span class="line">        nodes = graph[vertex] <span class="comment"># 获取相邻的node</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nodes:</span><br><span class="line">            <span class="keyword">if</span> n <span class="keyword">not</span> <span class="keyword">in</span> visited: <span class="comment"># 判断该node是否已经遍历过</span></span><br><span class="line">                stack.append(n) <span class="comment"># 如果没有遍历，就添加到stack里面</span></span><br><span class="line">        <span class="keyword">if</span> vertex <span class="keyword">not</span> <span class="keyword">in</span> visited: <span class="comment"># 判断当前vertex是否遍历过</span></span><br><span class="line">            visited.append(vertex)</span><br><span class="line">    <span class="keyword">return</span> visited</span><br></pre></td></tr></table></figure></li><li><p>运行function</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(dfs(graphs, <span class="string">'A'</span>))</span><br></pre></td></tr></table></figure></li></ol><p><strong>代码解析：</strong></p><p>因为stack是先进后出，所以我们手动写一下代码的运行规律</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 起始点是A, 此时的stack=[B,C], visisted=[A]。按照stack的规律，下一个node是C</span><br><span class="line">2. 起始点C, 此时的stack=[B,D,E], visisted=[A,C]。按照stack的规律，下一个node是E</span><br><span class="line">3. 起始点E, 此时的stack=[B,D], visisted=[A,C,E]。按照stack的规律，下一个node是D</span><br><span class="line">4. 起始点D, 此时的stack=[B,F], visisted=[A,C,E,D]。按照stack的规律，下一个node是F</span><br><span class="line">5. 起始点F, 此时的stack=[B], visisted=[A,C,E,D,F]。按照stack的规律，下一个node是B</span><br><span class="line">6. 起始点B, 此时的stack=[], visisted=[A,C,E,D,F,B]。</span><br></pre></td></tr></table></figure><p>所以node的遍历顺序是: <code>[A,C,E,D,F,B]</code></p><p>完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">graphs = &#123;</span><br><span class="line">    <span class="string">'A'</span>: [<span class="string">'B'</span>, <span class="string">'C'</span>],</span><br><span class="line">    <span class="string">'B'</span>: [<span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>],</span><br><span class="line">    <span class="string">'C'</span>: [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>],</span><br><span class="line">    <span class="string">'D'</span>: [<span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>],</span><br><span class="line">    <span class="string">'E'</span>: [<span class="string">'C'</span>, <span class="string">'D'</span>],</span><br><span class="line">    <span class="string">'F'</span>: [<span class="string">'D'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(graph, s)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    we use stack to do dfs</span></span><br><span class="line"><span class="string">    :param graph: graph data</span></span><br><span class="line"><span class="string">    :param s: start node</span></span><br><span class="line"><span class="string">    :return: the dfs data</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    stack = [s]</span><br><span class="line">    visited = [s]</span><br><span class="line">    <span class="keyword">while</span> len(stack) &gt; <span class="number">0</span>:</span><br><span class="line">        vertex = stack.pop() <span class="comment"># 弹出最后一个元素</span></span><br><span class="line">        nodes = graph[vertex] <span class="comment"># 获取相邻的node</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nodes:</span><br><span class="line">            <span class="keyword">if</span> n <span class="keyword">not</span> <span class="keyword">in</span> visited: <span class="comment"># 判断该node是否已经遍历过</span></span><br><span class="line">                stack.append(n) <span class="comment"># 如果没有遍历，就添加到stack里面</span></span><br><span class="line">        <span class="keyword">if</span> vertex <span class="keyword">not</span> <span class="keyword">in</span> visited: <span class="comment"># 判断当前vertex是否遍历过</span></span><br><span class="line">            visited.append(vertex)</span><br><span class="line">    <span class="keyword">return</span> visited</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(dfs(graphs, <span class="string">'A'</span>))</span><br></pre></td></tr></table></figure><h2 id="然后我们使用bfs来遍历整个图"><a href="#然后我们使用bfs来遍历整个图" class="headerlink" title="然后我们使用bfs来遍历整个图"></a>然后我们使用bfs来遍历整个图</h2><p>Graph的数据一样，所以我们只需要写出相对应的function即可</p><p>*<em>queue: *</em>是一种先进先出的数据结构。我们可以看到start node是A:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. start node是A，此时的queue = [B, C], 此时visited=[A]</span><br><span class="line">2. 按照先进先出的原则，下一下访问的node是B，此时的queue=[C,D](因为A，B都已经被访问过了) 此时visited=[A,B]</span><br><span class="line">3. 下一个被访问的node是C，那么此时的queue=[D,E](A,B已被访问), 此时visited=[A,B,C]</span><br><span class="line">4. 下一个访问的node是D, 此时的queue=[E,F], 此时的visited=[A,B,C,D]</span><br><span class="line">5. 下一个访问的node是E, 此时的queue=[F], 此时的visited=[A,B,C,D, E]</span><br><span class="line">6. 下一个访问的node是F, 此时的queue=[], 此时的visited=[A,B,C,D, E,F]</span><br></pre></td></tr></table></figure><p>所以最终的访问顺序为<code>[A,B,C,D,E,F]</code>。具体代码实现如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(graph, s)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    implement the bfs</span></span><br><span class="line"><span class="string">    :param graph: graph data</span></span><br><span class="line"><span class="string">    :param s: start node</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># we use queue in bfs</span></span><br><span class="line">    queue = [s]</span><br><span class="line">    visited = [s]</span><br><span class="line">    <span class="keyword">while</span> len(queue) &gt; <span class="number">0</span>:</span><br><span class="line">        vertex = queue.pop(<span class="number">0</span>) <span class="comment"># 取出第一个元素</span></span><br><span class="line">        nodes = graph[vertex]</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nodes:</span><br><span class="line">            <span class="keyword">if</span> n <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                queue.append(n)</span><br><span class="line">                visited.append(n)</span><br><span class="line">    <span class="keyword">return</span> visited</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>DFS和BFS的主要差别就是stack和queue的使用。</p><p>BFS使用场景：bfs主要是运用在寻找最短路径</p><p>DFS使用场景：dfs主要是运用在寻找graph中的某一个点</p><h1 id="Dijkstra-最短路径算法"><a href="#Dijkstra-最短路径算法" class="headerlink" title="Dijkstra 最短路径算法"></a>Dijkstra 最短路径算法</h1><p>Dijkstra最短路径使用priority queue来实现的。</p><p>priority queue是queue的一种类型，不同的是pq是根据权重来排序的，比如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queue = [&#123;<span class="number">9</span>, <span class="string">'A'</span>&#125;, &#123;<span class="number">1</span>, <span class="string">'B'</span>&#125;]</span><br></pre></td></tr></table></figure><p>那么在priority queue里面<code>queue</code>就会变成:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="number">1</span>, <span class="string">'B'</span>&#125;, &#123;<span class="number">9</span>, <span class="string">'A'</span>&#125;]</span><br></pre></td></tr></table></figure><p>在Python里面可以使用<code>heapq</code>来实现priority queue:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line">pq = []</span><br><span class="line"><span class="comment">#  把数据添加到priority queue</span></span><br><span class="line">heapq.heappush(pq, &#123;<span class="number">0</span>, <span class="string">'A'</span>&#125;)</span><br><span class="line">heapq.heappush(pq, &#123;<span class="number">1</span>, <span class="string">'B'</span>&#125;)</span><br><span class="line">heapq.heappush(pq, &#123;<span class="number">3</span>, <span class="string">'D'</span>&#125;)</span><br><span class="line">heapq.heappush(pq, &#123;<span class="number">2</span>, <span class="string">'C'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出数据我们可以使用heappop</span></span><br><span class="line">heapq.heappop(pq) <span class="comment"># 取出的数据是&#123;0, 'A'&#125;</span></span><br></pre></td></tr></table></figure><p>当我们查看<code>pq</code>这个list的时候显示的数据顺序不是根据权重来的，但是当我们使用<code>heapq.heappop(pq)</code>就能得到正确的数据。</p><p>在使用Dijkstra算法的时候，graphedge之间是要有权重的，比如：</p><p><img src="/2020/05/03/Algorithm/dij.png" alt></p><p>我们可以把该图的数据按照dict的格式导入到Python：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">graphs = &#123;</span><br><span class="line">    <span class="string">'A'</span>: &#123;<span class="string">'B'</span>: <span class="number">5</span>, <span class="string">'C'</span>: <span class="number">1</span>&#125;,</span><br><span class="line">    <span class="string">'B'</span>: &#123;<span class="string">'A'</span>: <span class="number">5</span>, <span class="string">'C'</span>: <span class="number">2</span>, <span class="string">'D'</span>: <span class="number">1</span>&#125;,</span><br><span class="line">    <span class="string">'C'</span>: &#123;<span class="string">'A'</span>: <span class="number">1</span>, <span class="string">'B'</span>: <span class="number">2</span>, <span class="string">'D'</span>: <span class="number">4</span>, <span class="string">'E'</span>: <span class="number">8</span>&#125;,</span><br><span class="line">    <span class="string">'D'</span>: &#123;<span class="string">'B'</span>: <span class="number">1</span>, <span class="string">'C'</span>: <span class="number">4</span>, <span class="string">'E'</span>: <span class="number">3</span>, <span class="string">'F'</span>: <span class="number">6</span>&#125;,</span><br><span class="line">    <span class="string">'E'</span>: &#123;<span class="string">'C'</span>: <span class="number">8</span>, <span class="string">'D'</span>: <span class="number">3</span>&#125;,</span><br><span class="line">    <span class="string">'F'</span>: &#123;<span class="string">'D'</span>: <span class="number">6</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>算法解析：</strong></p><p>假设我们的起始点为A，pq展示的是<code>heapq</code>处理过的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 起始点A, pq=[&#123;C, 1&#125;(A-C), &#123;B, 5&#125;(A-B)], visited=[A], dist[A] = 0. 下一个node是C</span><br><span class="line">2. 起始点C, pq = [&#123;B,3&#125;(A-C-B), &#123;D, 5&#125;(A-C-D), &#123;B, 5&#125;(A-B), &#123;E, 9&#125;(A-C-E)], visited=[A,C], A-C的距离为1。里面所有点的距离都是A-点的距离(A-C-B的距离是3，所以&#123;B,3&#125;)。所以下一个node是&#123;B,3&#125;</span><br><span class="line">3. 起始点B, pq=[&#123;D, 4&#125;(A-C-B-D), &#123;D, 5&#125;(A-C-D), &#123;B, 5&#125;(A-B), &#123;E, 9&#125;(A-C-E)], visited=[A,C,B], A-B的距离3, dist[B]=3. 所以下一个node是&#123;D,4&#125;</span><br><span class="line">4. 起始点D, pq[&#123;E, 7&#125;(A-C-B-D-E), &#123;D, 5&#125;(A-C-D), &#123;B, 5&#125;(A-B), &#123;F, 10&#125;(A-C-B-D-F), &#123;E, 9&#125;(A-C-E)], visited=[A,C,B,D], A-D的距离4, dist[D]=4. 所以下一个node是E.</span><br><span class="line">4. 起始点E, pq[&#123;B, 5&#125;(A-B), &#123;F, 10&#125;(A-C-B-D-F), &#123;E, 9&#125;(A-C-E)], visited=[A,C,B,D,E], A-E的距离7, dist[E]=7. 所以下一个node是F, 因为别的node都被访问过了.</span><br><span class="line">5. 起始点F, pq[], visited=[A,C,B,D,E,F], A-F的距离10, dist[F]=10.</span><br></pre></td></tr></table></figure><p>所以遍历的顺序为: <code>[A,C,B,D,E,F]</code>(可以理解为<code>[A,C,B,D,E]</code> 和 <code>[A,C,B,D,F]</code>)</p><p>具体代码实现:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Dijkstra 最短路径算法</span></span><br><span class="line"><span class="string">使用priority queue的数据结构来完整该算法，根据每一个node的priority来实现的</span></span><br><span class="line"><span class="string">谁的priority大，谁在前面。</span></span><br><span class="line"><span class="string">Python有priority queue可以直接使用</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">graphs = &#123;</span><br><span class="line">    <span class="string">'A'</span>: &#123;<span class="string">'B'</span>: <span class="number">5</span>, <span class="string">'C'</span>: <span class="number">1</span>&#125;,</span><br><span class="line">    <span class="string">'B'</span>: &#123;<span class="string">'A'</span>: <span class="number">5</span>, <span class="string">'C'</span>: <span class="number">2</span>, <span class="string">'D'</span>: <span class="number">1</span>&#125;,</span><br><span class="line">    <span class="string">'C'</span>: &#123;<span class="string">'A'</span>: <span class="number">1</span>, <span class="string">'B'</span>: <span class="number">2</span>, <span class="string">'D'</span>: <span class="number">4</span>, <span class="string">'E'</span>: <span class="number">8</span>&#125;,</span><br><span class="line">    <span class="string">'D'</span>: &#123;<span class="string">'B'</span>: <span class="number">1</span>, <span class="string">'C'</span>: <span class="number">4</span>, <span class="string">'E'</span>: <span class="number">3</span>, <span class="string">'F'</span>: <span class="number">6</span>&#125;,</span><br><span class="line">    <span class="string">'E'</span>: &#123;<span class="string">'C'</span>: <span class="number">8</span>, <span class="string">'D'</span>: <span class="number">3</span>&#125;,</span><br><span class="line">    <span class="string">'F'</span>: &#123;<span class="string">'D'</span>: <span class="number">6</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_distance</span><span class="params">(graph, s)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    init the distance for every vertex</span></span><br><span class="line"><span class="string">    :param graph:</span></span><br><span class="line"><span class="string">    :param s:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    distance = &#123;s: <span class="number">0</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> vertex <span class="keyword">in</span> graph:</span><br><span class="line">        <span class="keyword">if</span> vertex != s:</span><br><span class="line">            distance[vertex] = math.inf</span><br><span class="line">    <span class="keyword">return</span> distance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dijkstra</span><span class="params">(graph, s)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    find the shortest way</span></span><br><span class="line"><span class="string">    :param graph: graph data</span></span><br><span class="line"><span class="string">    :param s: start node</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    pq = []</span><br><span class="line">    visited = set()</span><br><span class="line">    parent = &#123;s: <span class="literal">None</span>&#125;</span><br><span class="line">    distance = init_distance(graph, s)</span><br><span class="line">    heapq.heappush(pq, (<span class="number">0</span>, s))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> len(pq) &gt; <span class="number">0</span>:</span><br><span class="line">        pair = heapq.heappop(pq)</span><br><span class="line">        <span class="comment"># because the data is lik: (0,A)</span></span><br><span class="line">        <span class="comment"># so we need to get two args</span></span><br><span class="line">        dist = pair[<span class="number">0</span>]</span><br><span class="line">        vertex = pair[<span class="number">1</span>]</span><br><span class="line">        visited.add(vertex)</span><br><span class="line">        <span class="comment"># get the closed vertex</span></span><br><span class="line">        nodes = graph[vertex].keys()</span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">            <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                total_dist = dist + graph[vertex][node] <span class="comment"># calculate the distance from A</span></span><br><span class="line">                <span class="keyword">if</span> total_dist &lt; distance[node]:</span><br><span class="line">                    heapq.heappush(pq, (total_dist, node))</span><br><span class="line">                    parent[node] = vertex</span><br><span class="line">                    distance[node] = total_dist</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> distance, parent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(dijkstra(graphs, <span class="string">'A'</span>))</span><br></pre></td></tr></table></figure><h1 id="LinkList-algorithm"><a href="#LinkList-algorithm" class="headerlink" title="LinkList algorithm"></a>LinkList algorithm</h1><p>首先定义一个List Node的class：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p>如何找到链表的中间元素？</p><blockquote><p>可以采用快慢指针的原理，第一个指针向后走一步，第二个指针向后走两步，这样第二个指针结束的时候第一个指针刚好到中间</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_mid</span><span class="params">(head)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    找到该list中间的元素</span></span><br><span class="line"><span class="string">    :param head: the head of list</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    slow = head</span><br><span class="line">    fast = head</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> fast.next <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> fast.next.next <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        slow = slow.next</span><br><span class="line">        fast = fast.next.next</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> slow</span><br></pre></td></tr></table></figure><blockquote><p>使用递归的思想来解决这个问题，在递归的时候我们已经可以得到相对应的长度，可以找到中点位置</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_mid_recursion</span><span class="params">(node, index)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    find the mid by recursion</span></span><br><span class="line"><span class="string">    :param node:</span></span><br><span class="line"><span class="string">    :param index:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">global</span> mid</span><br><span class="line">    <span class="keyword">if</span> node.next <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        find_mid_recursion(node.next, index+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        mid = int(index / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> mid == index:</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure></li><li><p>判断链表是否有环</p><blockquote><p>也可以通过使用快慢指针的思想来解决这个问题。当慢指针和快指针重合的时候代表着有环（但是容易进入死循环）。比如1-&gt;2-&gt;3-&gt;1，这样就是一个简单的环，当slow指向2的时候fast也指向2，所以表示有环</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_cycle</span><span class="params">(node)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    check whether exist cycle in the linklist</span></span><br><span class="line"><span class="string">    :param node: </span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    slow = node</span><br><span class="line">    fast = node</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> fast.next <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> fast.next.next <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        slow = slow.next</span><br><span class="line">        fast = fast.next.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> slow == fast:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure></li><li><p>反转链表</p><blockquote><p>使用recursion来实现反表。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_recursion</span><span class="params">(curr, next)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    reverse the link list by recursion</span></span><br><span class="line"><span class="string">    :param curr:</span></span><br><span class="line"><span class="string">    :param next:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> next <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    reverse_recursion(next, next.next)</span><br><span class="line">    next.next = curr</span><br><span class="line">    curr.next = <span class="literal">None</span></span><br></pre></td></tr></table></figure><blockquote><p>不用递归的实现方法。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(node)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    reverse the link list without recursion</span></span><br><span class="line"><span class="string">    :param node:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    curr = node</span><br><span class="line">    next = node.next</span><br><span class="line">    curr.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> next <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        temp = next.next</span><br><span class="line">        next.next = curr</span><br><span class="line"></span><br><span class="line">        curr = next</span><br><span class="line">        next = temp</span><br></pre></td></tr></table></figure></li><li><p>删除经过排序的链表中重复的节点。</p><blockquote><p>判断当前数字是否和下一个相等，如果相等，记录该node，继续循环，找到与改数字不相同的数字，然后把curr.next = 该不相同node</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_diff</span><span class="params">(node)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    in a sort link list, remove the duplicate value</span></span><br><span class="line"><span class="string">    :param node:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    curr = node</span><br><span class="line">    record = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> curr.next <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        next_node = curr.next</span><br><span class="line">        <span class="keyword">if</span> curr.val == next_node.val <span class="keyword">and</span> record <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            record = curr</span><br><span class="line">        <span class="keyword">elif</span> curr.val != next_node.val <span class="keyword">and</span> record <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            record.next = next_node</span><br><span class="line">            record = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        curr = curr.next</span><br></pre></td></tr></table></figure></li><li><p>计算两个链表数字之和</p><blockquote><p>将链表代表的数字进行相加即可，注意首位代表的是个位。3-&gt;1-&gt;5 代表513，5-&gt;9-&gt;2 代表295，最终计算结果为 8-&gt;0-&gt;8， 808。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_list</span><span class="params">(l1, l2)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    add two link list together</span></span><br><span class="line"><span class="string">    将链表代表的数字进行相加即可，注意首位代表的是个位。3-&gt;1-&gt;5 代表513，5-&gt;9-&gt;2 代表295，最终计算结果为 8-&gt;0-&gt;8， 808。</span></span><br><span class="line"><span class="string">    :param l1:</span></span><br><span class="line"><span class="string">    :param l2:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    over_ten = <span class="literal">False</span></span><br><span class="line">    s = ListNode(<span class="number">0</span>)</span><br><span class="line">    head = s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> l1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">or</span> l1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        v1 = l1.val <span class="keyword">if</span> l1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        v2 = l2.val <span class="keyword">if</span> l2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        sum_value = v1 + v2</span><br><span class="line">        sum_value = sum_value + <span class="number">1</span> <span class="keyword">if</span> over_ten <span class="keyword">else</span> sum_value</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> sum_value &gt;= <span class="number">10</span>:</span><br><span class="line">            over_ten = <span class="literal">True</span></span><br><span class="line">            sum_value = sum_value % <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        s.val = sum_value</span><br><span class="line"></span><br><span class="line">        l1 = l1.next <span class="keyword">if</span> l1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">        l2 = l2.next <span class="keyword">if</span> l2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> l1 <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> l2 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            s.next = ListNode(<span class="number">0</span>)</span><br><span class="line">            s = s.next</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure></li><li><p>链表-奇数位升序偶数位降序-让链表变成升序</p><blockquote><p>先拆分链表，然后把偶数链表翻转，然后合并</p><p>比如list为：1 10 2 9 3 8 4 7 5 6</p><p>奇数链表为：1 2 3 4 5</p><p>偶数链表为：10 9 8 7 6</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_two_list</span><span class="params">(l)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    split to two list</span></span><br><span class="line"><span class="string">    :param l:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    odd = ListNode(<span class="number">0</span>)</span><br><span class="line">    even = ListNode(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    odd_head = odd</span><br><span class="line">    even_head = even</span><br><span class="line"></span><br><span class="line">    index = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> l <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> index % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">            odd.val = l.val</span><br><span class="line">            odd.next = ListNode(<span class="literal">None</span>)</span><br><span class="line">            odd = odd.next</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            even.val = l.val</span><br><span class="line">            even.next = ListNode(<span class="literal">None</span>)</span><br><span class="line">            even = even.next</span><br><span class="line"></span><br><span class="line">        l = l.next</span><br><span class="line"></span><br><span class="line">    odd = <span class="literal">None</span></span><br><span class="line">    even = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    reverse_recursion(odd_head, odd_head.next)</span><br><span class="line">    reverse_recursion(even_head, even_head.next)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># merge them together</span></span><br></pre></td></tr></table></figure><p>最后这个部分由于处理不太得当，所以写起来有点麻烦，先搁置一下</p></li><li><p>一个单向链表，删除倒数第N个数据。</p><blockquote><p>首先准备两个指针，第一个指针先走n个，然后第二个出发，当第一个指针为None时，第二个指针刚好指向该数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_n_element</span><span class="params">(l, n)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    删除倒数n的element</span></span><br><span class="line"><span class="string">    :param l:</span></span><br><span class="line"><span class="string">    :param n:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    curr = l</span><br><span class="line">    corr = l</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> curr <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> index &gt;= n + <span class="number">1</span>:</span><br><span class="line">            corr = corr.next</span><br><span class="line">        curr = curr.next</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    print(corr.val)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DFS-amp-BFS&quot;&gt;&lt;a href=&quot;#DFS-amp-BFS&quot; class=&quot;headerlink&quot; title=&quot;DFS &amp;amp; BFS&quot;&gt;&lt;/a&gt;DFS &amp;amp; BFS&lt;/h1&gt;&lt;p&gt;DFS：Depth First Search，深度优先搜索算
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://shunyangli.github.io/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://shunyangli.github.io/tags/Algorithm/"/>
    
      <category term="Backend" scheme="https://shunyangli.github.io/tags/Backend/"/>
    
  </entry>
  
  <entry>
    <title>COMP9321 lecture note</title>
    <link href="https://shunyangli.github.io/2020/02/23/COMP9321-lecture-note/"/>
    <id>https://shunyangli.github.io/2020/02/23/COMP9321-lecture-note/</id>
    <published>2020-02-23T07:19:47.000Z</published>
    <updated>2020-05-03T03:24:42.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Week-1"><a href="#Week-1" class="headerlink" title="Week 1"></a>Week 1</h1><h2 id="What-is-in-a-data-model"><a href="#What-is-in-a-data-model" class="headerlink" title="What is in a data model"></a>What is in a data model</h2><p><img src="/2020/02/23/COMP9321-lecture-note/2.png" alt></p><h2 id="Problem-with-relational-models"><a href="#Problem-with-relational-models" class="headerlink" title="Problem with relational models"></a>Problem with relational models</h2><p><strong>The Object-Relational Mismatch (Impedance Mismatch)</strong></p><ul><li>Refers to the problem of a mismatch between <strong>application data model</strong> (your business objects) and <strong>data model for storage</strong> (in relational tables)</li><li>This mismatch creates a need for an awkward translation layer between <strong>the objects in the application code and the database model of tables/row/columns.</strong></li></ul><p>And the structure model</p><p><img src="/2020/02/23/COMP9321-lecture-note/3.png" alt></p><h2 id="SQL-VS-MongoDB"><a href="#SQL-VS-MongoDB" class="headerlink" title="SQL VS MongoDB"></a>SQL VS MongoDB</h2><table><thead><tr><th align="center">RDMBS</th><th align="center">MongoDB</th></tr></thead><tbody><tr><td align="center">Database</td><td align="center">Database</td></tr><tr><td align="center">Table</td><td align="center">Collection</td></tr><tr><td align="center">Tuple/Row</td><td align="center">Document</td></tr><tr><td align="center">column</td><td align="center">filed</td></tr><tr><td align="center">Table join</td><td align="center">Embedded Document</td></tr><tr><td align="center">Primary Key</td><td align="center">Primary Key（provided by mongodb itself）</td></tr></tbody></table><p>PS: Collections do not require a schema. Document within a collection can have different filelds</p><p>MongoDB更适合做数据分析。eg:</p><p><img src="/2020/02/23/COMP9321-lecture-note/1.png" alt></p><h2 id="Relational-vs-Document"><a href="#Relational-vs-Document" class="headerlink" title="Relational vs. Document"></a>Relational vs. Document</h2><p><strong>Which data model leads to simpler application code?</strong> </p><ul><li>If the application data model looks like a tree (document-like) -&gt; it can be loaded at once using document-based model </li><li>If M-M relationships are central to the application data model -&gt; relational model is efficient in joins. If document model is used, some of the ‘join’ logic will have to move to application code </li></ul><p><strong>Consider the kinds of relationships between data items. If they are highly interconnected data (e.g., social network)</strong> </p><ul><li>document model is not so good, </li><li>relational model is OK … </li><li>graph models would be natural (to be seen later</li></ul><p>Relational：适合做关联数据</p><p>Document：适合做数据分析，类似树的结构</p><p><strong>About schema flexibility, good or bad?</strong></p><ul><li>Most document-based database do not enfore any schema in documents(schema-less databases，可以插入任何类型的数据)</li><li>Schema-on-read<ul><li>The structure of the data is implicit, only interpreted when the data is read by application code</li><li>≈ dynamic (runtime) type checking</li></ul></li><li>Schema-on-write<ul><li>The traditional approach of RDB - explicit schema and the database ensures all written data conforms to it</li><li>≈ static (compile-time) type checking</li></ul></li><li>When application wants to change the format of its data then schema-on-read/write does matter (eg:  User name in one field -&gt; User name in two fields.)</li></ul><h2 id="Graph-database"><a href="#Graph-database" class="headerlink" title="Graph database"></a>Graph database</h2><p><img src="/2020/02/23/COMP9321-lecture-note/4.png" alt></p><p><strong><em>Vertices are not limited to the same type of data.</em></strong></p><h2 id="Manage-and-publish-metadata"><a href="#Manage-and-publish-metadata" class="headerlink" title="Manage and publish metadata"></a>Manage and publish metadata</h2><p>*<em>Metadata: *</em> Metadata is a “map”, is a means by which the complexity of an object is represented in a simpler form. Include:</p><ul><li><strong>Descriptive metadata:</strong> description of an object</li><li><strong>Administrative metadata:</strong> information about the origin and maintenance of an object</li><li><strong>Structural metadata:</strong> information about how an object is organised (e.g., ToC)</li><li><strong>Provenance metadata:</strong> traces/processes involved in producing the object.</li></ul><h2 id="Labs-and-soultion"><a href="#Labs-and-soultion" class="headerlink" title="Labs and soultion"></a>Labs and soultion</h2><p>*<em>Prepare for lab: *</em></p><ul><li>Install <code>pandas</code>: <code>pip3 install pandas</code></li><li>Install <code>requests</code>: <code>pip3 install requests</code></li></ul><p><strong><em>All the <code>data_frame = read_csv(&#39;xx.csv&#39;)</code></em></strong> </p><ol><li><p>CSV files</p><ul><li><p>Download the csv files:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/mysilver/COMP9321-Data-Services/master/Week2_DataAccess/Demographic_Statistics_By_Zip_Code.csv</span><br></pre></td></tr></table></figure></li><li><p>Read csv file in pandas</p><p>因为pandas已经封装好的有读取<code>csv</code>文件的库，所以我们只需要调用该库即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_csv</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param filename: the filename which need to read</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> pd.read_csv(filename)</span><br></pre></td></tr></table></figure></li><li><p>Print row and column</p><p>在print column的时候我们直接输出df即可，row我们可以使用<code>iterrows</code>的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data_frame = read_csv(<span class="string">"xx.csv"</span>)</span><br><span class="line"><span class="comment"># show col</span></span><br><span class="line">print(<span class="string">", "</span>.join([col <span class="keyword">for</span> col <span class="keyword">in</span> data_frame]))</span><br><span class="line"><span class="comment"># show row</span></span><br><span class="line"><span class="keyword">for</span> index, row <span class="keyword">in</span> data_frame.iterrows():</span><br><span class="line">    print(<span class="string">", "</span>.join([str(row[col]) <span class="keyword">for</span> col <span class="keyword">in</span> data_frame]))</span><br></pre></td></tr></table></figure></li><li><p>Store in csv</p><p>导出csv文件也有相对应的库：<code>to_csv</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">store_scv</span><span class="params">(data_frame, filename)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param data_frame: the pandas data frame</span></span><br><span class="line"><span class="string">    :param filename: the filename which need to be stored</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    data_frame.to_csv(filename, sep=<span class="string">','</span>, encoding=<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>SQlite files</p><p>Firstly, we need to connect to the sqlite file by using <code>sqlite</code> package. (Install sqlite: <code>pip3 install sqlite3</code>)</p><p>All the<code>conn=conn_db(&#39;xx.db&#39;)</code></p><ul><li><p>Connect to the database</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn_db</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param filename: the filename of db</span></span><br><span class="line"><span class="string">    :return: return the cursor</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> sqlite3.connect(filename)</span><br></pre></td></tr></table></figure></li><li><p>Store all the data into sqlite file</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">store_sqlite</span><span class="params">(data_frame, table_name, conn)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param conn: sqlite3 con</span></span><br><span class="line"><span class="string">    :param data_frame: the pandas data frame</span></span><br><span class="line"><span class="string">    :param table_name: the tables name in sql</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    data_frame.to_sql(table_name, conn)</span><br></pre></td></tr></table></figure></li><li><p>Query by pandas</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_db</span><span class="params">(query, conn)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param query: query language (eg: "SELECT * FROM xx")</span></span><br><span class="line"><span class="string">    :param conn: connect sqlite3</span></span><br><span class="line"><span class="string">    :return: the data frame after reading database</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> pd.read_sql_query(query, conn)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>NoSql</p><p>在做lab之前应该先安装MongoDB，具体的可以Google一下</p><p>应该先安装<code>pymongo</code>(<code>pip3 install pymongo</code>)</p><ul><li><p>Connect MongoDB</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect_mongo</span><span class="params">(database_name, collection, host=<span class="string">'127.0.0.1'</span>, port=<span class="string">'27017'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param collection: the database collection</span></span><br><span class="line"><span class="string">    :param database_name: which database need to connect</span></span><br><span class="line"><span class="string">    :param host: the host of mongodb</span></span><br><span class="line"><span class="string">    :param port: the port of mongodb</span></span><br><span class="line"><span class="string">    :return: cursor</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    client = MongoClient(<span class="string">'mongodb://%s:%s/'</span> % (host, port))</span><br><span class="line">    <span class="keyword">return</span> client[database_name][collection]</span><br></pre></td></tr></table></figure></li><li><p>Store data into MongoDB</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">store_mongo</span><span class="params">(db, data_frame)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param db: database</span></span><br><span class="line"><span class="string">    :param data_frame: the data frame</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> index, row <span class="keyword">in</span> data_frame.iterrows():</span><br><span class="line">        t = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> data_frame:</span><br><span class="line">            t[col] = str(row[col])</span><br><span class="line">        data.append(t)</span><br><span class="line">    db.insert_many(data)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>RESTful</p><p>We use <code>requests</code> to get web data.</p><ul><li><p>Get web data</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_web_json</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    get the json file from an url</span></span><br><span class="line"><span class="string">    :param url: the json url</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    res = requests.get(url)</span><br><span class="line">    <span class="keyword">return</span> res.json()</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="Week-2-Data-Cleansing"><a href="#Week-2-Data-Cleansing" class="headerlink" title="Week 2 Data Cleansing"></a>Week 2 Data Cleansing</h1><h2 id="Why-data-cleaning"><a href="#Why-data-cleaning" class="headerlink" title="Why data cleaning"></a>Why data cleaning</h2><ul><li>Datasets are messy, messy data can give wrong insights</li><li>Data cleaning find and remove or correct data that detracts(减损) from the quality,  and thus the usability, of data.</li><li>The goal of data cleansing is to achieve consistent, complete, accurate, and uniform data</li></ul><h2 id="Dirty-data"><a href="#Dirty-data" class="headerlink" title="Dirty data"></a>Dirty data</h2><h3 id="The-statistics-view"><a href="#The-statistics-view" class="headerlink" title="The statistics view"></a>The statistics view</h3><p>We want to model ideal samples of that process, but in practice we have non-ideal samples:</p><ul><li><strong>Distortion(失真):</strong> some samples are corrupted by a process</li><li><strong>Selection Bias:</strong> likelihood of a sample depends on its value</li><li><strong>Left and right censorship(审查):</strong>  users come and go from our scrutiny</li><li><strong>Dependence:</strong> samples are supposed to be independent, but are not (e.g. social networks)</li></ul><h3 id="The-database-view"><a href="#The-database-view" class="headerlink" title="The database view"></a>The database view</h3><ul><li>I got my hands on this data set</li><li>Some of the values are missing, corrupted, wrong, duplicated</li><li>Results are absolute (relational model)</li><li>You get a better answer by improving the quality of the values in your dataset</li></ul><h3 id="The-Domain-Expert’s-View"><a href="#The-Domain-Expert’s-View" class="headerlink" title="The Domain Expert’s View:"></a>The Domain Expert’s View:</h3><p>Domain experts have an implicit model of the data that they can test against…</p><ul><li>This Data Doesn’t look right</li><li>This Answer Doesn’t look right</li></ul><h3 id="The-Data-Scientist’s-View"><a href="#The-Data-Scientist’s-View" class="headerlink" title="The Data Scientist’s View:"></a>The Data Scientist’s View:</h3><p><img src="/2020/02/23/COMP9321-lecture-note/5.png" alt></p><h3 id="Example-about-dirty-data"><a href="#Example-about-dirty-data" class="headerlink" title="Example about dirty data"></a>Example about dirty data</h3><p><img src="/2020/02/23/COMP9321-lecture-note/6.png" alt></p><h2 id="Data-quantity-problem"><a href="#Data-quantity-problem" class="headerlink" title="Data quantity problem"></a>Data quantity problem</h2><ul><li>(Source) Data is dirty on its own.</li><li>Transformations corrupt the data (complexity of software pipelines).</li><li>Data sets are clean but integration (i.e., combining them) mess them up.</li><li>“Rare” errors can become frequent after transformation or integration. </li><li>Data sets are clean but suffer “bit rot”</li><li><strong>Old data loses its value/accuracy over time</strong></li><li><strong>Any combination of the above</strong></li></ul><h2 id="How-data-quantity-problem-happen"><a href="#How-data-quantity-problem-happen" class="headerlink" title="How data quantity problem happen"></a>How data quantity problem happen</h2><p><strong>Incomplete data come from：</strong></p><ul><li>non available data value when collected</li><li>different criteria between the time when the data was collected and when it is analyzed</li><li>human/hardware/software problems </li></ul><p>*<em>Noisy data comes from: *</em></p><ul><li><strong>data collection:</strong> faulty instruments （有缺陷的仪器）</li><li><strong>data entry:</strong> human or computer errors </li><li><strong>data transmission</strong></li></ul><p><strong>Inconsistent (and duplicate) data comes from:</strong> </p><ul><li><strong>Different data sources</strong>, so <strong>non-uniform</strong> naming conventions/data codes </li><li>Functional dependency and/or referential integrity violation（功能依赖性和/或参照完整性违规）</li></ul><h2 id="Application-Scenarios（应用场景）"><a href="#Application-Scenarios（应用场景）" class="headerlink" title="Application Scenarios（应用场景）"></a>Application Scenarios（应用场景）</h2><p><strong>Integrate data from different sources（整合来自不同来源的数据）</strong></p><ul><li>eg：populating data from different operational data stores or a mediator-based architecture Eliminate errors and duplicates within a single source </li></ul><p><strong>Eliminate errors and duplicates within a single source （消除单一来源中的错误和重复）</strong></p><ul><li>eg：duplicates in a file of customers </li></ul><p>*<em>Migrate data from a source schema into a different fixed target schema *</em></p><ul><li>eg： discontinued application packages </li></ul><p>*<em>Convert poorly structured data into structured data *</em></p><ul><li>eg：processing data collected from the Web</li></ul><h2 id="Data-Quality-Problems"><a href="#Data-Quality-Problems" class="headerlink" title="Data Quality Problems"></a>Data Quality Problems</h2><p><strong>Schema level data quality problems</strong></p><ul><li>solution: prevented with better schema design, schema translation and integration</li><li>Avoided by an RDBMS(<strong>Relational Database Management System</strong>)<ul><li><strong>Missing data:</strong> product price not filled in</li><li><strong>Wrong data type:</strong> “abc” in product price</li><li><strong>Wrong data value:</strong> 0.5 in product tax (iva)</li><li><strong>Dangling data(不存在该类型的数据):</strong> category identifier of product does not exist</li><li><strong>Exact duplicate data:</strong> different persons with same ssn</li><li><strong>Generic domain constraints:</strong> incorrect invoice price</li></ul></li><li>Not avoided by an RDBMS(无法避免的)<ul><li><strong>Wrong categorical data:</strong> countries and corresponding states</li><li><strong>Outdated temporal data:</strong> just-in-time requirement</li><li><strong>Inconsistent spatial data(空间数据不一致???):</strong> coordinates and shapes</li><li><strong>Name conflicts:</strong> person vs person or person vs client</li><li><strong>Structural Conflicts:</strong> addresses</li></ul></li></ul><p><strong>Instance level data quality problems</strong></p><ul><li>solution: errors and inconsistencies of data that are not prevented at schema level</li><li>Single record<ul><li>Missing data in a not null field – ssn:-9999999</li><li>Erroneous data – price:5 but real price:50</li><li>Misspellings: Morty Al-Banna vs Morty Al-Banana</li><li>Embedded values: dr. Morty Al-Banna</li><li>Misfielded values: city: Australia</li><li>Ambiguous data(不明确信息): M.Al-Banna,Sydney,Australia</li></ul></li><li>Multiple records<ul><li>Duplicate records: Name:Morty Al-Banna, Birth:01/01/1980 and Name: Morty Al-Banna, Birth:01/01/1980</li><li>Contradicting records(矛盾记录): Morty Al-Banna, Birth:01/01/1980 and Name: Morty Al-Banna, Birth:01/01/1982</li><li>Non-standardized data(不标准的数据): Morty Al-Banna vs Al-Banna, Morty</li></ul></li></ul><h2 id="Data-Cleaning-Makes-Everything-Okay"><a href="#Data-Cleaning-Makes-Everything-Okay" class="headerlink" title="Data Cleaning Makes Everything Okay?"></a>Data Cleaning Makes Everything Okay?</h2><p><strong>In fact, the data were rejected as unreasonable by data quality control algorithms</strong></p><h2 id="Conventional-Definition-of-Data-Quality"><a href="#Conventional-Definition-of-Data-Quality" class="headerlink" title="Conventional Definition of Data Quality"></a>Conventional Definition of Data Quality</h2><ol><li><p><strong>Accuracy</strong></p><ul><li><strong>Closeness between a value v and a value v’</strong>.： considered as the correct representation of the realworld phenomenon that v aims to represent.<ul><li>eg: for a person name “John”, v’=John is correct, v=Jhn is incorrect</li></ul></li><li><strong>Syntatic accuracy(语法准确性)：</strong>closeness of a value v to the elements of the corresponding definition domain D</li><li><strong>Semantic accuracy(语义准确性)：</strong>closeness of the value v to the true value v’<ul><li>e.g., Donald Trump vs The Donald</li></ul></li></ul></li><li><p><strong>Completeness</strong></p><ul><li><strong>Schema completeness:</strong> degree to which concepts and their properties are not missing from the schema</li><li><strong>Column completeness:</strong> evaluates the missing values for a specific property or column in a table.</li><li><strong>Population completeness(总体完整性):</strong> evaluates missing values with respect to a reference population </li><li><strong>The presence/absence and meaning of null values(空值的存在/不存在和含义)</strong></li><li><strong>Validity of open world assumption (OWA) or closed world assumption (CWA)</strong><ul><li>OWA: cannot state neither the truth or falsity of facts not represented in the tuples of a relation</li><li>CWA: only the values actually present in a relational table and no other values represent facts of the real world.</li><li>OWA: No, have a correct answer</li><li>CWA: Unknown, (不确定的答案)</li></ul></li></ul></li><li><p><strong>Uniqueness</strong></p></li><li><p><strong>Timeliness</strong></p></li><li><p><strong>Consistency(一致性)</strong></p></li></ol><p>Others:</p><ul><li>Interpretability: concerns the documentation and metadata that are available to correctly interpret the meaning and properties of data sources </li><li>Synchronization between different time series: concerns proper integration of data having different time stamps. </li><li>Accessibility: measures the ability of the user to access the data from his/her own culture, physical status/functions, and technologies available. </li></ul><h2 id="Understanding-the-data-by-using-Python"><a href="#Understanding-the-data-by-using-Python" class="headerlink" title="Understanding the data by using Python"></a>Understanding the data by using Python</h2><p><strong>代码部分，学习一下DataFrame：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas.DataFrame( data, index, columns, dtype, copy)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">data</td><td align="center">数据采取各种形式，如:<code>ndarray</code>，<code>series</code>，<code>map</code>，<code>lists</code>，<code>dict</code>，<code>constant</code>和另一个<code>DataFrame</code>。</td></tr><tr><td align="center">index</td><td align="center">对于行标签，要用于结果帧的索引是可选缺省值<code>np.arrange(n)</code>，如果没有传递索引值</td></tr><tr><td align="center">columns</td><td align="center">对于列标签，可选的默认语法是 - <code>np.arange(n)</code>。 这只有在没有索引传递的情况下才是这样</td></tr><tr><td align="center">dtype</td><td align="center">每列的数据类型。</td></tr><tr><td align="center">copy</td><td align="center">如果默认值为<code>False</code>，则此命令(或任何它)用于复制数据</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame()</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Empty DataFrame</span><br><span class="line">Columns: []</span><br><span class="line">Index: []</span><br></pre></td></tr></table></figure><p>示例-1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = [[<span class="string">'Alex'</span>,<span class="number">10</span>],[<span class="string">'Bob'</span>,<span class="number">12</span>],[<span class="string">'Clarke'</span>,<span class="number">13</span>]]</span><br><span class="line">df = pd.DataFrame(data,columns=[<span class="string">'Name'</span>,<span class="string">'Age'</span>])</span><br><span class="line"><span class="keyword">print</span> (df)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">     Name  Age</span><br><span class="line">0    Alex   10</span><br><span class="line">1     Bob   12</span><br><span class="line">2  Clarke   13</span><br></pre></td></tr></table></figure><p><strong>从<code>dict</code>来创建DataFrame:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"name"</span>: [<span class="string">'Charles'</span>, <span class="string">'Charlie'</span>],</span><br><span class="line">    <span class="string">"age"</span>: [<span class="number">20</span>, <span class="number">21</span>]</span><br><span class="line">&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="keyword">print</span> (df)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      name  age</span><br><span class="line">0  Charles   20</span><br><span class="line">1  Charlie   21</span><br></pre></td></tr></table></figure><p><code>describe()</code>的使用：This function returns the count, mean, standard deviation, minimum and maximum values and the quantiles of the data.</p><p><code>.shape</code>:  view the number of samples and features we’re dealing with</p><p><code>head(), tail()</code>:  you can easily check out the first and last 5 lines of your DataFrame, respectively.</p><h2 id="Dealing-with-Missing-Data"><a href="#Dealing-with-Missing-Data" class="headerlink" title="Dealing with Missing Data"></a>Dealing with Missing Data</h2><p>假设我们有一个<code>DataFrame</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"name"</span>: [<span class="string">'Charles'</span>, <span class="literal">None</span>],</span><br><span class="line">    <span class="string">"age"</span>: [<span class="number">20</span>, <span class="number">21</span>]</span><br><span class="line">&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="keyword">print</span> (df)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      name  age</span><br><span class="line">0  Charles   20</span><br><span class="line">1     None   21</span><br></pre></td></tr></table></figure><p>代表这个<code>DataFrame</code>存在一个确实的数据</p><p><strong>pandas中提供了<code>isnull()</code>和<code>notnull()</code>两个函数来监测是否缺少值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"name"</span>: [<span class="string">'Charles'</span>, <span class="literal">None</span>],</span><br><span class="line">    <span class="string">"age"</span>: [<span class="number">20</span>, <span class="number">21</span>]</span><br><span class="line">&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="keyword">print</span> (df[<span class="string">'name'</span>].isnull())</span><br><span class="line"><span class="keyword">print</span> (df[<span class="string">'name'</span>].notnull())</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0    False</span><br><span class="line">1     True</span><br><span class="line">Name: name, dtype: bool</span><br><span class="line">0     True</span><br><span class="line">1    False</span><br><span class="line">Name: name, dtype: bool</span><br></pre></td></tr></table></figure><h4 id="缺少数据的计算"><a href="#缺少数据的计算" class="headerlink" title="缺少数据的计算"></a>缺少数据的计算</h4><ul><li>在求和数据时，<code>NA</code>将被视为<code>0</code></li><li>如果数据全部是<code>NA</code>，那么结果将是<code>NA</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"name"</span>: [<span class="string">'Charles'</span>, <span class="literal">None</span>],</span><br><span class="line">    <span class="string">"age"</span>: [<span class="literal">None</span>, <span class="number">21</span>]</span><br><span class="line">&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="keyword">print</span> (df[<span class="string">'age'</span>].sum())</span><br><span class="line"><span class="comment"># 结果：21.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"name"</span>: [<span class="string">'Charles'</span>, <span class="literal">None</span>],</span><br><span class="line">    <span class="string">"age"</span>: [<span class="literal">None</span>, <span class="literal">None</span>]</span><br><span class="line">&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="keyword">print</span> (df[<span class="string">'age'</span>].sum())</span><br><span class="line"><span class="comment"># 结果：0</span></span><br></pre></td></tr></table></figure><p><strong>清理/填充缺少数据</strong></p><p><code>fillna()</code>函数可以通过几种方法用非空数据“填充”<code>NA</code>值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"name"</span>: [<span class="string">'Charles'</span>, <span class="literal">None</span>],</span><br><span class="line">    <span class="string">"age"</span>: [<span class="number">20</span>, <span class="number">21</span>]</span><br><span class="line">&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line">print(df.fillna(<span class="string">'hello word'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果如下:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">         name  age</span></span><br><span class="line"><span class="string">0     Charles   20</span></span><br><span class="line"><span class="string">1  hello word   21</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p><strong>填写NA前进和后退</strong></p><p><code>pad/fill</code>: 填充方法向前</p><p><code>bfill/backfill</code>: 填充方法向后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"name"</span>: [<span class="string">'Charles'</span>, <span class="literal">None</span>],</span><br><span class="line">    <span class="string">"age"</span>: [<span class="number">20</span>, <span class="number">21</span>]</span><br><span class="line">&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line">print(df.fillna(method=<span class="string">'pad'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果如下:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">      name  age</span></span><br><span class="line"><span class="string">0  Charles   20</span></span><br><span class="line"><span class="string">1  Charles   21</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p><strong>删除缺少的值</strong></p><p>把<code>NaN</code>那一行的数据去掉，可以使用<code>dropna</code>函数和<code>axis</code>参数。 默认情况下，<code>axis = 0</code>，即在行上应用，这意味着如果行内的任何值是<code>NA</code>，那么整个行被排除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"name"</span>: [<span class="string">'Charles'</span>, <span class="literal">None</span>],</span><br><span class="line">    <span class="string">"age"</span>: [<span class="number">20</span>, <span class="number">21</span>]</span><br><span class="line">&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line">print(df.dropna())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果如下:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">      name  age</span></span><br><span class="line"><span class="string">0  Charles   20</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p><strong>替换值</strong><br>pandas可以使用<code>replace</code>来替换不同的值，参数使用<code>dict</code>形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"name"</span>: [<span class="string">'Charles'</span>, <span class="literal">None</span>],</span><br><span class="line">    <span class="string">"age"</span>: [<span class="number">20</span>, <span class="number">21</span>]</span><br><span class="line">&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line">print(df.replace(&#123;<span class="number">20</span>: <span class="number">2</span>&#125;))</span><br><span class="line"><span class="comment"># 结果如下:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">      name  age</span></span><br><span class="line"><span class="string">0  Charles    2</span></span><br><span class="line"><span class="string">1     None   21</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h2 id="Labs-soulution"><a href="#Labs-soulution" class="headerlink" title="Labs soulution"></a>Labs soulution</h2><p><strong>Task 1:</strong></p><ol><li>When we count <code>nan</code> we can use<code>isnan()</code> function, after that we just need use <code>sum()</code> to count how many cols.</li><li><code>drop(col, axis=1, inplace=True)</code> can drop multiple columns</li></ol><p><strong>Task 2:</strong></p><ol><li>We need to use <code>apply(func)</code> to deal with. <code>apply</code> 里面的参数是一个function，比如说我使用<code>df[&#39;Place of Publication&#39;].apply(test)</code>, 那么<code>test</code> 的function里面就接收到<code>Place of Publication</code>的值，在<code>test</code>里面处理完直接<code>return</code>就好</li><li>Fix the data of <code>Date of Publication</code>, we can use <code>df.str.extract(r&#39;regx&#39;)</code> (regx: Regex express). For more <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.extract.html" target="_blank" rel="noopener">information</a>.</li><li>Convert to number we can use <code>pd.to_numeric</code> function</li><li>For replace <code>nan</code> with 0, we can use <code>df.fillna(0)</code> function</li></ol><p><strong>Task 3:</strong></p><ol><li>Pandas alos can execute query language, but it does not work well with column names which contains white spaces, so we need to replace spcae in column names before using <code>df.query()</code></li></ol><p><strong>Task 4</strong></p><ol><li>Merge two data frame, when the columns name are different, we can use<code>pandas.merge(df1, df2, how=&#39;left&#39;, left_on=[&#39;id_key&#39;], right_on=[&#39;fk_key&#39;])</code> to deal with. When two keys are same, we can use <code>pd.merge(df1, df2, on=&#39;ID&#39;)</code>, the arg <code>on</code> can be a list which means base on multiple columns.</li><li><code>df.groupby(arg1, as_index=False)</code>, arg1 is the column name.</li></ol><p>All the code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Data cleaning</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Task 1</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_data</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    load the data frame from csv file</span></span><br><span class="line"><span class="string">    :param filename: read the dataset from csv file</span></span><br><span class="line"><span class="string">    :return: data frame</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> pd.read_csv(filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">display_data</span><span class="params">(df, col=True, row=True)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    display data</span></span><br><span class="line"><span class="string">    :param df: data frame</span></span><br><span class="line"><span class="string">    :param col: whether display column</span></span><br><span class="line"><span class="string">    :param row: whether display row</span></span><br><span class="line"><span class="string">    :return: nothing</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> col:</span><br><span class="line">        print(<span class="string">", "</span>.join([c <span class="keyword">for</span> c <span class="keyword">in</span> df]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> row:</span><br><span class="line">        <span class="keyword">for</span> index, r <span class="keyword">in</span> df.iterrows():</span><br><span class="line">            print(<span class="string">", "</span>.join([str(r[c]) <span class="keyword">for</span> c <span class="keyword">in</span> df]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_nan</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    count how many nan in each column</span></span><br><span class="line"><span class="string">    fix: we need to count as percentage, so we need to fix</span></span><br><span class="line"><span class="string">    what function we need:</span></span><br><span class="line"><span class="string">        shape: df.shape[1] # number of col</span></span><br><span class="line"><span class="string">            : df.shape[0] # number of row</span></span><br><span class="line"><span class="string">    :param df: data from</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    row_num = df.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> df:</span><br><span class="line">        percentage = (int(df[col].isna().sum()) / row_num)*<span class="number">100</span></span><br><span class="line">        print(col, <span class="string">":"</span>, percentage, <span class="string">'%'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drop_col</span><span class="params">(df, cols)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    drop the columns</span></span><br><span class="line"><span class="string">    :param df: data frame</span></span><br><span class="line"><span class="string">    :param cols: the column need to drop</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    df.drop(cols, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Task 2</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_values</span><span class="params">(addr)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    replace any value contain London with London</span></span><br><span class="line"><span class="string">    replace - with space</span></span><br><span class="line"><span class="string">    :param addr:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    addr = re.sub(<span class="string">'.*London.*'</span>, <span class="string">'London'</span>, addr)</span><br><span class="line">    addr = addr.replace(<span class="string">'-'</span>, <span class="string">' '</span>)</span><br><span class="line">    <span class="keyword">return</span> addr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_place</span><span class="params">(df, col)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    replace the place</span></span><br><span class="line"><span class="string">    :param df: data frame</span></span><br><span class="line"><span class="string">    :param col: which col need to fix</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    The answer code:</span></span><br><span class="line"><span class="string">        df[col] = df[col].apply(</span></span><br><span class="line"><span class="string">        lambda x: 'London' if 'London' in x else x.replace('-', ' '))</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    df[col] = df[col].apply(replace_values)</span><br><span class="line">    <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keep_four_date</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Keep the first 4 digit number in "Date of Publication"</span></span><br><span class="line"><span class="string">    :param df: data frame</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    df[<span class="string">'Date of Publication'</span>] = pd.to_numeric(df[<span class="string">'Date of Publication'</span>].str.extract(<span class="string">r'(\d&#123;4&#125;)'</span>, expand=<span class="literal">False</span>),</span><br><span class="line">                                              downcast=<span class="string">'integer'</span>)</span><br><span class="line">    <span class="comment"># pd.to_numeric(df['Date of Publication'])</span></span><br><span class="line">    <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_nan_zero</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Replace NaN with 0 for the cells of "Date of Publication"</span></span><br><span class="line"><span class="string">    :param df: data frame</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    df[<span class="string">'Date of Publication'</span>] = df[<span class="string">'Date of Publication'</span>].fillna(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">store_csv</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    store the data into csv file</span></span><br><span class="line"><span class="string">    :param df:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    df.to_csv(<span class="string">'res.csv'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">task 3</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_column</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    replace the space in column with _</span></span><br><span class="line"><span class="string">    :param df: data frame</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    df.columns = [c.replace(<span class="string">' '</span>, <span class="string">'_'</span>) <span class="keyword">for</span> c <span class="keyword">in</span> df.columns]</span><br><span class="line">    <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_pandas</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Filter the rows and only keep books which are published in "London" after 1866.</span></span><br><span class="line"><span class="string">    :param df:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    df.query(<span class="string">'Date_of_Publication &gt; 1886 and Place_of_Publication == "London"'</span>)</span><br><span class="line">    <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_data_frame</span><span class="params">(df1, df2)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    merge two data frame on base on id</span></span><br><span class="line"><span class="string">    :param df1: data frame 1</span></span><br><span class="line"><span class="string">    :param df2: data frame 2</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    function:</span></span><br><span class="line"><span class="string">        pandas.merge(df1, df2, how='left', left_on=['id_key'], right_on=['fk_key'])</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> pd.merge(df1, df2, left_on=<span class="string">'Place_of_Publication'</span>, right_on=<span class="string">'City'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">group_data</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    group the data</span></span><br><span class="line"><span class="string">    :param df: data frame</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    function:</span></span><br><span class="line"><span class="string">        df.groupby('Country', as_index=False).count()</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> df.groupby(<span class="string">'Country'</span>, as_index=<span class="literal">False</span>).count()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    run the task 1 functions</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">"####### Start task 1 ######"</span>)</span><br><span class="line">    df = read_data(<span class="string">'Books.csv'</span>)</span><br><span class="line">    display_data(df)</span><br><span class="line">    count_nan(df)</span><br><span class="line">    col = [</span><br><span class="line">        <span class="string">'Edition Statement'</span>,</span><br><span class="line">        <span class="string">'Corporate Author'</span>,</span><br><span class="line">        <span class="string">'Corporate Contributors'</span>,</span><br><span class="line">        <span class="string">'Former owner'</span>,</span><br><span class="line">        <span class="string">'Engraver'</span>,</span><br><span class="line">        <span class="string">'Contributors'</span>,</span><br><span class="line">        <span class="string">'Issuance type'</span>,</span><br><span class="line">        <span class="string">'Shelfmarks'</span></span><br><span class="line">    ]</span><br><span class="line">    drop_col(df, col)</span><br><span class="line">    display_data(df)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    run task 2 functions</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">"####### Start task 2 ######"</span>)</span><br><span class="line">    df = read_data(<span class="string">'Books.csv'</span>)</span><br><span class="line">    replace_place(df, <span class="string">'Place of Publication'</span>)</span><br><span class="line">    display_data(df)</span><br><span class="line">    df = keep_four_date(df)</span><br><span class="line">    df = replace_nan_zero(df)</span><br><span class="line">    display_data(df)</span><br><span class="line">    <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task3</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    run task3 functions</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">"####### Start task 3 ######"</span>)</span><br><span class="line">    df = task2()</span><br><span class="line">    df = replace_column(df)</span><br><span class="line">    df = query_pandas(df)</span><br><span class="line">    display_data(df)</span><br><span class="line">    <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task4</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    run task 4 functions</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">"####### Start task 4 ######"</span>)</span><br><span class="line">    df = task3()</span><br><span class="line">    city_df = read_data(<span class="string">'City.csv'</span>)</span><br><span class="line">    res = merge_data_frame(df, city_df)</span><br><span class="line">    res = group_data(res)</span><br><span class="line">    display_data(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    task1()</span><br><span class="line">    task4()</span><br></pre></td></tr></table></figure><h1 id="Week-3-Visualization"><a href="#Week-3-Visualization" class="headerlink" title="Week 3 Visualization"></a>Week 3 Visualization</h1><p><strong>因为part1部分代为占了一大部分，所以没什么内容，都是最基本的pandas的用法，可以稍微练习一下，问题不大。</strong></p><h2 id="What-is-good-visualisation"><a href="#What-is-good-visualisation" class="headerlink" title="What is good visualisation"></a>What is good visualisation</h2><p>Aim to create a visualisation that are <strong>accurate</strong>, tell a good <strong>story</strong>, and provide real <strong>knowledge</strong> to the audience.</p><ul><li>Accuracy</li><li>Story</li><li>Knowledge</li></ul><h2 id="About-color-using"><a href="#About-color-using" class="headerlink" title="About color using"></a>About color using</h2><p>一些常用的颜色定义请不要违反：</p><p><img src="/2020/02/23/COMP9321-lecture-note/7.png" alt></p><h2 id="Graphs"><a href="#Graphs" class="headerlink" title="Graphs"></a>Graphs</h2><h4 id="Scatter-Plot-graphs"><a href="#Scatter-Plot-graphs" class="headerlink" title="Scatter Plot graphs:"></a>Scatter Plot graphs:</h4><ul><li>To show <strong>two variables</strong> and their <strong>correlations</strong> (i.e., X axis vs. Y axis)</li></ul><p><strong>lab的话因为当时在泰国，然后在赶due，就没写，不过不是很难。以后会补上的。这周的lecture没有讲什么特别多有用的东西，主要是在实现数据图例化的时候需要注意的事项。</strong></p><h1 id="Week-4-Visualisation"><a href="#Week-4-Visualisation" class="headerlink" title="Week 4 Visualisation"></a>Week 4 Visualisation</h1><h2 id="Three-tricks-for-doing-more-with-less"><a href="#Three-tricks-for-doing-more-with-less" class="headerlink" title="Three tricks for doing more with less"></a>Three tricks for doing more with less</h2><ul><li><strong>Multiple plots</strong><ul><li>simple, easily interpretable subplots</li><li>can be beautiful but overwhelming</li></ul></li><li><strong>Hybrid plots</strong><ul><li>a <strong>scatter plot</strong> of histograms</li><li>or a venn-diagram of histograms, etc</li></ul></li><li><strong>Multiple axes</strong><ul><li>plot two (or more) different things on one graph</li></ul></li></ul><p><img src="/2020/02/23/COMP9321-lecture-note/10.png" alt></p><p><img src="/2020/02/23/COMP9321-lecture-note/11.png" alt></p><h2 id="Two-tradeoffs"><a href="#Two-tradeoffs" class="headerlink" title="Two tradeoffs"></a>Two tradeoffs</h2><ul><li>Informativeness vs. readability (信息太少了不能表达出来要点，太多了不便于阅读，解决方法：分层)<ul><li>Too little information can conceal data</li><li>But too much information can be overwhelming</li><li>Possible solution: hierarchical organization?</li></ul></li><li>Data-centric vs. viewer-centric<ul><li>Viewers are accustomed to certain types of visualization</li><li>But novel visualizations can be truer to data</li></ul></li></ul><h1 id="Week4-REST-part1"><a href="#Week4-REST-part1" class="headerlink" title="Week4 REST part1"></a>Week4 REST part1</h1><p>Three basic component of web:</p><ul><li>A Uniform Notation Scheme for addressing resources (Uniform Resource Locator - URL)</li><li>A protocol for transporting messages (HyperText Transport Protocol - HTTP)</li><li>A markup language for formatting hypertext documents(超文本) (HyperText Markup Language – HTML) </li></ul><p><strong>The steps of request a web（常见面试题）:</strong></p><ol><li>解析DNS地址（根绝域名解析IP）</li><li>client发送tcp请求到web server，建立tcp链接</li><li>client发送http请求（一般包含header+body），请求信息</li><li>server返回HTML超文本</li><li>client浏览器解析HTML超文本，渲染HTML，构建DOM tree</li></ol><p><strong>URL里面的特殊字符：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">特殊含义                                          十六进制</span><br><span class="line"></span><br><span class="line">+ 表示空格（在URL中不能使用空格）                     %2B</span><br><span class="line"></span><br><span class="line">/ 分隔目录和子目录                                  %2F</span><br><span class="line"></span><br><span class="line">? 分隔实际的URL和参数                               %3F</span><br><span class="line"></span><br><span class="line"># 表示书签                                         %23</span><br><span class="line"></span><br><span class="line">&amp; URL中指定的参数间的分隔符                          %26</span><br><span class="line"></span><br><span class="line">= URL中指定的参数的值                               %3D</span><br></pre></td></tr></table></figure><p><strong>HTTP request method:</strong></p><p><img src="/2020/02/23/COMP9321-lecture-note/12.png" alt></p><p><em>其中GET和POST最类似，但是依然有很大的差别：</em></p><p><em>在请求GET的时候只会建立一次TCP，然后POST会建立两次。因为GET会把header和body一起发送给server，POST会先发送header，如果返回100，才会接着发送body，所以建立了两次TCP</em></p><p><strong>HTTP response code:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">200    OK    请求成功。一般用于GET与POST请求</span><br><span class="line">201    Created    已创建。成功请求并创建了新的资源</span><br><span class="line">202    Accepted    已接受。已经接受请求，但未处理完成</span><br><span class="line">203    Non-Authoritative Information    非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</span><br><span class="line">204    No Content    无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</span><br><span class="line">205    Reset Content    重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</span><br><span class="line">206    Partial Content    部分内容。服务器成功处理了部分GET请求</span><br><span class="line">300    Multiple Choices    多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</span><br><span class="line">301    Moved Permanently    永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</span><br><span class="line">302    Found    临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</span><br><span class="line">303    See Other    查看其它地址。与301类似。使用GET和POST请求查看</span><br><span class="line">304    Not Modified    未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</span><br><span class="line">305    Use Proxy    使用代理。所请求的资源必须通过代理访问</span><br><span class="line">306    Unused    已经被废弃的HTTP状态码</span><br><span class="line">307    Temporary Redirect    临时重定向。与302类似。使用GET请求重定向</span><br><span class="line">400    Bad Request    客户端请求的语法错误，服务器无法理解</span><br><span class="line">401    Unauthorized    请求要求用户的身份认证</span><br><span class="line">402    Payment Required    保留，将来使用</span><br><span class="line">403    Forbidden    服务器理解请求客户端的请求，但是拒绝执行此请求</span><br><span class="line">404    Not Found    服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置&quot;您所请求的资源无法找到&quot;的个性页面</span><br><span class="line">500    Internal Server Error    服务器内部错误，无法完成请求</span><br><span class="line">501    Not Implemented    服务器不支持请求的功能，无法完成请求</span><br><span class="line">502    Bad Gateway    作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</span><br><span class="line">503    Service Unavailable    由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</span><br><span class="line">504    Gateway Time-out    充当网关或代理的服务器，未及时从远端服务器获取请求</span><br><span class="line">505    HTTP Version not supported    服务器不支持请求的HTTP协议的版本，无法完成处理</span><br></pre></td></tr></table></figure><p><em>常用的：200，201，301，400，403，404，500</em></p><p><strong>为什么使用web service</strong></p><p>大家都觉得app更方便，更快捷还为什么要用web呢，其中的一个原因是因为手机的性能不如电脑。在处理一些很消耗性能的网页时电脑的优势更大，（比如选择地图直接的最短距离，这些需要很多运算的）</p><p><strong>Resources in REST：</strong></p><p>resource定义：The key abstraction of information in REST is a resource. <strong>Any information that can be named can be a resource</strong>: a document or image, a temporal service (e.g. today’s weather in Los Angeles), a collection of other resources, a non-virtual object (e.g. a person), and so on. <strong>In other words, any concept that might be the target of an author’s hypertext reference must fit within the definition of a resource.</strong> </p><p>A resource is a thing that: </p><ul><li>is unique (i.e., can be identified uniquely) </li><li>has at least one representation</li><li>has one or more attributes beyond ID</li><li>has a potential schema, or definition </li><li>can provide context (state) – which can change (updated) </li><li>is reachable within the addressable universe </li><li>collections, relationships </li></ul><p><strong>Architectural Constraints of REST：</strong></p><p>其实可以理解为前后端分离的架构</p><ul><li>Client-Server（client and server）</li><li>Uniform Interface（http or media）</li><li>Statelessness</li><li>Caching</li><li>Layered System</li><li>Code on demand (optional)</li></ul><p>符合前5个就可以被称为restful api</p><p><img src="/2020/02/23/COMP9321-lecture-note/13.png" alt></p><p><img src="/2020/02/23/COMP9321-lecture-note/14.png" alt></p><h1 id="Week-5-REST-part2"><a href="#Week-5-REST-part2" class="headerlink" title="Week 5 REST part2"></a>Week 5 REST part2</h1><p><strong>Statelessness：</strong></p><p>KEY notion: <strong>separation of client application state and RESTful resource state.</strong> </p><h1 id="Week-6-RESTful-API-Security"><a href="#Week-6-RESTful-API-Security" class="headerlink" title="Week 6 RESTful API Security"></a>Week 6 RESTful API Security</h1><ul><li><strong>Least privilege:</strong> Every program and every user of the system should operate using the least set of privileges necessary to complete the job.</li><li><strong>Fail-safe defaults:</strong> Base access decisions on permission rather than exclusion. This principle means that the default situation is lack of access, and the protection scheme identifies conditions under which access is permitted</li><li><strong>Economy of mechanism:</strong> Keep the design as simple and small as possible. This well-known principle applies to any aspect of a system</li><li><strong>Complete mediation:</strong> Every access to every object must be checked for authority. This principle implies that a foolproof method of identifying the source of every request must be devised</li><li><strong>Open design:</strong> The design should not be secret. The mechanisms should not depend on the ignorance of potential attackers, but rather on the possession of specific, more easily protected, keys or passwords.</li><li><strong>Separation of privilege</strong>: Where feasible, a protection mechanism that requires two keys to unlock it is more robust and flexible than one that allows access to the presenter of only a single key</li><li><strong>Least common mechanism:</strong> Minimize the amount of mechanism common to more than one user and depended on by all users.</li><li><strong>Psychological acceptability:</strong> It is essential that the human interface be designed for ease of use, so that users routinely and automatically apply the protection mechanisms correctly.</li><li><strong>Defense in Depth:</strong> an approach in which a series of defensive mechanisms are layered in order to protect valuable data and information. If one mechanism fails, another steps up immediately to thwart an attack</li></ul><p><strong>怎么做加密：</strong></p><p>第一个是HTTPS的方式进行加密，HTTPS是使用了SSL协议在传输层进行加密。</p><p><strong>API authentication：</strong></p><ul><li><strong>HTTP Basic</strong> (and Digest) Authentication: IETF RFC 2617 <ul><li>在你访问一个需要HTTP Basic Authentication的URL的时候，如果你没有提供用户名和密码，服务器就会返回401，如果你直接在浏览器中打开，浏览器会提示你输入用户名和密码。在请求头中添加Authorization或者在url中添加用户名和密码</li><li>但是由于http basic是用base64加密的，所以可以解密出来明文，相当不安全。而且每次请求的时候都会带着http basic。</li></ul></li><li><strong>Token-based</strong> Authentication<ul><li>当服务器收到用户的登陆信息，然后使用jwt把一些信息加密成一个无序字符串，然后返回给client，client会把token储存在本地（一般是localstorage）。在每次请求的时候会带上token。（token也可以是无序的乱码）</li><li><strong>Must be used with TLS</strong></li><li>header + payload + signature</li></ul></li><li><strong>API Key</strong> [+ Signature]</li><li><strong>OAuth (Open Authorisation) Protocol</strong> - strictly uses HTTP protocol elements only </li></ul><h1 id="Week-6-part-2-data-analysis"><a href="#Week-6-part-2-data-analysis" class="headerlink" title="Week 6 part 2 data analysis"></a>Week 6 part 2 data analysis</h1><p>就是简单叙述了machine learning，没啥用。</p><h1 id="Week-7-Classification"><a href="#Week-7-Classification" class="headerlink" title="Week 7: Classification"></a>Week 7: Classification</h1><p>前几周的都是理论也都学过很多次了，没什么意思，就从week7的machine learning重新看起</p><h2 id="Machine-learning-for-data-analytics"><a href="#Machine-learning-for-data-analytics" class="headerlink" title="Machine learning for data analytics"></a>Machine learning for data analytics</h2><p>其实就是在剩余的时间我们会学点啥，就是把前几周的知识结合在一起了。。。会用到pandas，flask和machine learning等。</p><ol><li><strong>Define</strong> and <strong>Initialize</strong> a Model </li><li><strong>Train your Model</strong> (using your training dataset) </li><li><strong>Validate</strong> the Model (by prediction using your test dataset) </li><li>Use it: <strong>Explore or Deploy</strong> as a web service </li><li>Update and Revalidate</li></ol><h3 id="Supervised-Learning"><a href="#Supervised-Learning" class="headerlink" title="Supervised Learning"></a>Supervised Learning</h3><p>大家这个在9417或者别的ai课应该都有学过这些简单的理论的。</p><p>Assume: <code>y=f(x)</code></p><p><strong>Classification</strong>: y is <strong>discrete</strong> (class labels).</p><p><strong>Regression</strong>: y is <strong>continuous</strong>, e.g. linear regression.</p><h4 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a>Classification</h4><ol><li>Supervised learning</li><li>Need the data <strong>labeled with correct answer</strong></li><li>Trained classifiers then can map input data to a category</li></ol><p>常用的分类算法就是KNN</p><h5 id="KNN-（k-Nearest-Neighbour）"><a href="#KNN-（k-Nearest-Neighbour）" class="headerlink" title="KNN （k-Nearest Neighbour）"></a>KNN （k-Nearest Neighbour）</h5><p>It is a <strong>non parametric and instance-based</strong> learning algorithm</p><p><strong>Non-parametric</strong> means it makes no explicit assumptions about the functional form of how the prediction is made, avoiding the dangers of mismodeling the underlying distribution of the data.</p><p><strong>Instance-based</strong> learning means that our algorithm doesn’t explicitly learn a model. Instead, it chooses to memorize the training instances which are subsequently used as “knowledge” for the prediction phase. Concretely, this means that only when a query to our database is made (i.e. when we ask it to predict a label given an input), will the algorithm use the training instances to spit out an answer.</p><p>学校给的算法思路：</p><p>k- Nearest Neighbour Classifier Algorithm Give a training set X_train（数据） with lables y_train（结果） and given a new instance x_test to be classified: </p><ul><li>Find the most similar instances (let’s call then X_NN) to x_test that are in X_train. </li><li>Get the labels y_NN for the instances in X_NN. </li><li>Predict the label for x_test by combining the labels y_NN (e.g., using majority rule)</li></ul><p>KNN是通过测量不同特征值之间的距离进行分类。如果一个样本在特征空间中的k个醉相思的样本中的大多数属于某一类别，则该样本也属于这个类别。其中k通常不大于20。knn计算距离的公式一般是用欧几里得或者曼哈顿距离:<br>$$<br>欧几里得距离： d(x, y) = \sqrt{\sum_{k=1}^{n}(x_{k}-y_{k})^2}\<br>曼哈顿距离: d(x, y) = \sqrt{\sum_{k=1}^{n}|x_{k}-y_{k}|}\<br>$$<br>算法的思路：</p><ol><li>计算测试数据与各个训练数据之间的距离</li><li>按照距离来排序</li><li>选取距离最小的k个点</li><li>确定前k个点所在类别的出现频率</li><li>返回前k个点钟出现频率最高的类别作为测试数据的预测分类</li></ol><p>在<a href="https://github.com/eijaz1/k-NN-Tutorial-Scikit-learn" target="_blank" rel="noopener">github</a>上找了一个例子给大家看下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Pregnancies：怀孕的次数</span></span><br><span class="line"><span class="string">Glucose：血浆葡萄糖浓度</span></span><br><span class="line"><span class="string">BloodPressure：舒张压</span></span><br><span class="line"><span class="string">SkinThickness：肱三头肌皮肤皱皱厚度</span></span><br><span class="line"><span class="string">Insulin： 胰岛素</span></span><br><span class="line"><span class="string">BMI：身体质量指数</span></span><br><span class="line"><span class="string">dpf：糖尿病血统指数</span></span><br><span class="line"><span class="string">Age：年龄</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    df = pd.read_csv(<span class="string">'diabetes_data.csv'</span>)</span><br><span class="line">    <span class="comment"># 前几个数据是用来训练的</span></span><br><span class="line">    x = df.iloc[:,<span class="number">0</span>:<span class="number">8</span>]</span><br><span class="line">    <span class="comment"># 相对应的结果 diabetes</span></span><br><span class="line">    y = df.iloc[:,<span class="number">8</span>]</span><br><span class="line">    <span class="comment"># 将数据集拆分为训练和测试数据</span></span><br><span class="line">    X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = <span class="number">0.2</span>, random_state=<span class="number">1</span>, stratify=y)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 初始化knn</span></span><br><span class="line">    knn = KNeighborsClassifier(n_neighbors = <span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Fit the classifier to the data</span></span><br><span class="line">    knn.fit(X_train,y_train)</span><br><span class="line">    knn.predict(X_test)</span><br><span class="line">    print(knn.score(X_test, y_test))</span><br></pre></td></tr></table></figure><p>就直接把数据拆分为test和train两个集合，然后进行训练，训练完之后对比结果，<code>knn.score</code>是输出准确性。想看源码的可以直接在网上搜索，很多实现的源码。</p><p><strong>How to choose k</strong></p><p>k值如果过大可能会导致更好的性能，但是同时也会倒是找到的数据不是neighbor。通常k的取值为：$$k&lt;\sqrt{n}$$ 其中n是训练数据的数量。</p><h6 id="Generalization-Overfitting-and-Underfitting"><a href="#Generalization-Overfitting-and-Underfitting" class="headerlink" title="Generalization, Overfitting and Underfitting"></a>Generalization, Overfitting and Underfitting</h6><p>泛化，过度拟合和不足拟合</p><ul><li>Generalization ability refers to an algorithm’s ability to give accurate predictions for new, previously unseen data.</li><li>Models that are <strong>too complex</strong> for the amount of training data available are said to <strong>overfit</strong> and are not likely to generalize well to new data instances. （数据太复杂，导致过度拟合）</li><li>Models that are <strong>too simple</strong>, that do not even do well on the training data, are said to <strong>underfit</strong> and also not likely to generalize well. （数据太简单，导致拟合不足）</li></ul><h6 id="When-to-use-Nearest-Neighbor"><a href="#When-to-use-Nearest-Neighbor" class="headerlink" title="When to use Nearest Neighbor"></a>When to use Nearest Neighbor</h6><p>When to Consider：</p><ul><li>Instance map to points in Rn </li><li>Less than 20 attributes per instance </li><li>Lots of training data </li></ul><p>Advantages </p><ul><li>Training is very fast </li><li>Learn complex target functions</li><li>Do not lose information </li></ul><p>Disadvantages </p><ul><li>Slow at query </li><li>Easily fooled by irrelevant attributes </li><li>The Bigger the dataset the more impact on performance</li></ul><p>Nearest neighbors <strong>sensitive to mis-labeled data</strong> (“class noise”). Solution? </p><p>Smooth by having k nearest neighbors vote</p><p>nn算法需要对数据进行一个简单的清洗池，然后选择适当的k值可以提高准确率</p><h6 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h6><p><strong>Expensive at test time:</strong> To find one nearest neighbor of a query point x, we must compute the distance to all N training examples. Complexity: <strong>O(kdN)</strong> for kNN</p><ul><li>Use subset of dimensions </li><li>Compute only an approximate distance (e.g., LSH) </li><li>Remove redundant data (e.g., condensing)</li></ul><p><strong>Storage Requirements</strong>: Must store all training data </p><ul><li>Remove redundant data (e.g., condensing) </li><li>Pre-sorting often increases the storage requirements</li></ul><p><strong>High Dimensional Data:</strong> “Curse of Dimensionality” </p><ul><li>Required amount of training data increases exponentially with dimension</li><li>Computational cost also increases</li></ul><h2 id="Decision-Tree"><a href="#Decision-Tree" class="headerlink" title="Decision Tree"></a>Decision Tree</h2><p>决策树既可以做分类，又可以做回归。决策树常见的算法：<em>ID3（贪心</em>算法<em>），C4.5（贪心</em>算法<em>）与C5.0生成树</em>算法用熵（entropy）。</p><p>决策树的好处：</p><ul><li>Handling of categorical variables</li><li>Handling of missing values and unknown labels</li><li>Detection of nonlinear relationships</li><li>Visualization and interpretation in decision trees</li></ul><p>When to consider Decision Trees </p><ul><li>Instances describable by attribute-value pairs </li><li>Target function is discrete valued </li><li>Disjunctive hypothesis may be required </li><li>Possibly noisy training data </li><li>Missing attribute values </li></ul><p>Examples: </p><ul><li>Medical diagnosis </li><li>Credit risk analysis </li><li>Object classification for robot manipulator (Tan 1993)</li></ul><p>A decision tree has <strong>2 kinds of nodes</strong> </p><ol><li>Each l<strong>eaf node</strong> has a class label, determined by majority vote of training examples reaching that leaf. </li><li>Each <strong>internal node</strong> is a question on features. It branches out according to the answers.</li></ol><p>Diagram of decision tree</p><p><img src="/2020/02/23/COMP9321-lecture-note/8.png" alt></p><p><img src="/2020/02/23/COMP9321-lecture-note/9.png" alt></p><p>首先了解一下典型的算法ID3：</p><p>期望信息越小，信息增益越大。熵（entropy）：<br>$$<br>info(D) = -\sum_{i=1}^{m}p_{i}log_{2}(p_{i})<br>$$<br>现在我们假设将训练元组D按属性A进行划分，则A对D划分的期望信息为:<br>$$<br>info_{A}(D) = \sum_{j=1}^{v}\frac{|D_{j}|}{|D|}info(D_{j})\<br>gain(A) = info(D)-info_{A}(D)<br>$$</p><h3 id="Avoid-Overfitting"><a href="#Avoid-Overfitting" class="headerlink" title="Avoid Overfitting"></a>Avoid Overfitting</h3><p>避免过度拟合的方法：</p><ol><li>Stop growing the tree when the error doesn’t drop by more than a threshold with any new cut.</li><li>Prune a large tree from the leaves to the root. Weakest link pruning:</li></ol><h1 id="Week-8-Linear-regression"><a href="#Week-8-Linear-regression" class="headerlink" title="Week 8 Linear regression"></a>Week 8 Linear regression</h1><p>Linear regression 是supervised ML。regression包含了simple linear regression，multiple linear regression，polynomial linear。线性回归的公式：$y=f(x)$<br>$$<br>y = ß + \sum_{j=1}^{p}x_{j}ß_{j}<br>$$<br>其中ß是regression model。</p><p>什么时候使用linear regression：</p><ol><li>变量是连续的</li><li>feature和target是线性关系</li><li>特征之间很少或没有多重共线性。</li><li>错误项的正态分布。</li><li>最小异常值</li></ol><p><strong>前两个才是主要的。</strong>可以通过画图，或者计算coefficients来验证是否符合linear regression。</p><p><img src="/2020/02/23/COMP9321-lecture-note/15.png" alt></p><p><img src="/2020/02/23/COMP9321-lecture-note/16.png" alt></p><h2 id="Simple-linear-regression-VS-multiple-linear-regression"><a href="#Simple-linear-regression-VS-multiple-linear-regression" class="headerlink" title="Simple linear regression VS multiple linear regression"></a>Simple linear regression VS multiple linear regression</h2><p>*<em>Linear regression: *</em> $y=b_{0}+b_{1}X_{1}+∂$</p><p><strong>MLR：</strong>$y=b_{0}+b_{1}X_{1}+b_{2}X_{2}+∂$</p><p><img src="/2020/02/23/COMP9321-lecture-note/17.png" alt></p><h1 id="Week-8-Clustering"><a href="#Week-8-Clustering" class="headerlink" title="Week 8 Clustering"></a>Week 8 Clustering</h1><p>聚类算法的两种方式：flat algorithm（平面算法），Hierarchical algorithms（分层算法）。</p><p><strong>Hard clustering:</strong> Each example belongs to exactly one cluster </p><p><strong>Soft clustering:</strong> An example can belong to more than one cluster (probabilistic)</p><p><strong>K means：</strong></p><ol><li>Start with some initial cluster centers (k random points) (也就是分类的数量)</li><li>Iterate<ol><li>Assign/cluster each example to closest center<ul><li>iterate over each point: <ul><li>get distance to each cluster center </li><li>assign to closest center (hard cluster)</li></ul></li></ul></li><li>Recalculate and change centers as the mean of the points in the cluster. </li></ol></li><li>Stop when <strong>no pointsʼ assignments</strong> change </li></ol><p>K-Means算法的特点是<strong>类别的个数是人为给定的，（但是K是随机的）重要的假设是：数据之间的相似度可以使用欧氏距离度量</strong>。</p><p>核心思路：</p><p>确定类别个数，随机生成cluster center（因为是聚类算法，所以随机更加分布），这样每个点都会有一个中心，但是这个时候聚类可能不会特别准确：</p><p><img src="/2020/02/23/COMP9321-lecture-note/18.png" alt></p><p>所以这时候需要不断的调整中心点的距离，去（同化）附近一些点。可以根据这一堆点的中心点调整，（或者说坐标平均值）。</p><p>K-Means 一般是用<strong>欧式距离</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Week-1&quot;&gt;&lt;a href=&quot;#Week-1&quot; class=&quot;headerlink&quot; title=&quot;Week 1&quot;&gt;&lt;/a&gt;Week 1&lt;/h1&gt;&lt;h2 id=&quot;What-is-in-a-data-model&quot;&gt;&lt;a href=&quot;#What-is-in-a-d
      
    
    </summary>
    
    
    
      <category term="COMP" scheme="https://shunyangli.github.io/tags/COMP/"/>
    
  </entry>
  
  <entry>
    <title>Nginx</title>
    <link href="https://shunyangli.github.io/2020/02/05/Nginx/"/>
    <id>https://shunyangli.github.io/2020/02/05/Nginx/</id>
    <published>2020-02-05T04:59:20.000Z</published>
    <updated>2020-02-05T15:02:00.230Z</updated>
    
    <content type="html"><![CDATA[<p>暂时回不去上课了，无聊的时候把最近遇到的问题，还有一些笔记给总结一下，希望对大家有点用。</p><p>本文主要讲的是<code>nginx</code>部署静态网页和动态网页等多种情况。</p><p>如果不了解<code>nginx</code> 的可以提前准备了解一下关于<code>nginx</code>的资料，已经怎么工作的</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>如果是Ubuntu来当做服务器的话，可以执行以下命令来安装<code>Nginx</code>（请确保80端口没有被占用）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install update</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure><p>ps: 如果80端口被占用会一直报错的</p><p><strong>Nginx常用命令：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 重启Nginx服务器</span></span><br><span class="line">sudo systemctl restart nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启Nginx服务器</span></span><br><span class="line">sudo systemctl start nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭Nginx服务器</span></span><br><span class="line">sudo systemctl stop nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看Nginx服务状态</span></span><br><span class="line">sudo systemctl status nginx</span><br></pre></td></tr></table></figure><p>也可以直接调用<code>/etc/init.d/nginx</code>命令操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看<span class="built_in">help</span>文档</span></span><br><span class="line">sudo /etc/init.d/nginx --help</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启Nginx服务器</span></span><br><span class="line">sudo /etc/init.d/nginx restart</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启Nginx服务器</span></span><br><span class="line">sudo /etc/init.d/nginx start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭Nginx服务器</span></span><br><span class="line">sudo /etc/init.d/nginx stop</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看Nginx服务状态</span></span><br><span class="line">sudo /etc/init.d/nginx status</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新加载Nginx</span></span><br><span class="line">sudo /etc/init.d/nginx reload</span><br></pre></td></tr></table></figure><p><strong>文件目录</strong></p><p>文件目录：<code>/etc/nginx</code></p><p>常用的目录以及文件，一般的修改方法有两种：</p><ol><li>添加自己的配置文件到<code>conf.d</code> 目录</li><li>修改默认的配置文件<code>nginx.conf</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── conf.d           -- 配置文件目录（存放自己的配置文件）</span><br><span class="line">├── nginx.conf       -- Nginx的默认配置文件</span><br></pre></td></tr></table></figure><h1 id="Nginx-部署静态文件"><a href="#Nginx-部署静态文件" class="headerlink" title="Nginx 部署静态文件"></a>Nginx 部署静态文件</h1><p>Nginx部署静态文件包含三步：</p><ol><li>首先我们把打包过的HTML文件上传到服务器</li><li>得到HTML文件的绝对路径（pwd可以完成）</li><li>修改Nginx配置文件</li></ol><p>具体怎么上传文件到服务器可以Google或者Baidu去找资料，在这里就不详细说了。</p><p><strong>修改Nginx配置：</strong></p><p>ps：我们一般只需要修改<code>http</code>里面的配置</p><p>假设在服务器里面我们的文件是: <code>/home/ubuntu/build</code>， 文件里面包含了<code>index.html</code></p><p><strong><em>第一种方法：直接修改配置文件</em></strong></p><p>然后我们需要配置Nginx (<code>/etc/nginx/nginx.conf</code>)，添加以下代码到文件里<code>http</code>的配置里面（两种法法任意一种都可以）：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种方法</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>      <span class="number">80</span>;  <span class="comment"># 监听的端口</span></span><br><span class="line">    <span class="attribute">server_name</span>  xxx.com; <span class="comment"># 监听的url</span></span><br><span class="line">    <span class="attribute">root</span> /home/ubuntu/build; <span class="comment"># 文件目录</span></span><br><span class="line">    <span class="attribute">charset</span> utf-<span class="number">8</span>; <span class="comment"># 字符配置</span></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">@fallback</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 路由位置</span></span><br><span class="line">    <span class="attribute">location</span> <span class="variable">@fallback</span> &#123; </span><br><span class="line">        <span class="attribute">rewrite</span> .* /index.html <span class="literal">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种方法</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>      <span class="number">80</span>;  <span class="comment"># 监听的端口</span></span><br><span class="line">    <span class="attribute">server_name</span>  xxx.com; <span class="comment"># 监听的url</span></span><br><span class="line">    <span class="attribute">root</span> /home/ubuntu/build; <span class="comment"># 文件目录</span></span><br><span class="line">    <span class="attribute">charset</span> utf-<span class="number">8</span>; <span class="comment"># 字符配置</span></span><br><span class="line">    <span class="comment"># 路由位置</span></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/etc/nginx/nginx.conf</code> 的详细代码：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span> www-data;</span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="attribute">pid</span> /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">768</span>;</span><br><span class="line">    <span class="comment"># multi_accept on;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># Basic Settings</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nopush</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">65</span>;</span><br><span class="line">    <span class="attribute">types_hash_max_size</span> <span class="number">2048</span>;</span><br><span class="line">    <span class="comment"># server_tokens off;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># server_names_hash_bucket_size 64;</span></span><br><span class="line">    <span class="comment"># server_name_in_redirect off;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># SSL Settings</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>; <span class="comment"># Dropping SSLv3, ref: POODLE</span></span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># Logging Settings</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/access.log;</span><br><span class="line">    <span class="attribute">error_log</span> /var/log/nginx/error.log;</span><br><span class="line"></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># Gzip Settings</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_disable</span> <span class="string">"msie6"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># gzip_vary on;</span></span><br><span class="line">    <span class="comment"># gzip_proxied any;</span></span><br><span class="line">    <span class="comment"># gzip_comp_level 6;</span></span><br><span class="line">    <span class="comment"># gzip_buffers 16 8k;</span></span><br><span class="line">    <span class="comment"># gzip_http_version 1.1;</span></span><br><span class="line">    <span class="comment"># gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># Virtual Host Configs</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">4<span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">4<span class="attribute">include</span> /etc/nginx/sites-enabled/*;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 第一种方法</span></span><br><span class="line">    <span class="comment"># server &#123;</span></span><br><span class="line">    <span class="comment">#     listen      80;  # 监听的端口</span></span><br><span class="line">    <span class="comment">#     server_name  xxx.com; # 监听的url</span></span><br><span class="line">    <span class="comment">#     root /home/ubuntu/build; # 文件目录</span></span><br><span class="line">    <span class="comment">#     charset utf-8; # 字符配置</span></span><br><span class="line">    <span class="comment">#     location / &#123;</span></span><br><span class="line">    <span class="comment">#         try_files $uri @fallback;</span></span><br><span class="line">    <span class="comment">#     &#125;</span></span><br><span class="line">    <span class="comment">#     # 路由位置</span></span><br><span class="line">    <span class="comment">#     location @fallback &#123; </span></span><br><span class="line">    <span class="comment">#         rewrite .* /index.html break;</span></span><br><span class="line">    <span class="comment">#     &#125;</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二种方法</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>      <span class="number">80</span>;  <span class="comment"># 监听的端口</span></span><br><span class="line">        <span class="attribute">server_name</span>  xxx.com; <span class="comment"># 监听的url</span></span><br><span class="line">        <span class="attribute">root</span> /home/ubuntu/build; <span class="comment"># 文件目录</span></span><br><span class="line">        <span class="attribute">charset</span> utf-<span class="number">8</span>; <span class="comment"># 字符配置</span></span><br><span class="line">        <span class="comment"># 路由位置</span></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>第二种方法：添加新的配置文件</em></strong></p><ol><li>在<code>/etc/nginx/conf.d</code>的文件夹下面创建<code>config.conf</code></li><li>把配置代码写入到<code>config.conf</code></li><li>加载到默认的配置文件中</li></ol><p>把上面提到的那两种方法写入<code>/etc/nginx/conf.d/config.conf</code>的配置文件中，然后修改<code>/etc/nginx/nginx.conf</code>的配置文件，具体代码如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span> www-data;</span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="attribute">pid</span> /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">768</span>;</span><br><span class="line">    <span class="comment"># multi_accept on;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># Basic Settings</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nopush</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">65</span>;</span><br><span class="line">    <span class="attribute">types_hash_max_size</span> <span class="number">2048</span>;</span><br><span class="line">    <span class="comment"># server_tokens off;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># server_names_hash_bucket_size 64;</span></span><br><span class="line">    <span class="comment"># server_name_in_redirect off;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># SSL Settings</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>; <span class="comment"># Dropping SSLv3, ref: POODLE</span></span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># Logging Settings</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/access.log;</span><br><span class="line">    <span class="attribute">error_log</span> /var/log/nginx/error.log;</span><br><span class="line"></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># Gzip Settings</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_disable</span> <span class="string">"msie6"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># gzip_vary on;</span></span><br><span class="line">    <span class="comment"># gzip_proxied any;</span></span><br><span class="line">    <span class="comment"># gzip_comp_level 6;</span></span><br><span class="line">    <span class="comment"># gzip_buffers 16 8k;</span></span><br><span class="line">    <span class="comment"># gzip_http_version 1.1;</span></span><br><span class="line">    <span class="comment"># gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># Virtual Host Configs</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># TODO 包含配置文件</span></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/sites-enabled/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>ps：在最后会把具体的文件上传的</em></p><h1 id="Nginx-gunicorn-supervisor-flask"><a href="#Nginx-gunicorn-supervisor-flask" class="headerlink" title="Nginx + gunicorn + supervisor + flask"></a>Nginx + gunicorn + supervisor + flask</h1><p>大部分时候我们写的不仅仅是静态HTML文件，比如说带后台的web（flask，spring）等等，这时候我们需要Nginx来配置相对应的服务。这里我们用flask给大家演示一下怎么配置。</p><p><strong>首先需要安装gunicorn，supervisor</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install gunicorn</span><br><span class="line">sudo apt install supervisor</span><br></pre></td></tr></table></figure><p>假设我们当前文件夹下面有<code>run.py</code>的文件，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello world"</span></span><br></pre></td></tr></table></figure><p><strong>使用<code>gunicorn</code>来启动flask服务：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> run 是指run.py</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> app是指启动器</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> workers 用来定义工作线程的数量，一般 worker 的数量为 (2×<span class="variable">$num_cores</span>)+1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">bind</span> 是绑定主机地址和端口</span></span><br><span class="line">gunicorn --workers=4 --bind=127.0.0.1:8000 run:app</span><br></pre></td></tr></table></figure><p>如果正常启动我们在浏览器访问<code>127.0.0.1:8000</code>就能看到hello world</p><p><strong>使用supervisor管理进程：</strong></p><p>Supervisor 是一个 <code>客户端/服务器</code>系统，允许其用户在类 <code>UNIX</code>操作系统上控制进程。当进程被意外杀死，Supervisor 可以主动将其拉起。</p><p>使用如下命令构建配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo_supervisord_conf &gt; /etc/supervisord.conf</span><br></pre></td></tr></table></figure><p>编辑配置文件，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[program:gunicorn]</span><br><span class="line">user = root                     ; 以root 用户启动</span><br><span class="line">directory = /home/ubuntu        ; flask 文件所在目录</span><br><span class="line">command = /usr/local/bin/gunicorn --workers=4 --bind=0.0.0.0:8000 run:app ; 程序启动命令</span><br><span class="line">startsecs = 5                   ; 启动 5秒后没有异常退出，视作正常启动</span><br><span class="line">autostart = true                ; 在 supervisord 启动时自动启动</span><br><span class="line">autorestart = true              ; 程序异常退出后重启</span><br><span class="line">redirect_stderr = true          ; stderr 也重定向至 stdout</span><br><span class="line">stdout_logfile = /home/ubuntu/gunicorn.log ; stdout 日志文件，需要手动创建日志存放目录</span><br><span class="line">[supervisord]</span><br></pre></td></tr></table></figure><p><em>ps：关于如何找到gunicorn的路径：</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ &gt; <span class="built_in">which</span> gunicorn</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gunicorn</span><br></pre></td></tr></table></figure><p>输入下面命令来启动服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisord -c /etc/supervisord.conf</span><br></pre></td></tr></table></figure><p><strong>supervisor常用命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看supervisor状态</span></span><br><span class="line">supervisorctl status</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止supervisor</span></span><br><span class="line">supervisorctl stop gunicorn</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动supervisor</span></span><br><span class="line">supervisorctl start gunicorn</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启supervisor</span></span><br><span class="line">supervisorctl restart gunicorn</span><br></pre></td></tr></table></figure><p><em>ps：更多命令可查看<a href="http://supervisord.org/running.html#supervisorctl-actions" target="_blank" rel="noopener">官方文档</a></em></p><p><strong>使用Nginx反向代理flask服务</strong></p><p>修改配置的server：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> xxx.com;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8000/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>ps：更多详情请看<a href="http://flask.pocoo.org/docs/1.0/deploying/wsgi-standalone/#proxy-setups" target="_blank" rel="noopener">官方文档</a></em></p><p><strong>Demo文件<a href="./demo.zip">下载</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;暂时回不去上课了，无聊的时候把最近遇到的问题，还有一些笔记给总结一下，希望对大家有点用。&lt;/p&gt;
&lt;p&gt;本文主要讲的是&lt;code&gt;nginx&lt;/code&gt;部署静态网页和动态网页等多种情况。&lt;/p&gt;
&lt;p&gt;如果不了解&lt;code&gt;nginx&lt;/code&gt; 的可以提前准备了解一下
      
    
    </summary>
    
    
      <category term="Server" scheme="https://shunyangli.github.io/categories/Server/"/>
    
    
      <category term="Frontend" scheme="https://shunyangli.github.io/tags/Frontend/"/>
    
      <category term="Server" scheme="https://shunyangli.github.io/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>Socket IO</title>
    <link href="https://shunyangli.github.io/2019/10/31/Socket-IO/"/>
    <id>https://shunyangli.github.io/2019/10/31/Socket-IO/</id>
    <published>2019-10-31T06:47:45.000Z</published>
    <updated>2020-01-16T10:31:10.328Z</updated>
    
    <content type="html"><![CDATA[<p>Flask socket IO 是Flask应用程序能够访问客户端和服务器之间的低延迟双向通信。Socket IO可以保持backend和frontend之间实时双向通讯。Socket IO 主要使用了WebSocket协议。只要是支持<a href="https://socket.io/" target="_blank" rel="noopener">socket.io</a> 的语言都可以使用。<a href="https://github.com/socketio/socket.io" target="_blank" rel="noopener">scoket.io GitHub</a> socket io的GitHub源码所在。</p><h1 id="安装和依赖"><a href="#安装和依赖" class="headerlink" title="安装和依赖"></a>安装和依赖</h1><p>直接使用<code>pip3</code>安装就行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install flask-socketio</span><br></pre></td></tr></table></figure><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>Flask socketio 这个扩展完全兼容了python2.7和python3.3+版本。对于flask Socket io的异步服务的推荐选择：</p><p><a href="http://eventlet.net/" target="_blank" rel="noopener">eventlet</a> 推荐使用，这个效率比较高，支持长轮询和 WebSocket 传输。也可以直接用<code>pip3</code> 来安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install eventlet</span><br></pre></td></tr></table></figure><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>在Flask的程序中使用flask socket io：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"><span class="keyword">from</span> flask_socketio <span class="keyword">import</span> SocketIO</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = <span class="string">'vnkdjnfjknfl1232#'</span></span><br><span class="line">socketio = SocketIO(app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    socketio.run(app)</span><br></pre></td></tr></table></figure><p><code>app.config[&#39;SECRET_KEY&#39;]</code> 必须要配置，是为了保证加密传输的安全性。<code>socketio.run</code> 封装并替换了<code>app.run</code>的启动方式。在此环境下优先使用<code>eventlet</code></p><p>以及在HTML里面怎么使用socket io：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.7.3/socket.io.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> socket = io.connect(<span class="string">'http://'</span> + <span class="built_in">document</span>.domain + <span class="string">':'</span> + location.port);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的<code>document.domain</code>和<code>location.port</code>是web相对的IP和端口。可以自动适配，也可以手动修改成所需要的IP和端口。</p><h1 id="接受和发送消息"><a href="#接受和发送消息" class="headerlink" title="接受和发送消息"></a>接受和发送消息</h1><p>接受消息在flask里面可以这样使用，这是<code>msg</code>可以是不同的数据类型，可以是json，str，也可以是多个参数的组合:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@socketio.on('receive')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_receive</span><span class="params">(msg)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'You receive message: '</span>, msg)</span><br></pre></td></tr></table></figure><p>发送消息:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@socketio.on('send')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_send</span><span class="params">(msg)</span>:</span></span><br><span class="line">    socketio.emit(<span class="string">'receive'</span>, msg)</span><br></pre></td></tr></table></figure><p>也可以只用<code>send</code>的方式发送。具体的可以查一下，一般只用定向发送。</p><p>在HTML里面接受数据的使用方法和在flask里面类似：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">socket.on(<span class="string">'receive'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> msg </span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(len, wid);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样就可以接收到从后端传输的数据。</p><p>发送消息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">socket.emit(<span class="string">'receive'</span>, &#123;</span><br><span class="line">    msg: <span class="string">'hello world'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样后端就能接收到来自前端的消息。</p><p>之前写了一个用socket io实现的live chat给大家分享一下:</p><p><a href="socket.zip">live chat</a></p><p><strong>重点提示一下，<code>socketio</code>存在跨域问题，试过网上的好几种方法都不可以。找到了唯一能用的方法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socketio = SocketIO(app, cors_allowed_origins=&apos;*&apos;)</span><br></pre></td></tr></table></figure><p>最后：这两天事情有点多，等有时间重新详细写一下。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Flask socket IO 是Flask应用程序能够访问客户端和服务器之间的低延迟双向通信。Socket IO可以保持backend和frontend之间实时双向通讯。Socket IO 主要使用了WebSocket协议。只要是支持&lt;a href=&quot;https://so
      
    
    </summary>
    
    
      <category term="Backend" scheme="https://shunyangli.github.io/categories/Backend/"/>
    
    
      <category term="Flask" scheme="https://shunyangli.github.io/tags/Flask/"/>
    
      <category term="JS" scheme="https://shunyangli.github.io/tags/JS/"/>
    
      <category term="Socket" scheme="https://shunyangli.github.io/tags/Socket/"/>
    
  </entry>
  
  <entry>
    <title>PayPal</title>
    <link href="https://shunyangli.github.io/2019/10/18/PayPal/"/>
    <id>https://shunyangli.github.io/2019/10/18/PayPal/</id>
    <published>2019-10-18T05:57:00.000Z</published>
    <updated>2019-10-19T07:38:46.699Z</updated>
    
    <content type="html"><![CDATA[<p>详细讲一下怎么在web里面利用JS使用PayPal。最近找了一些关于支付的API，国内大部分都是微信，支付宝什么的。但是因为微信支付宝申请起来挺麻烦的，所以尝试使用了一下PayPal。PayPal可以作为国际使用支付方式。具体的网址如下：<a href="https://developer.paypal.com/docs/checkout/integrate/#3-render-the-smart-payment-buttons" target="_blank" rel="noopener">PayPal</a></p><h1 id="1-创建PayPal-Sandbox-账户"><a href="#1-创建PayPal-Sandbox-账户" class="headerlink" title="1. 创建PayPal Sandbox 账户"></a>1. 创建PayPal Sandbox 账户</h1><p>首先是创建PayPal Sandbox的账户。因为Sandbox的环境下并不是真正收费的，所以大家可以尽情的测试。</p><p>第一步：申请<a href="[https://developer.paypal.com](https://developer.paypal.com/)">PayPal Develpoer</a>的账号。</p><p>第二步：选择Sandbox环境，创建App。创建完之后会有一个client id，在js里面会使用到：</p><p><img src="/2019/10/18/PayPal/create.png" alt></p><p><img src="/2019/10/18/PayPal/app.png" alt></p><h1 id="2-在web里面调用PayPal"><a href="#2-在web里面调用PayPal" class="headerlink" title="2. 在web里面调用PayPal"></a>2. 在web里面调用PayPal</h1><p>这里需要使用到上一步创建的<code>client id</code>。这里的<code>client-id</code>可以使用<code>sb</code>来作为快捷启动，也可以使用自己的<code>client-id</code>。ps: 不知道他们为什么使用<code>sb</code>，可能国外人不知道sb什么含义。 Anywhere 具体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://www.paypal.com/sdk/js?client-id=sb"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</code>这一行是为了获得最佳Internet Explorer兼容性。</p><p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</code>是为了在移动设备上获得最佳的体验。</p><p>关于<code>https://www.paypal.com/sdk/js</code>需要传递的参数有两个（在官网上看到的解释）：</p><table><thead><tr><th align="center"><strong>Option</strong></th><th align="center"><strong>Example value</strong></th><th align="center"><strong>Default</strong></th><th align="center"><strong>Description</strong></th></tr></thead><tbody><tr><td align="center"><code>client-id</code></td><td align="center"><code>sb</code> or 你申请到的<code>client-id</code></td><td align="center">required</td><td align="center">PayPal REST客户端ID。用于识别PayPal帐户并确定在何处付款。在沙盒中测试时，可以将client-id = sb用作快捷方式。</td></tr><tr><td align="center"><code>currency</code></td><td align="center"><code>AUD</code> <code>USD</code></td><td align="center"><code>USD</code></td><td align="center">收款的默认货币</td></tr></tbody></table><p>如果你需要用澳元的话那就是：<code>https://www.paypal.com/sdk/js?client-id=sb&amp;currency=AUD</code></p><h1 id="3-在HTML中显示PayPal的支付按钮"><a href="#3-在HTML中显示PayPal的支付按钮" class="headerlink" title="3. 在HTML中显示PayPal的支付按钮"></a>3. 在HTML中显示PayPal的支付按钮</h1><p>这里使用的是PayPal集成的js。<code>render</code>所包含的是<code>div</code>的id。也可以使用整个body作为container，比如：<code>.render(&#39;body&#39;)</code>。官方也提供了关于怎么美化button的链接：<a href="https://developer.paypal.com/docs/checkout/troubleshoot/performance/#delayed-render" target="_blank" rel="noopener">Performance</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"paypal-button-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://www.paypal.com/sdk/js?client-id=sb&amp;currency=AUD"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    paypal.Buttons().render(<span class="string">'#paypal-button-container'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>显示结果如下：</p><p><img src="/2019/10/18/PayPal/demo.png" alt></p><h1 id="4-设置交易"><a href="#4-设置交易" class="headerlink" title="4. 设置交易"></a>4. 设置交易</h1><p>当用户点击支付按钮的时候，需要实现<code>createOrder</code>这个function。这个function这里包含了两步：</p><ul><li>首先调用了<code>actions.order.create</code>来初始化交易信息，包含了金额，交易详情等等。</li><li>第二步加载PayPal支付页面。</li></ul><p>具体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"paypal-button-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://www.paypal.com/sdk/js?client-id=sb&amp;currency=AUD"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    paypal.Buttons(&#123;</span><br><span class="line"><span class="javascript">        createOrder: <span class="function"><span class="keyword">function</span>(<span class="params">data, actions</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// Set up the transaction</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> actions.order.create(&#123;</span></span><br><span class="line">                purchase_units: [&#123;</span><br><span class="line">                    amount: &#123;</span><br><span class="line"><span class="javascript">                        currency_code: <span class="string">"AUD"</span>,</span></span><br><span class="line"><span class="javascript">                        value: <span class="string">'0.01'</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">    &#125;).render(<span class="string">'#paypal-button-container'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关于<code>actions.order.create</code>的具体参数可以参照官网：<a href="https://developer.paypal.com/docs/api/orders/v2/#orders_create" target="_blank" rel="noopener">Orders Create</a></p><p>当用户选择支付方式并点击支付按钮后会跳转到支付页面显示如下：</p><p><img src="/2019/10/18/PayPal/pay.png" alt></p><h1 id="支付结果的反馈信息"><a href="#支付结果的反馈信息" class="headerlink" title="支付结果的反馈信息"></a>支付结果的反馈信息</h1><p>当交易完成之后，需要实现<code>onApprove</code> 这个function。这个function调用了<code>actions.order.capture()</code>来获取详细的支付信息，同时告诉用户的支付结果。详细代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"paypal-button-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://www.paypal.com/sdk/js?client-id=sb&amp;currency=AUD"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    paypal.Buttons(&#123;</span><br><span class="line"><span class="javascript">        createOrder: <span class="function"><span class="keyword">function</span>(<span class="params">data, actions</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// Set up the transaction</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> actions.order.create(&#123;</span></span><br><span class="line">                purchase_units: [&#123;</span><br><span class="line">                    amount: &#123;</span><br><span class="line"><span class="javascript">                        currency_code: <span class="string">"AUD"</span>,</span></span><br><span class="line"><span class="javascript">                        value: <span class="string">'0.01'</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        onApprove: <span class="function"><span class="keyword">function</span>(<span class="params">data, actions</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 交易成功</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> actions.order.capture().then(<span class="function"><span class="keyword">function</span>(<span class="params">details</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 显示支付人的姓名</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(details);</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">'Transaction completed by '</span> + details.payer.name.given_name);</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">    &#125;).render(<span class="string">'#paypal-button-container'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>details</code>里面包含了很多信息，包括支付人的名字，支付时间，地址等等。这个包含了太多个人信息，所以打了很多码。。</p><p><img src="/2019/10/18/PayPal/res.png" alt></p><p>有时间会写一下在Android里面怎么使用PayPal的。。</p><p>下载文件：<a href="demo.zip">Download demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;详细讲一下怎么在web里面利用JS使用PayPal。最近找了一些关于支付的API，国内大部分都是微信，支付宝什么的。但是因为微信支付宝申请起来挺麻烦的，所以尝试使用了一下PayPal。PayPal可以作为国际使用支付方式。具体的网址如下：&lt;a href=&quot;https://d
      
    
    </summary>
    
    
      <category term="web" scheme="https://shunyangli.github.io/categories/web/"/>
    
      <category term="PayPal" scheme="https://shunyangli.github.io/categories/web/PayPal/"/>
    
    
      <category term="Frontend" scheme="https://shunyangli.github.io/tags/Frontend/"/>
    
      <category term="JS" scheme="https://shunyangli.github.io/tags/JS/"/>
    
      <category term="PayPal" scheme="https://shunyangli.github.io/tags/PayPal/"/>
    
  </entry>
  
  <entry>
    <title>Google login and calender</title>
    <link href="https://shunyangli.github.io/2019/10/16/Google-login-and-calender/"/>
    <id>https://shunyangli.github.io/2019/10/16/Google-login-and-calender/</id>
    <published>2019-10-16T06:29:12.000Z</published>
    <updated>2019-10-19T07:41:16.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web-使用Google-login和calender"><a href="#Web-使用Google-login和calender" class="headerlink" title="Web 使用Google login和calender"></a>Web 使用Google login和calender</h1><p>网页使用Google第三方登录和使用calender。使用<strong>JavaScript</strong>来实现。</p><h2 id="1-首先在Google-API控制中心创建client-id"><a href="#1-首先在Google-API控制中心创建client-id" class="headerlink" title="1. 首先在Google API控制中心创建client id"></a>1. 首先在Google API控制中心创建client id</h2><p>首先在<a href="(https://console.developers.google.com/project/_/apiui/apis/library)">Google API 控制台</a> 选择或者创建一个项目。</p><p><img src="/2019/10/16/Google-login-and-calender/start.png" alt></p><p>当注册完之后根绝需要添加google API的范围。比如我需要google calendar所以我需要添加google calendar的API。一般是用google calendar选择<code>../auth/calendar.events</code>和<code>../auth/calendar</code></p><p><img src="/2019/10/16/Google-login-and-calender/choose.png" alt></p><p><img src="/2019/10/16/Google-login-and-calender/list.png" alt></p><p>然后<strong>创建 OAuth 客户端 ID</strong>, 选择创建web项目。<em>已获授权的 JavaScript 来源</em>和<em>已获授权的重定向 URI</em>可以写成<code>http://localhost:5000</code>。主要是根据大家的IP和port来确定的。当创建完之后会生成一个<strong>client_id</strong>。</p><p><img src="/2019/10/16/Google-login-and-calender/web.png" alt></p><h2 id="2-具体代码实现"><a href="#2-具体代码实现" class="headerlink" title="2. 具体代码实现"></a>2. 具体代码实现</h2><p><strong>切记在浏览器访问的时候输入的IP地址需要和你申请client id填写的IP相同。比如你申请写的<code>http://localhost:5000</code>，那么你浏览器打开的时候也需要用<code>http://localhost:5000</code>才能正常使用google login。</strong></p><p>首先根绝官方文档来定义CSS的login button的样式：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-tag">body</span> &#123; <span class="attribute">padding</span>: <span class="number">2em</span>; &#125;</span><br><span class="line">    <span class="comment">/* Shared */</span></span><br><span class="line">    <span class="selector-class">.loginBtn</span> &#123;</span><br><span class="line">        <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="comment">/* width: 13em;  - apply for fixed size */</span></span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0.2em</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">15px</span> <span class="number">0</span> <span class="number">46px</span>;</span><br><span class="line">        <span class="attribute">border</span>: none;</span><br><span class="line">        <span class="attribute">text-align</span>: left;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">34px</span>;</span><br><span class="line">        <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">0.2em</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#FFF</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.loginBtn</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">        <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">34px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.loginBtn</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">        <span class="attribute">outline</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.loginBtn</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">        <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">32px</span> <span class="built_in">rgba</span>(0,0,0,0.1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Google */</span></span><br><span class="line">    <span class="selector-class">.loginBtn--google</span> &#123;</span><br><span class="line">        <span class="comment">/*font-family: "Roboto", Roboto, arial, sans-serif;*/</span></span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#DD4B39</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.loginBtn--google</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">        <span class="attribute">border-right</span>: <span class="number">#BB3F30</span> <span class="number">1px</span> solid;</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'https://s3-us-west-2.amazonaws.com/s.cdpn.io/14082/icon_google.png'</span>) <span class="number">6px</span> <span class="number">6px</span> no-repeat;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.loginBtn--google</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line">    <span class="selector-class">.loginBtn--google</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#E74B37</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>然后我们来定义HTML的内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"loginBtn loginBtn--google"</span> <span class="attr">id</span>=<span class="string">"googleLogin"</span>&gt;</span></span><br><span class="line">        Login with Google</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> ο<span class="attr">nclick</span>=<span class="string">"signOut();"</span>&gt;</span>Sign out<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://apis.google.com/js/api:client.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> googleUser = &#123;&#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">initClient</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        gapi.load(<span class="string">'auth2'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">            auth2 = gapi.auth2.init(&#123;</span><br><span class="line"><span class="javascript">                <span class="comment">// 上一步获取的 client_id </span></span></span><br><span class="line"><span class="javascript">                client_id: <span class="string">'104xxxxxxxxxxxx'</span>, </span></span><br><span class="line"><span class="javascript">                cookiepolicy: <span class="string">'single_host_origin'</span>,</span></span><br><span class="line"><span class="javascript">                <span class="comment">// scope 是需要获取的google api的权限</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 可以请求除了默认的'profile' and 'email'之外的数据, 比如这里的calendar</span></span></span><br><span class="line"><span class="javascript">                scope: <span class="string">'profile https://www.googleapis.com/auth/calendar https://www.googleapis.com/auth/calendar.events'</span></span></span><br><span class="line">            &#125;);</span><br><span class="line"><span class="javascript">            <span class="comment">// 当login button被点击之后执行function</span></span></span><br><span class="line"><span class="javascript">            attachSignin(<span class="built_in">document</span>.getElementById(<span class="string">'googleLogin'</span>));</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 当页面load之后初始化client</span></span></span><br><span class="line">    initClient();</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">attachSignin</span>(<span class="params">element</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        auth2.attachClickHandler(element, &#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">googleUser</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 可以查看详细信息</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(googleUser);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> profile = auth2.currentUser.get().getBasicProfile();</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'ID: '</span> + profile.getId());</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'Full Name: '</span> + profile.getName());</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'Given Name: '</span> + profile.getGivenName());</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'Family Name: '</span> + profile.getFamilyName());</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'Image URL: '</span> + profile.getImageUrl());</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'Email: '</span> + profile.getEmail());</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// 这里包含了请求的access_token</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> token = auth2.currentUser.get().getAuthResponse();</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(token);</span></span><br><span class="line"><span class="javascript">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">erroe</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(error, <span class="literal">undefined</span>, <span class="number">2</span>));</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">//注销</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">signOut</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> auth2 = gapi.auth2.getAuthInstance();</span></span><br><span class="line"><span class="javascript">        auth2.signOut().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'用户注销成功'</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Google-calendar-的使用"><a href="#Google-calendar-的使用" class="headerlink" title="Google calendar 的使用"></a>Google calendar 的使用</h1><p><a href="https://developers.google.com/calendar/v3/reference/events/insert#try-it" target="_blank" rel="noopener">Google calendar API</a> 的使用链接。</p><h2 id="获取calendar-list"><a href="#获取calendar-list" class="headerlink" title="获取calendar list"></a>获取calendar list</h2><p>(我们一般是用的calendar id是google login之后的邮箱：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从前端获取到的access_token</span></span><br><span class="line">access_token = <span class="string">'ya29.xxxxxxx'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get the calendar list</span></span><br><span class="line">response = requests.get(</span><br><span class="line">    url = <span class="string">'https://www.googleapis.com/calendar/v3/users/me/calendarList'</span>,</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">        <span class="string">'Authorization'</span>: <span class="string">'Bearer '</span> + access_token</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">response.raise_for_status()</span><br><span class="line">print(response.json())</span><br></pre></td></tr></table></figure><h2 id="获取当前calendar的event-list"><a href="#获取当前calendar的event-list" class="headerlink" title="获取当前calendar的event list"></a>获取当前calendar的event list</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从前端获取到的access_token</span></span><br><span class="line">access_token = <span class="string">'ya29.xxxxxxx'</span></span><br><span class="line">email = <span class="string">'xxx@gmail.com'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取email calendar的event list</span></span><br><span class="line">response = requests.get(</span><br><span class="line">    url = <span class="string">'https://www.googleapis.com/calendar/v3/calendars/'</span> + email + <span class="string">'/events'</span>,</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">        <span class="string">'Authorization'</span>: <span class="string">'Bearer '</span> + access_token</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">response.raise_for_status()</span><br><span class="line">print(response.json())</span><br></pre></td></tr></table></figure><h2 id="添加新的event"><a href="#添加新的event" class="headerlink" title="添加新的event"></a>添加新的event</h2><p>值得注意的地方是需要把<code>EVENT_TEXT</code>转成<code>json</code>的格式。不然会报错。里面会返回event id和一系列有关这个event的东西。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从前端获取到的access_token</span></span><br><span class="line">access_token = <span class="string">'ya29.xxxxxxx'</span></span><br><span class="line">email = <span class="string">'xxx@gmail.com'</span></span><br><span class="line"></span><br><span class="line">EVENT_TEXT = &#123;</span><br><span class="line">    <span class="string">"summary"</span>: <span class="string">"hotel booking"</span>,</span><br><span class="line">    <span class="string">"description"</span>: <span class="string">"make a hotel booking"</span>,</span><br><span class="line">    <span class="string">"end"</span>: &#123;</span><br><span class="line">        <span class="string">"dateTime"</span>: <span class="string">"2019-10-17T23:14:31+11:00"</span>,</span><br><span class="line">        <span class="string">"timeZone"</span>: <span class="string">"Australia/Sydney"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"start"</span>: &#123;</span><br><span class="line">        <span class="string">"dateTime"</span>: <span class="string">"2019-10-17T00:00:00+11:00"</span>,</span><br><span class="line">        <span class="string">"timeZone"</span>: <span class="string">"Australia/Sydney"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">response = requests.post(</span><br><span class="line">    url =<span class="string">'https://www.googleapis.com/calendar/v3/calendars/'</span> + email +<span class="string">'/events'</span>,</span><br><span class="line">    </span><br><span class="line">    data = json.dumps(EVENT_TEXT),</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'Authorization'</span>: <span class="string">'Bearer '</span> + access_token,</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">response.raise_for_status()</span><br><span class="line">print(response.json())</span><br></pre></td></tr></table></figure><h2 id="更新event"><a href="#更新event" class="headerlink" title="更新event"></a>更新event</h2><p>我们可以根绝insert返回的event id来更新这个事件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从前端获取到的access_token</span></span><br><span class="line">access_token = <span class="string">'ya29.xxxxxxx'</span></span><br><span class="line">email = <span class="string">'xxx@gmail.com'</span></span><br><span class="line"></span><br><span class="line">event_id = <span class="string">'xxxx'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变了日期</span></span><br><span class="line">EVENT_TEXT = &#123;</span><br><span class="line">    <span class="string">"summary"</span>: <span class="string">"Hotel"</span>,</span><br><span class="line">    <span class="string">"description"</span>: <span class="string">"make a hotel booking"</span>,</span><br><span class="line">    <span class="string">"end"</span>: &#123;</span><br><span class="line">        <span class="string">"dateTime"</span>: <span class="string">"2019-10-18T23:14:31+11:00"</span>,</span><br><span class="line">        <span class="string">"timeZone"</span>: <span class="string">"Australia/Sydney"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"start"</span>: &#123;</span><br><span class="line">        <span class="string">"dateTime"</span>: <span class="string">"2019-10-18T00:00:00+11:00"</span>,</span><br><span class="line">        <span class="string">"timeZone"</span>: <span class="string">"Australia/Sydney"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新event</span></span><br><span class="line">response = requests.put(</span><br><span class="line">    url =<span class="string">'https://www.googleapis.com/calendar/v3/calendars/'</span> + email +<span class="string">'/events/'</span> + event_id,</span><br><span class="line">    </span><br><span class="line">    data = json.dumps(EVENT_TEXT),</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'Authorization'</span>: <span class="string">'Bearer '</span> + access_token,</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">response.raise_for_status()</span><br><span class="line">print(response.json())</span><br></pre></td></tr></table></figure><h2 id="删除event"><a href="#删除event" class="headerlink" title="删除event"></a>删除event</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从前端获取到的access_token</span></span><br><span class="line">access_token = <span class="string">'ya29.xxxxxxx'</span></span><br><span class="line">email = <span class="string">'xxx@gmail.com'</span></span><br><span class="line"></span><br><span class="line">event_id = <span class="string">'xxxx'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除event</span></span><br><span class="line">response = requests.delete(</span><br><span class="line">    url =<span class="string">'https://www.googleapis.com/calendar/v3/calendars/'</span> + email +<span class="string">'/events/'</span> + event_id,</span><br><span class="line">    </span><br><span class="line">    data = json.dumps(EVENT_TEXT),</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'Authorization'</span>: <span class="string">'Bearer '</span> + access_token,</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">response.raise_for_status()</span><br><span class="line">print(response.json())</span><br></pre></td></tr></table></figure><p>关于calendar还有很多用法，大家可以一起学习学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Web-使用Google-login和calender&quot;&gt;&lt;a href=&quot;#Web-使用Google-login和calender&quot; class=&quot;headerlink&quot; title=&quot;Web 使用Google login和calender&quot;&gt;&lt;/a&gt;Web 使
      
    
    </summary>
    
    
      <category term="Backend" scheme="https://shunyangli.github.io/categories/Backend/"/>
    
      <category term="Google Login" scheme="https://shunyangli.github.io/categories/Backend/Google-Login/"/>
    
      <category term="JS" scheme="https://shunyangli.github.io/categories/Backend/Google-Login/JS/"/>
    
      <category term="web" scheme="https://shunyangli.github.io/categories/Backend/Google-Login/JS/web/"/>
    
    
      <category term="Backend" scheme="https://shunyangli.github.io/tags/Backend/"/>
    
      <category term="Google Login" scheme="https://shunyangli.github.io/tags/Google-Login/"/>
    
      <category term="Frontend" scheme="https://shunyangli.github.io/tags/Frontend/"/>
    
  </entry>
  
  <entry>
    <title>Flask upload files</title>
    <link href="https://shunyangli.github.io/2019/10/11/Flask-upload-files/"/>
    <id>https://shunyangli.github.io/2019/10/11/Flask-upload-files/</id>
    <published>2019-10-11T08:07:31.000Z</published>
    <updated>2019-10-13T06:11:17.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask-upload-files"><a href="#Flask-upload-files" class="headerlink" title="Flask upload files"></a>Flask upload files</h1><p>这个note是关于怎么用flask上传文件。包含了两种不同的上传文件的方式。第一种是通过HTML <code>&lt;form&gt;&lt;/form&gt;</code>直接上传。另一种通过<code>API</code>的办法上传。两种方法都会详细解释。等学会了怎么使用之后，大家可以自己做一个自己的file server。当然现成的file server有很多，比如<code>NextCloud</code>这一类的，都是非常成熟的框架，大家如果不想造轮子可以直接用现成的框架来搭建。</p><h2 id="通过Flask-HTML直接上传"><a href="#通过Flask-HTML直接上传" class="headerlink" title="通过Flask HTML直接上传"></a>通过Flask HTML直接上传</h2><p>上传文件一般只需要三步：</p><ol><li><p>第一步就是定义HTML的文件：</p><p>需要说几点：</p><ul><li>因为是上传文件，所以在form里面必须定义<code>enctype=&quot;multipart/form-data&quot;</code>不然没办法上传文件</li><li>然后是<code>&lt;input&gt;</code>, input 的type一定要是<em>file</em> 才可以选中文件，不然没办法使用。然后是如果想上传多个file的话需要申明<code>multiple</code>才可以选中多个文件同时长传。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"submitI"</span> &gt;</span>Upload Image<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>当<strong>Upload Image</strong> 按钮被点击后，通过request对象上的files获取文件。和以前用request获取表单值一样，使用input字段的name值获取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当input 不是multiple时候可以使用这个，这个表示只上传一个file</span></span><br><span class="line">file = request.files[<span class="string">'file'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当input是multiple的时候表示有多个文件上传</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> request.files.getlist(<span class="string">"file"</span>):</span><br></pre></td></tr></table></figure></li><li><p>使用<code>file.save()</code>保存文件，指定保存的地址及文件名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.save(str(path + filename))</span><br></pre></td></tr></table></figure></li></ol><p>详细HTML代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"submitI"</span> &gt;</span>Upload Image<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>详细Python代码，给大家说一下为什么要用<code>static</code>的文件夹存文件：因为如果flask是在服务器上运行的话，需要访问服务器的资源的时候只有<code>static</code>可以被外部访问，所有一般把照片，js这些文件都存在<code>static</code>的文件夹下，以方便外部调用。：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有两种方法来获取路径</span></span><br><span class="line"><span class="comment"># TODO 第一种是绝对路径</span></span><br><span class="line"><span class="comment"># 得到当前路径</span></span><br><span class="line"><span class="comment"># basedir = os.getcwd()</span></span><br><span class="line"><span class="comment"># target = os.path.join(basedir, 'static/files')</span></span><br><span class="line"><span class="comment"># if not os.path.isdir(target):</span></span><br><span class="line"><span class="comment">#os.mkdir(target)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TODO 第二种是相对路径</span></span><br><span class="line">target = <span class="string">'static/files'</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(target):</span><br><span class="line">    os.mkdir(target)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许上传的类型</span></span><br><span class="line">ALLOWED_EXTENSIONS = &#123;<span class="string">'txt'</span>, <span class="string">'pdf'</span>, <span class="string">'png'</span>, <span class="string">'jpg'</span>, <span class="string">'jpeg'</span>, <span class="string">'gif'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否符合上传文件类型</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allowed_file</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'.'</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">            filename.rsplit(<span class="string">'.'</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/', methods=["POST", "GET"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果&lt;input&gt;设置的是单个文件的话，可以使用下面这行代码直接得到file</span></span><br><span class="line">    <span class="comment"># 可以直接用这行代码替换for语句</span></span><br><span class="line">    <span class="comment"># file = request.files.get('file')</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> request.files.getlist(<span class="string">"file"</span>):</span><br><span class="line">        <span class="comment"># 检查是否符合上传类型</span></span><br><span class="line">        <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">            filename = file.filename</span><br><span class="line">            <span class="comment"># 把路径和文件名链接起来</span></span><br><span class="line">            filepath = <span class="string">"/"</span>.join([target,filename])</span><br><span class="line">            file.save(filepath)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"upload.html"</span>)</span><br><span class="line"></span><br><span class="line">app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>因为之前测试的时候已经上传了一个文件，所有在<code>static/files下面有三个文件</code></p><p><img src="/2019/10/11/Flask-upload-files/upload.png" alt></p><p><img src="/2019/10/11/Flask-upload-files/tree.png" alt></p><h2 id="怎么通过Flask下载文件"><a href="#怎么通过Flask下载文件" class="headerlink" title="怎么通过Flask下载文件"></a>怎么通过Flask下载文件</h2><p>可以直接通过<code>send_file</code>来直接下载文件，这个不好截图，直接上代码吧，亲测可以执行，绝对能用。具体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> send_from_directory</span><br><span class="line"><span class="meta">@app.route('/download/&lt;filename&gt;', methods=["GET", "POST"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(filename)</span>:</span></span><br><span class="line">    filepath = <span class="string">"static/files/"</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># as_attachment=True 一定要写，不然会变成打开，而不是下载</span></span><br><span class="line">        <span class="comment"># 这个是根据文件夹来send file的， 所以你要下载什么文件就要使用什么路径</span></span><br><span class="line">        <span class="comment"># 比如我们使用的是 "static/files/"</span></span><br><span class="line">        <span class="keyword">return</span> send_from_directory(filepath, filename,  as_attachment=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br></pre></td></tr></table></figure><h1 id="Flask-API-upload-files"><a href="#Flask-API-upload-files" class="headerlink" title="Flask API upload files"></a>Flask API upload files</h1><p>通过API的方式开上传文件。在使用API上传文件的时候需要在前端用到<code>FormData</code>。<code>FormData</code>的作用就是异步传输二进制文件。<code>FormData</code>的使用场景就是表单提交。</p><p>怎么使用<code>FormData</code>：</p><ol><li><p>首先创建一下<code>FormData</code>对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br></pre></td></tr></table></figure></li><li><p>把HTML表单用来初始化<code>FormData</code>，以及<code>FormData</code>的一些常见用法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(<span class="built_in">document</span>.getElementById(<span class="string">"form"</span>));</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 这样formData就储存了username和password</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 可以通过get的方式得到value</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> username = formData.get(<span class="string">"username"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> password = formData.get(<span class="string">"password"</span>)</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 也可以使用append的方式添加value</span></span></span><br><span class="line"><span class="javascript">    formData.append(<span class="string">"token"</span>, <span class="string">"12334"</span>)</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 可以通过set修改value</span></span></span><br><span class="line"><span class="javascript">    formData.set(<span class="string">"token"</span>, <span class="string">"1"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 可以通过delete删除元素</span></span></span><br><span class="line"><span class="javascript">    formData.delete(<span class="string">"token"</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Flask-RESTful-API"><a href="#Flask-RESTful-API" class="headerlink" title="Flask-RESTful API"></a>Flask-RESTful API</h2><p>后端Flask我们依然是通过<code>reqparse.RequestParser()</code>的方式获取上传的文件。前端则是通过<code>FormData</code>的方式来上传文件。</p><p>详细代码：</p><ul><li>如果想上传多个文件在<code>add_argument</code>的时候需要声明<code>action=&#39;append&#39;</code>才能获取到多个文件否则只能获取一个文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, make_response, request</span><br><span class="line"><span class="keyword">from</span> flask_restplus <span class="keyword">import</span> Api, reqparse, abort, Resource</span><br><span class="line"><span class="keyword">from</span> werkzeug.datastructures <span class="keyword">import</span> FileStorage</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">api = Api(app)</span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = <span class="string">'WHATEVER'</span></span><br><span class="line"></span><br><span class="line">basedir = os.getcwd()</span><br><span class="line"></span><br><span class="line">upload = api.namespace(<span class="string">'upload'</span>, description=<span class="string">"Upload files API"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@upload.route("/", strict_slashes=False)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upload</span><span class="params">(Resource)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        parser = reqparse.RequestParser()</span><br><span class="line">        parser.add_argument(<span class="string">'file'</span>, location=<span class="string">'files'</span>,type=FileStorage, required=<span class="literal">True</span>, action=<span class="string">'append'</span>)</span><br><span class="line"></span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        uploaded_file = args.get(<span class="string">'file'</span>)</span><br><span class="line"></span><br><span class="line">        target = os.path.join(basedir, <span class="string">'static/files'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(target):</span><br><span class="line">            os.mkdir(target)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> uploaded_file:</span><br><span class="line">            filepath = <span class="string">"/"</span>.join([target,file.filename])</span><br><span class="line">            file.save(filepath)</span><br><span class="line"></span><br><span class="line">app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="JQuery-upload-files"><a href="#JQuery-upload-files" class="headerlink" title="JQuery upload files"></a>JQuery upload files</h3><p>前端则使用了<code>JQuery</code>来上传文件。使用的是<code>FormData</code>的格式来上传文件。详细代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"formContent"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">multiple</span> <span class="attr">required</span> <span class="attr">id</span>=<span class="string">"upload"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"submitI"</span> &gt;</span>Upload Image<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#formContent"</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line">        e.preventDefault();</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> formdata = <span class="keyword">new</span> FormData(<span class="keyword">this</span>);</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">            url: <span class="string">"http://127.0.0.1:5000/upload/"</span>,</span></span><br><span class="line"><span class="javascript">            type: <span class="string">"POST"</span>,</span></span><br><span class="line">            data: formdata,</span><br><span class="line"><span class="javascript">            mimeTypes:<span class="string">"multipart/form-data"</span>,</span></span><br><span class="line"><span class="javascript">            contentType: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">            cache: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">            processData: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">            success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(data);</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            error: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(data);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/10/11/Flask-upload-files/Aupload.png" alt></p><p><img src="/2019/10/11/Flask-upload-files/Atree.png" alt></p><h3 id="Flask-API-download-files"><a href="#Flask-API-download-files" class="headerlink" title="Flask API download files"></a>Flask API download files</h3><p>关于通过flask api下载文件的方式和前面讲的基本上差不多，就是改成了API的写法。详细代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, make_response, request</span><br><span class="line"><span class="keyword">from</span> flask_restplus <span class="keyword">import</span> Api, reqparse, abort, Resource</span><br><span class="line"><span class="keyword">from</span> werkzeug.datastructures <span class="keyword">import</span> FileStorage</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">api = Api(app)</span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = <span class="string">'WHATEVER'</span></span><br><span class="line"></span><br><span class="line">basedir = os.getcwd()</span><br><span class="line"></span><br><span class="line">upload = api.namespace(<span class="string">'upload'</span>, description=<span class="string">"Upload files API"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@upload.route("/", strict_slashes=False)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upload</span><span class="params">(Resource)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        parser = reqparse.RequestParser()</span><br><span class="line">        parser.add_argument(<span class="string">'file'</span>, location=<span class="string">'files'</span>,type=FileStorage, required=<span class="literal">True</span>, action=<span class="string">'append'</span>)</span><br><span class="line"></span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        uploaded_file = args.get(<span class="string">'file'</span>)</span><br><span class="line"></span><br><span class="line">        target = os.path.join(basedir, <span class="string">'static/files'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(target):</span><br><span class="line">            os.mkdir(target)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> uploaded_file:</span><br><span class="line">            filepath = <span class="string">"/"</span>.join([target,file.filename])</span><br><span class="line">            file.save(filepath)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        parser = reqparse.RequestParser()</span><br><span class="line">        parser.add_argument(<span class="string">'filename'</span>, type=str)</span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        filename = args.get(<span class="string">"filename"</span>)</span><br><span class="line"></span><br><span class="line">        filepath = <span class="string">"static/files/"</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># as_attachment=True 一定要写，不然会变成打开，而不是下载</span></span><br><span class="line">            <span class="comment"># 这个是根据文件夹来send file的， 所以你要下载什么文件就要使用什么路径</span></span><br><span class="line">            <span class="comment"># 比如我们使用的是 "static/files/"</span></span><br><span class="line">            <span class="keyword">return</span> send_from_directory(filepath, filename,  as_attachment=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> make_response(<span class="string">"Error"</span>, <span class="number">403</span>)</span><br><span class="line"></span><br><span class="line">app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>在浏览器内输入以下命令就可以开始下载文件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:5000/upload?filename=sqlmap.pdf</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Flask-upload-files&quot;&gt;&lt;a href=&quot;#Flask-upload-files&quot; class=&quot;headerlink&quot; title=&quot;Flask upload files&quot;&gt;&lt;/a&gt;Flask upload files&lt;/h1&gt;&lt;p&gt;这个note
      
    
    </summary>
    
    
      <category term="Backend" scheme="https://shunyangli.github.io/categories/Backend/"/>
    
      <category term="API" scheme="https://shunyangli.github.io/categories/Backend/API/"/>
    
      <category term="JQuery" scheme="https://shunyangli.github.io/categories/Backend/API/JQuery/"/>
    
    
      <category term="Flask" scheme="https://shunyangli.github.io/tags/Flask/"/>
    
      <category term="API" scheme="https://shunyangli.github.io/tags/API/"/>
    
      <category term="Upload file" scheme="https://shunyangli.github.io/tags/Upload-file/"/>
    
  </entry>
  
  <entry>
    <title>Flask API</title>
    <link href="https://shunyangli.github.io/2019/10/09/Flask-API/"/>
    <id>https://shunyangli.github.io/2019/10/09/Flask-API/</id>
    <published>2019-10-09T12:08:04.000Z</published>
    <updated>2019-10-19T07:40:50.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask-API"><a href="#Flask-API" class="headerlink" title="Flask API"></a>Flask API</h1><p>给大家分享一下<code>flask api</code> 和 <a href="https://flask-restful.readthedocs.io/en/latest/" target="_blank" rel="noopener">Flask-RESTful API </a> 的两种不同用法。。首先API只会返回json的类型，不会返回HTML。API一般适用于前后端分离的情况。Flask API的实现方式有两种。第一种就是不用<code>flask_restplus</code>。第二种是用<code>flask_restplus</code>。首先给大家说一下不用<code>flask_restplus</code>怎么写。</p><h2 id="不使用-flask-restplus"><a href="#不使用-flask-restplus" class="headerlink" title="不使用 flask_restplus"></a>不使用 flask_restplus</h2><p>在不适用<code>flask_restplus</code>的情况下我们可以直接使用route的形式来写API。只是把<code>return render_template</code>改成了<code>return jsonify</code> 来返回一个json类型的数据。可以根据不同的request的方式(GET, POST, DELETE)可以处理不同的事情，比如DELETE可以用来删除数据， POST可以添加数据，GET可以获取数据。具体实现方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># SECRET_KEY 可以设置为任意的string</span></span><br><span class="line">app.config[<span class="string">"SECRET_KEY"</span>] = <span class="string">"WHATEVER"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index', methods=["POST","GET","DELETE"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"GET"</span>:</span><br><span class="line">        username = request.args.get(<span class="string">"username"</span>)</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">"GET"</span>: username&#125;)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        username = request.args.get(<span class="string">"username"</span>)</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">"POST"</span>: username&#125;)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"DELETE"</span>:</span><br><span class="line">        username = request.args.get(<span class="string">"username"</span>)</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">"DELETE"</span>: username&#125;)</span><br><span class="line"></span><br><span class="line">app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>GET 请求测试如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET "http://127.0.0.1:5000/index?username=admin" -H "accept: application/json"</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"GET"</span>: <span class="string">"admin"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>POST 请求测试如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST "http://127.0.0.1:5000/index?username=admin" -H "accept: application/json"</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"POST"</span>: <span class="string">"admin"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DELETE 请求测试如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X DELETE "http://127.0.0.1:5000/index?username=admin" -H "accept: application/json"</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"DELETE"</span>: <span class="string">"admin"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用flask-restplus"><a href="#使用flask-restplus" class="headerlink" title="使用flask_restplus"></a>使用flask_restplus</h2><p>Flask-RESTful 提供了 reqparse 一种类似 argparse 参数解析机制以简化参数处理。所以处理请求数据的时候和Flask不太一样。<code>parser = reqparse.RequestParser():</code> reqparse使用RequestParser() 可以从 flask.Request.values，以及 flask.Request.json 解析值。这里创建了一个解析对象parser。<code>parser.add_argument(&#39;task&#39;)：</code>向parser对象中添加你要关注的命令行参数和选项，每一个add_argument方法对应一个你要关注的参数或选项。<code>parser.parse_args()：</code>调用parse_args()方法进行解析，解析成功之后即可使用。<code>POST, GET, DELETE</code>获取参数的方式一样。在定义API的时候可以是用<code>@api.param</code>添加参数，在web端测试的时候比较方便。<code>@app.doc(description=&#39;xx&#39;)</code>添加对这个API的描述。<code>@app.response(200,&#39;success&#39;)</code>定义路由code的信息，普遍是用的是200，404，400，403等等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, make_response, request</span><br><span class="line"><span class="keyword">from</span> flask_restplus <span class="keyword">import</span> Api, reqparse, abort, Resource</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">api = Api(app)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = <span class="string">'WHATEVER'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@api.route('/login')</span></span><br><span class="line"><span class="meta">@api.param('username')</span></span><br><span class="line"><span class="meta">@api.doc(description="This is test")</span></span><br><span class="line"><span class="meta">@api.response(200, 'Success')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span><span class="params">(Resource)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">()</span>:</span></span><br><span class="line">        parser = reqparse.RequestParser()</span><br><span class="line">        parser.add_argument(<span class="string">'username'</span>, type=str)</span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        username = args.get(<span class="string">"username"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果结果正确可以直接make_response</span></span><br><span class="line">        <span class="comment"># 如果不正确可以用abort</span></span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">"admin"</span>:</span><br><span class="line">            <span class="keyword">return</span> make_response(jsonify(&#123;<span class="string">"POST"</span>: username&#125;),<span class="number">200</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            abort(<span class="number">400</span>, <span class="string">"username not currect"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">()</span>:</span></span><br><span class="line">        parser = reqparse.RequestParser()</span><br><span class="line">        parser.add_argument(<span class="string">'username'</span>, type=str)</span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        username = args.get(<span class="string">"username"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">"admin"</span>:</span><br><span class="line">            <span class="keyword">return</span> make_response(jsonify(&#123;<span class="string">"GET"</span>: username&#125;),<span class="number">200</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            abort(<span class="number">400</span>, <span class="string">"username not currect"</span>)</span><br><span class="line"></span><br><span class="line">app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>GET 请求测试：</p><p>API的请求方法和flask不太一样，需要 <code>-d 加上参数</code>， POST请求也是一样</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET "http://127.0.0.1:5000/login" -H "accept: application/json" -d "username=admin"</span><br></pre></td></tr></table></figure><p>请求结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"GET"</span>: <span class="string">"admin"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>POST 请求测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST "http://127.0.0.1:5000/login" -H "accept: application/json" -d "username=admin"</span><br></pre></td></tr></table></figure><p>请求结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"POST"</span>: <span class="string">"admin"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给大家看一下<code>abort</code>的显示结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"username not currect"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者大家可以直接打开<code>http://127.0.0.1:5000</code>可以显示界面来测试。 如下图所示： </p><p><img src="/2019/10/09/Flask-API/s.png" alt></p><h1 id="前端请求API"><a href="#前端请求API" class="headerlink" title="前端请求API"></a>前端请求API</h1><p>昨天写的太晚就先睡了，今天给补上怎么用<code>AJAX</code>也就是前端来请求API数据的。大家可以自行了解一下<code>AJAX</code>的function什么的，demo用的是<code>JQuery</code>中的<code>AJAX</code>。因为牵涉到了跨域请求，所以后端也稍微有一点改变。需要用到<code>flask_cors</code>来解决这个问题。只需要在上面的Python代码加两行代码就OK了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS</span><br><span class="line">...... <span class="comment"># 这些是初始化app部分</span></span><br><span class="line">CORS(app)</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>如果不加<code>CROS(app)</code>的话会在浏览器的调试<code>Console</code>出现以下报错：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access to XMLHttpRequest at <span class="string">'http://127.0.0.1:5000/login?username=admi'</span> <span class="keyword">from</span> origin <span class="string">'null'</span> has been blocked by CORS policy: No <span class="string">'Access-Control-Allow-Origin'</span> header is present on the requested resource.</span><br></pre></td></tr></table></figure><p>前端代码具体实现如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    $.ajax (&#123;</span></span><br><span class="line"><span class="javascript">        url: <span class="string">'http://127.0.0.1:5000/login'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            username: <span class="string">"admin"</span></span></span><br><span class="line">        &#125;, </span><br><span class="line"><span class="javascript">        error: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// data 包含了整个的错误信息</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// data.status 指的是返回的错误代码，比如400</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// data.responseJSON.message 指返回的错误信息， username not currect</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"ERROR: "</span>, data)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        type: <span class="string">"GET"</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Flask-API&quot;&gt;&lt;a href=&quot;#Flask-API&quot; class=&quot;headerlink&quot; title=&quot;Flask API&quot;&gt;&lt;/a&gt;Flask API&lt;/h1&gt;&lt;p&gt;给大家分享一下&lt;code&gt;flask api&lt;/code&gt; 和 &lt;a href=&quot;h
      
    
    </summary>
    
    
      <category term="Backend" scheme="https://shunyangli.github.io/categories/Backend/"/>
    
      <category term="API" scheme="https://shunyangli.github.io/categories/Backend/API/"/>
    
    
      <category term="Flask" scheme="https://shunyangli.github.io/tags/Flask/"/>
    
      <category term="API" scheme="https://shunyangli.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>Flask Mail</title>
    <link href="https://shunyangli.github.io/2019/10/08/Flask-Mail/"/>
    <id>https://shunyangli.github.io/2019/10/08/Flask-Mail/</id>
    <published>2019-10-08T07:24:57.000Z</published>
    <updated>2019-10-27T06:13:24.513Z</updated>
    
    <content type="html"><![CDATA[<p>Flask mail的使用教程，包括发送HTML，附件等等。Flask mail一般是用来做注册时候的邮箱验证，或者改密码的时候的验证，还有就是一些预定信息的通知，或者是tax的一些内容。当然网上的教程很多，但是大部分都不够全面，有的是基础，有的是加深，所以我打算在这里做一个关于flask mail尽量全面的教程。</p><h1 id="安装-Flask-Mail"><a href="#安装-Flask-Mail" class="headerlink" title="安装 Flask Mail"></a>安装 Flask Mail</h1><p>如果大家没有使用过flask mail，需要先用pip3安装一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install flask_mail</span><br></pre></td></tr></table></figure><h1 id="Flask-Mail-的配置"><a href="#Flask-Mail-的配置" class="headerlink" title="Flask Mail 的配置"></a>Flask Mail 的配置</h1><table><thead><tr><th align="center"><strong>配置</strong></th><th align="center"><strong>默认值</strong></th><th align="center"><strong>功能</strong></th></tr></thead><tbody><tr><td align="center"><strong>MAIL_SERVER</strong></td><td align="center">localhost</td><td align="center">邮件服务器</td></tr><tr><td align="center"><strong>MAIL_PORT</strong></td><td align="center">25</td><td align="center">邮件端口（一般是465）</td></tr><tr><td align="center"><strong>MAIL_USE_TLS</strong></td><td align="center">False</td><td align="center">是否使用TLS协议（一般不使用）</td></tr><tr><td align="center"><strong>MAIL_USE_SSL</strong></td><td align="center">False</td><td align="center">是否使用SSL协议（大多数使用）</td></tr><tr><td align="center"><strong>MAIL_DEBUG</strong></td><td align="center">app.debug</td><td align="center">是否为DEBUG模式，打印调试消息（一般默认开启）</td></tr><tr><td align="center"><strong>MAIL_USERNAME</strong></td><td align="center">None</td><td align="center">用户名</td></tr><tr><td align="center"><strong>MAIL_PASSWORD</strong></td><td align="center">None</td><td align="center">密码 or 授权码</td></tr><tr><td align="center"><strong>MAIL_DEFAULT_SENDER</strong></td><td align="center">None</td><td align="center">默认发送者</td></tr><tr><td align="center"><strong>MAIL_MAX_EMAILS</strong></td><td align="center">None</td><td align="center">一次连接中的发送邮件的上限</td></tr><tr><td align="center"><strong>MAIL_ASCII_ATTACHMENTS</strong></td><td align="center">False</td><td align="center">如果 MAIL_ASCII_ATTACHMENTS 设置成 True 的话，文件名将会转换成 ASCII 的。一般用于添加附件。</td></tr></tbody></table><p>大部分情况下我们只需要设置<code>MAIL_USE_TLS</code>, <code>MAIL_USE_SSL</code>, <code>MAIL_USERNAME</code>, <code>MAIL_PASSWORD</code>, <code>MAIL_DEFAULT_SENDER</code>这些就可以了</p><h1 id="使用Flask-Mail"><a href="#使用Flask-Mail" class="headerlink" title="使用Flask Mail"></a>使用Flask Mail</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Mail, Message</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置邮件服务器</span></span><br><span class="line"><span class="comment"># 如果是163邮箱的话是: smtp.163.com</span></span><br><span class="line"><span class="comment"># 如果是gmail邮箱的话是: smtp.gamil.com</span></span><br><span class="line"><span class="comment"># 如果是自己注册的域名邮箱的话，在购买域名邮箱的时候会给特定的server</span></span><br><span class="line">app.config[<span class="string">'MAIL_SERVER'</span>] = <span class="string">'smtp.qq.com'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 端口要根据设置来改，一般是用465</span></span><br><span class="line">app.config[<span class="string">'MAIL_PORT'</span>] = <span class="number">465</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用ssl传输协议，普遍是用ssl</span></span><br><span class="line">app.config[<span class="string">'MAIL_USE_SSL'</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置邮件的用户名，只需要@xxqq.com前面的内容，不需要包含@xx.com</span></span><br><span class="line">app.config[<span class="string">'MAIL_USERNAME'</span>] = <span class="string">'123456'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在qq邮件里面，这个密码是指的授权码!</span></span><br><span class="line"><span class="comment"># 不是密码，一定要授权码，一般是16位的字符</span></span><br><span class="line"><span class="comment"># 如果是gmail或者别的可以直接是用密码</span></span><br><span class="line">app.config[<span class="string">'MAIL_PASSWORD'</span>] = <span class="string">'aaaaaaaaaaaaaaaa'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认发送的邮箱，需要包含@xx.com</span></span><br><span class="line">app.config[<span class="string">'MAIL_DEFAULT_SENDER'</span>] = <span class="string">'123456@qq.com'</span></span><br><span class="line"></span><br><span class="line">mail = Mail(app)</span><br></pre></td></tr></table></figure><h2 id="怎么使用HTML模板"><a href="#怎么使用HTML模板" class="headerlink" title="怎么使用HTML模板"></a>怎么使用HTML模板</h2><p>大部分时候不管发送邮件验证还是什么，HTML的模板都是不变的，只是改变了里面的内容，所以我们先说一下怎么使用HTML模板来发送，最主要的一个function就是<code>render_template</code>这个函数，因为flask使用的是<strong><em>Jinja2</em></strong>的模板，<code>render_template</code>函数可以把Jinja2的模板转义成string的格式。所以我们用的<code>return render_template</code>就是把HTML转成string，然后发回给浏览器。</p><p>我们用Jinja2在templates的文件夹下定义一个HTML文件叫<code>hello.html</code>, 这样我们就可以传进来参数，来修改username。具体的使用方法下面两种发送方式里面都有例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;Hello &#123;&#123; username &#125;&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h2 id="不使用异步发送"><a href="#不使用异步发送" class="headerlink" title="不使用异步发送"></a>不使用异步发送</h2><p>Flask mail可以是用异步发送，可以不适用，首先讲一下不使用异步发送的做法。也可以用<code>render_template</code>的方法来修改<code>msg.html</code>的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># recipients是list，可以添加多个收件人</span></span><br><span class="line"><span class="comment"># sender 是发件人</span></span><br><span class="line"><span class="comment"># Message第一个变量Hello是邮件的标题</span></span><br><span class="line">msg = Message(<span class="string">'Hello'</span>, sender=<span class="string">'123456@qq.com'</span>, recipients=[<span class="string">'123456@qq.com'</span>])</span><br><span class="line">msg.body = <span class="string">'Hello'</span></span><br><span class="line"><span class="comment"># HTML的内容可以直接写</span></span><br><span class="line">msg.html = <span class="string">"&lt;h1&gt;Hello world&lt;/h1&gt;"</span></span><br><span class="line"><span class="comment"># 也可以用render_template</span></span><br><span class="line">msg.html = render_template(<span class="string">'hello.html'</span>,username=<span class="string">'xxx'</span>)</span><br><span class="line">mail.send(msg)</span><br></pre></td></tr></table></figure><p>如果配置什么都没有错误的话可以直接发送出去了。</p><h2 id="使用异步发送"><a href="#使用异步发送" class="headerlink" title="使用异步发送"></a>使用异步发送</h2><p>从电子邮件发送开始，直到电子邮件交付后，给浏览器发回其响应，在整个过程中，Web服务器会一直阻塞。如果我们试图发送电子邮件到一个服务器是缓慢的，所以使用多线程异步发送电子邮件可以避免处理请求过程中不必要的延迟，将发送电子邮件的函数使用Thread来运行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异步发送function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">async_start</span><span class="params">(app, msg)</span>:</span></span><br><span class="line">    <span class="comment"># 获取当前程序的上下文</span></span><br><span class="line">    <span class="keyword">with</span> app.app_context():</span><br><span class="line">        <span class="comment"># 发送邮件</span></span><br><span class="line">        mail.send(msg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义发送函数, message的配置和上面讲的一样</span></span><br><span class="line"><span class="comment"># **kwargs 指传进来的参数, 可以传多个参数进来。eg: username = 'xxx', link = 'xxx.com'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(to, subject, template, **args)</span>:</span></span><br><span class="line">    msg = Message(subject, sender = <span class="string">'123456@qq.com'</span>, recipients=[to])</span><br><span class="line">    msg.html = render_template(template, **args)</span><br><span class="line">    thread = Thread(target=async_start, args=[app, msg])</span><br><span class="line">    thread.start()</span><br><span class="line">    <span class="comment"># 返回调用的结果</span></span><br><span class="line">    <span class="keyword">return</span> thread</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 调用send_mail</span></span><br><span class="line"><span class="comment"># 第一个参数是收件人，第二个是标题，第三个是html的名字，第四个是render_template里面需要包含的变量（相当于render_template('hello.html', username='xxx')）</span></span><br><span class="line"><span class="meta">@app.route('/send')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span><span class="params">()</span>:</span></span><br><span class="line">  send(<span class="string">'123456@qq.com'</span>, <span class="string">'Hello world'</span>, <span class="string">'hello.html'</span>, username=<span class="string">'xxx'</span>)</span><br></pre></td></tr></table></figure><h1 id="关于Flask-Mail发送附件"><a href="#关于Flask-Mail发送附件" class="headerlink" title="关于Flask Mail发送附件"></a>关于Flask Mail发送附件</h1><p>当flask mail需要发送附件的时候，如果MAIL_ASCII_ATTACHMENTS 设置成True 的话，文件名将会转换成ASCII 的。 当文件名是以UTF-8 编码的时候，使用邮件转发的时候会修改邮件内容并且混淆Content-Disposition 描述，这个时候MAIL_ASCII_ATTACHMENTS 配置项是十分有用的。转换成ASCII 的基本方式就是对non-ASCII 字符的去除。任何一个unicode 字符能够被NFKD 分解成一个或者多个ASCII 字符。</p><p><strong>发送照片：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> app.open_resource(<span class="string">"image.png"</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    msg.attach(<span class="string">"image.png"</span>, <span class="string">"image/png"</span>, fp.read())</span><br></pre></td></tr></table></figure><p><strong>发送PDF：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> app.open_resource(<span class="string">'xx.pdf'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        msg.attach(<span class="string">'xx.pdf'</span>, <span class="string">"application/pdf"</span>, fp.read())</span><br></pre></td></tr></table></figure><p><strong><em>注：如果想在HTML里面使用css，需要自己在<code>&lt;style&gt;&lt;/style&gt;</code>里面写css，不可以直接用bootstrap这些框架。</em></strong></p><p><strong><a href="demo.zip">demo</a> 文件提供下载。</strong></p><h1 id="关于怎么使用Gmail"><a href="#关于怎么使用Gmail" class="headerlink" title="关于怎么使用Gmail"></a>关于怎么使用Gmail</h1><ol><li>首先开启安全性较低的应用的访问权限 <a href="https://myaccount.google.com/lesssecureapps" target="_blank" rel="noopener">URL</a></li></ol><p><img src="/2019/10/08/Flask-Mail/less.png" alt></p><ol start="2"><li>启用<strong>IMAP</strong> <a href="https://mail.google.com/mail/#settings/fwdandpop" target="_blank" rel="noopener">URL</a>:</li></ol><p><img src="/2019/10/08/Flask-Mail/enable.png" alt></p><h1 id="关于怎么使用QQ邮箱"><a href="#关于怎么使用QQ邮箱" class="headerlink" title="关于怎么使用QQ邮箱"></a>关于怎么使用QQ邮箱</h1><ol><li>首先开启<strong><em>IMAP/SMTP服务</em></strong>。在邮箱”设置-&gt;账户“ 里面设置。</li></ol><p><img src="/2019/10/08/Flask-Mail/qq.png" alt></p><ol start="2"><li>需要生成授权码，也在同一个页面</li></ol><p><img src="/2019/10/08/Flask-Mail/ma.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Flask mail的使用教程，包括发送HTML，附件等等。Flask mail一般是用来做注册时候的邮箱验证，或者改密码的时候的验证，还有就是一些预定信息的通知，或者是tax的一些内容。当然网上的教程很多，但是大部分都不够全面，有的是基础，有的是加深，所以我打算在这里做一
      
    
    </summary>
    
    
      <category term="Backend" scheme="https://shunyangli.github.io/categories/Backend/"/>
    
    
      <category term="Flask" scheme="https://shunyangli.github.io/tags/Flask/"/>
    
      <category term="Mail" scheme="https://shunyangli.github.io/tags/Mail/"/>
    
  </entry>
  
  <entry>
    <title>How to use hexo</title>
    <link href="https://shunyangli.github.io/2019/10/07/How-to-use-hexo/"/>
    <id>https://shunyangli.github.io/2019/10/07/How-to-use-hexo/</id>
    <published>2019-10-07T03:19:00.000Z</published>
    <updated>2019-10-07T03:21:48.954Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="Frontend" scheme="https://shunyangli.github.io/categories/Frontend/"/>
    
    
      <category term="hexo" scheme="https://shunyangli.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
