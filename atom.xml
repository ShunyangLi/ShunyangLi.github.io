<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Charles&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-10T03:41:31.965Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Charles</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flask API</title>
    <link href="http://yoursite.com/2019/10/09/Flask-API/"/>
    <id>http://yoursite.com/2019/10/09/Flask-API/</id>
    <published>2019-10-09T12:08:04.000Z</published>
    <updated>2019-10-10T03:41:31.965Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask-API"><a href="#Flask-API" class="headerlink" title="Flask API"></a>Flask API</h1><p>给大家分享一下学习flask api的note。首先API只会返回json的类型，不会返回HTML。API一般适用于前后端分离的情况。Flask API的实现方式有两种。第一种就是不用<code>flask_restplus</code>。第二种是用<code>flask_restplus</code>。首先给大家说一下不用<code>flask_restplus</code>怎么写。</p><h2 id="不使用-flask-restplus"><a href="#不使用-flask-restplus" class="headerlink" title="不使用 flask_restplus"></a>不使用 flask_restplus</h2><p>在不适用<code>flask_restplus</code>的情况下我们可以直接使用route的形式来写API。只是把<code>return render_template</code>改成了<code>return jsonify</code> 来返回一个json类型的数据。可以根据不同的request的方式(GET, POST, DELETE)可以处理不同的事情，比如DELETE可以用来删除数据， POST可以添加数据，GET可以获取数据。具体实现方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># SECRET_KEY 可以设置为任意的string</span></span><br><span class="line">app.config[<span class="string">"SECRET_KEY"</span>] = <span class="string">"WHATEVER"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index', methods=["POST","GET","DELETE"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"GET"</span>:</span><br><span class="line">        username = request.args.get(<span class="string">"username"</span>)</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">"GET"</span>: username&#125;)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        username = request.args.get(<span class="string">"username"</span>)</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">"POST"</span>: username&#125;)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"DELETE"</span>:</span><br><span class="line">        username = request.args.get(<span class="string">"username"</span>)</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">"DELETE"</span>: username&#125;)</span><br><span class="line"></span><br><span class="line">app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>GET 请求测试如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET "http://127.0.0.1:5000/index?username=admin" -H "accept: application/json"</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"GET"</span>: <span class="string">"admin"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>POST 请求测试如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST "http://127.0.0.1:5000/index?username=admin" -H "accept: application/json"</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"POST"</span>: <span class="string">"admin"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DELETE 请求测试如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X DELETE "http://127.0.0.1:5000/index?username=admin" -H "accept: application/json"</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"DELETE"</span>: <span class="string">"admin"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用flask-restplus"><a href="#使用flask-restplus" class="headerlink" title="使用flask_restplus"></a>使用flask_restplus</h2><p>Flask-RESTful 提供了 reqparse 一种类似 argparse 参数解析机制以简化参数处理。所以处理请求数据的时候和Flask不太一样。<code>parser = reqparse.RequestParser():</code> reqparse使用RequestParser() 可以从 flask.Request.values，以及 flask.Request.json 解析值。这里创建了一个解析对象parser。<code>parser.add_argument(&#39;task&#39;)：</code>向parser对象中添加你要关注的命令行参数和选项，每一个add_argument方法对应一个你要关注的参数或选项。<code>parser.parse_args()：</code>调用parse_args()方法进行解析，解析成功之后即可使用。<code>POST, GET, DELETE</code>获取参数的方式一样。在定义API的时候可以是用<code>@api.param</code>添加参数，在web端测试的时候比较方便。<code>@app.doc(description=&#39;xx&#39;)</code>添加对这个API的描述。<code>@app.response(200,&#39;success&#39;)</code>定义路由code的信息，普遍是用的是200，404，400，403等等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, make_response, request</span><br><span class="line"><span class="keyword">from</span> flask_restplus <span class="keyword">import</span> Api, reqparse, abort, Resource</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">api = Api(app)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = <span class="string">'WHATEVER'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@api.route('/login')</span></span><br><span class="line"><span class="meta">@api.param('username')</span></span><br><span class="line"><span class="meta">@api.doc(description="This is test")</span></span><br><span class="line"><span class="meta">@api.response(200, 'Success')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span><span class="params">(Resource)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">()</span>:</span></span><br><span class="line">        parser = reqparse.RequestParser()</span><br><span class="line">        parser.add_argument(<span class="string">'username'</span>, type=str)</span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        username = args.get(<span class="string">"username"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果结果正确可以直接make_response</span></span><br><span class="line">        <span class="comment"># 如果不正确可以用abort</span></span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">"admin"</span>:</span><br><span class="line">            <span class="keyword">return</span> make_response(jsonify(&#123;<span class="string">"POST"</span>: username&#125;),<span class="number">200</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            abort(<span class="number">400</span>, <span class="string">"username not currect"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">()</span>:</span></span><br><span class="line">        parser = reqparse.RequestParser()</span><br><span class="line">        parser.add_argument(<span class="string">'username'</span>, type=str)</span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        username = args.get(<span class="string">"username"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">"admin"</span>:</span><br><span class="line">            <span class="keyword">return</span> make_response(jsonify(&#123;<span class="string">"GET"</span>: username&#125;),<span class="number">200</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            abort(<span class="number">400</span>, <span class="string">"username not currect"</span>)</span><br><span class="line"></span><br><span class="line">app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>GET 请求测试：</p><p>API的请求方法和flask不太一样，需要 <code>-d 加上参数</code>， POST请求也是一样</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET "http://127.0.0.1:5000/login" -H "accept: application/json" -d "username=admin"</span><br></pre></td></tr></table></figure><p>请求结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"GET"</span>: <span class="string">"admin"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>POST 请求测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST "http://127.0.0.1:5000/login" -H "accept: application/json" -d "username=admin"</span><br></pre></td></tr></table></figure><p>请求结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"POST"</span>: <span class="string">"admin"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给大家看一下<code>abort</code>的显示结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"username not currect"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者大家可以直接打开<code>http://127.0.0.1:5000</code>可以显示界面来测试。 如下图所示： </p><p><img src="/2019/10/09/Flask-API/s.png" alt></p><h1 id="前端请求API"><a href="#前端请求API" class="headerlink" title="前端请求API"></a>前端请求API</h1><p>昨天写的太晚就先睡了，今天给补上怎么用<code>AJAX</code>也就是前端来请求API数据的。大家可以自行了解一下<code>AJAX</code>的function什么的，demo用的是<code>JQuery</code>中的<code>AJAX</code>。因为牵涉到了跨域请求，所以后端也稍微有一点改变。需要用到<code>flask_cors</code>来解决这个问题。只需要在上面的Python代码加两行代码就OK了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS</span><br><span class="line">...... <span class="comment"># 这些是初始化app部分</span></span><br><span class="line">CORS(app)</span><br><span class="line">......</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">4&lt;script src=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">$.ajax (&#123;</span></span><br><span class="line"><span class="string">url: 'http://127.0.0.1:5000/login',</span></span><br><span class="line"><span class="string">data: &#123;</span></span><br><span class="line"><span class="string">username: "</span>admi<span class="string">"</span></span><br><span class="line"><span class="string">&#125;, </span></span><br><span class="line"><span class="string">error: function(data) &#123;</span></span><br><span class="line"><span class="string">// data 包含了整个的错误信息</span></span><br><span class="line"><span class="string">// data.status 指的是返回的错误代码，比如400</span></span><br><span class="line"><span class="string">// data.responseJSON.message 指返回的错误信息， username not currect</span></span><br><span class="line"><span class="string">console.log("</span>ERROR: <span class="string">", data)</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">success: function(data) &#123;</span></span><br><span class="line"><span class="string">console.log(data)</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">type: "</span>GET<span class="string">"</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Flask-API&quot;&gt;&lt;a href=&quot;#Flask-API&quot; class=&quot;headerlink&quot; title=&quot;Flask API&quot;&gt;&lt;/a&gt;Flask API&lt;/h1&gt;&lt;p&gt;给大家分享一下学习flask api的note。首先API只会返回json的类型，不
      
    
    </summary>
    
    
      <category term="Backend" scheme="http://yoursite.com/categories/Backend/"/>
    
      <category term="API" scheme="http://yoursite.com/categories/Backend/API/"/>
    
    
      <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
      <category term="API" scheme="http://yoursite.com/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>Flask Mail</title>
    <link href="http://yoursite.com/2019/10/08/Flask-Mail/"/>
    <id>http://yoursite.com/2019/10/08/Flask-Mail/</id>
    <published>2019-10-08T07:24:57.000Z</published>
    <updated>2019-10-09T12:07:40.246Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>由于最近项目的需求，了解了一下flask mail的内容，flask mail一般是用来做注册时候的邮箱验证，或者改密码的时候的验证，还有就是一些预定信息的通知，或者是tax的一些内容。当然网上的教程很多，但是大部分都不够全面，有的是基础，有的是加深，所以我打算在这里做一个关于flask mail尽量全面的教程。</p><h1 id="安装-Flask-Mail"><a href="#安装-Flask-Mail" class="headerlink" title="安装 Flask Mail"></a>安装 Flask Mail</h1><p>如果大家没有使用过flask mail，需要先用pip3安装一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install flask_mail</span><br></pre></td></tr></table></figure><h1 id="Flask-Mail-的配置"><a href="#Flask-Mail-的配置" class="headerlink" title="Flask Mail 的配置"></a>Flask Mail 的配置</h1><table><thead><tr><th align="center"><strong>配置</strong></th><th align="center"><strong>默认值</strong></th><th align="center"><strong>功能</strong></th></tr></thead><tbody><tr><td align="center"><strong>MAIL_SERVER</strong></td><td align="center">localhost</td><td align="center">邮件服务器</td></tr><tr><td align="center"><strong>MAIL_PORT</strong></td><td align="center">25</td><td align="center">邮件端口（一般是465）</td></tr><tr><td align="center"><strong>MAIL_USE_TLS</strong></td><td align="center">False</td><td align="center">是否使用TLS协议（一般不使用）</td></tr><tr><td align="center"><strong>MAIL_USE_SSL</strong></td><td align="center">False</td><td align="center">是否使用SSL协议（大多数使用）</td></tr><tr><td align="center"><strong>MAIL_DEBUG</strong></td><td align="center">app.debug</td><td align="center">是否为DEBUG模式，打印调试消息（一般默认开启）</td></tr><tr><td align="center"><strong>MAIL_USERNAME</strong></td><td align="center">None</td><td align="center">用户名</td></tr><tr><td align="center"><strong>MAIL_PASSWORD</strong></td><td align="center">None</td><td align="center">密码 or 授权码</td></tr><tr><td align="center"><strong>MAIL_DEFAULT_SENDER</strong></td><td align="center">None</td><td align="center">默认发送者</td></tr><tr><td align="center"><strong>MAIL_MAX_EMAILS</strong></td><td align="center">None</td><td align="center">一次连接中的发送邮件的上限</td></tr><tr><td align="center"><strong>MAIL_ASCII_ATTACHMENTS</strong></td><td align="center">False</td><td align="center">如果 MAIL_ASCII_ATTACHMENTS 设置成 True 的话，文件名将会转换成 ASCII 的。一般用于添加附件。</td></tr></tbody></table><p>大部分情况下我们只需要设置<code>MAIL_USE_TLS</code>, <code>MAIL_USE_SSL</code>, <code>MAIL_USERNAME</code>, <code>MAIL_PASSWORD</code>, <code>MAIL_DEFAULT_SENDER</code>这些就可以了</p><h1 id="使用Flask-Mail"><a href="#使用Flask-Mail" class="headerlink" title="使用Flask Mail"></a>使用Flask Mail</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置邮件服务器</span></span><br><span class="line"><span class="comment"># 如果是163邮箱的话是: smtp.163.com</span></span><br><span class="line"><span class="comment"># 如果是gmail邮箱的话是: smtp.gamil.com</span></span><br><span class="line"><span class="comment"># 如果是自己注册的域名邮箱的话，在购买域名邮箱的时候会给特定的server</span></span><br><span class="line">app.config[<span class="string">'MAIL_SERVER'</span>] = <span class="string">'smtp.qq.com'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 端口要根据设置来改，一般是用465</span></span><br><span class="line">app.config[<span class="string">'MAIL_PORT'</span>] = <span class="number">465</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用ssl传输协议，普遍是用ssl</span></span><br><span class="line">app.config[<span class="string">'MAIL_USE_SSL'</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置邮件的用户名，只需要@xxqq.com前面的内容，不需要包含@xx.com</span></span><br><span class="line">app.config[<span class="string">'MAIL_USERNAME'</span>] = <span class="string">'123456'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在qq邮件里面，这个密码是指的授权码!</span></span><br><span class="line"><span class="comment"># 不是密码，一定要授权码，一般是16位的字符</span></span><br><span class="line"><span class="comment"># 如果是gmail或者别的可以直接是用密码</span></span><br><span class="line">app.config[<span class="string">'MAIL_PASSWORD'</span>] = <span class="string">'aaaaaaaaaaaaaaaa'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认发送的邮箱，需要包含@xx.com</span></span><br><span class="line">app.config[<span class="string">'MAIL_DEFAULT_SENDER'</span>] = <span class="string">'123456@qq.com'</span></span><br><span class="line"></span><br><span class="line">mail = Mail(app)</span><br></pre></td></tr></table></figure><h2 id="怎么使用HTML模板"><a href="#怎么使用HTML模板" class="headerlink" title="怎么使用HTML模板"></a>怎么使用HTML模板</h2><p>大部分时候不管发送邮件验证还是什么，HTML的模板都是不变的，只是改变了里面的内容，所以我们先说一下怎么使用HTML模板来发送，最主要的一个function就是<code>render_template</code>这个函数，因为flask使用的是<strong><em>Jinja2</em></strong>的模板，<code>render_template</code>函数可以把Jinja2的模板转义成string的格式。所以我们用的<code>return render_template</code>就是把HTML转成string，然后发回给浏览器。</p><p>我们用Jinja2在templates的文件夹下定义一个HTML文件叫<code>hello.html</code>, 这样我们就可以传进来参数，来修改username。具体的使用方法下面两种发送方式里面都有例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;Hello &#123;&#123; username &#125;&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h2 id="不使用异步发送"><a href="#不使用异步发送" class="headerlink" title="不使用异步发送"></a>不使用异步发送</h2><p>Flask mail可以是用异步发送，可以不适用，首先讲一下不使用异步发送的做法。也可以用<code>render_template</code>的方法来修改<code>msg.html</code>的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># recipients是list，可以添加多个收件人</span></span><br><span class="line"><span class="comment"># sender 是发件人</span></span><br><span class="line"><span class="comment"># Message第一个变量Hello是邮件的标题</span></span><br><span class="line">msg = Message(<span class="string">'Hello'</span>, sender=<span class="string">'123456@qq.com'</span>, recipients=[<span class="string">'123456@qq.com'</span>])</span><br><span class="line">msg.body = <span class="string">'Hello'</span></span><br><span class="line"><span class="comment"># HTML的内容可以直接写</span></span><br><span class="line">msg.html = <span class="string">"&lt;h1&gt;Hello world&lt;/h1&gt;"</span></span><br><span class="line"><span class="comment"># 也可以用render_template</span></span><br><span class="line">msg.html = render_template(<span class="string">'hello.html'</span>,username=<span class="string">'xxx'</span>)</span><br><span class="line">mail.send(msg)</span><br></pre></td></tr></table></figure><p>如果配置什么都没有错误的话可以直接发送出去了。</p><h2 id="使用异步发送"><a href="#使用异步发送" class="headerlink" title="使用异步发送"></a>使用异步发送</h2><p>从电子邮件发送开始，直到电子邮件交付后，给浏览器发回其响应，在整个过程中，Web服务器会一直阻塞。如果我们试图发送电子邮件到一个服务器是缓慢的，所以使用多线程异步发送电子邮件可以避免处理请求过程中不必要的延迟，将发送电子邮件的函数使用Thread来运行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异步发送function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">async_start</span><span class="params">(app, msg)</span>:</span></span><br><span class="line">    <span class="comment"># 获取当前程序的上下文</span></span><br><span class="line">    <span class="keyword">with</span> app.app_context():</span><br><span class="line">        <span class="comment"># 发送邮件</span></span><br><span class="line">        mail.send(msg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义发送函数, message的配置和上面讲的一样</span></span><br><span class="line"><span class="comment"># **kwargs 指传进来的参数, 可以传多个参数进来。eg: username = 'xxx', link = 'xxx.com'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(to, subject, template, **args)</span>:</span></span><br><span class="line">    msg = Message(subject, sender = <span class="string">'123456@qq.com'</span>, recipients=[to])</span><br><span class="line">    msg.html = render_template(template, **args)</span><br><span class="line">    thread = Thread(target=async_start, args=[app, msg])</span><br><span class="line">    thread.start()</span><br><span class="line">    <span class="comment"># 返回调用的结果</span></span><br><span class="line">    <span class="keyword">return</span> thread</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 调用send_mail</span></span><br><span class="line"><span class="comment"># 第一个参数是收件人，第二个是标题，第三个是html的名字，第四个是render_template里面需要包含的变量（相当于render_template('hello.html', username='xxx')）</span></span><br><span class="line"><span class="meta">@app.route('/send')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span><span class="params">()</span>:</span></span><br><span class="line">  send(<span class="string">'123456@qq.com'</span>, <span class="string">'Hello world'</span>, <span class="string">'hello.html'</span>, username=<span class="string">'xxx'</span>)</span><br></pre></td></tr></table></figure><h1 id="关于Flask-Mail发送附件"><a href="#关于Flask-Mail发送附件" class="headerlink" title="关于Flask Mail发送附件"></a>关于Flask Mail发送附件</h1><p>当flask mail需要发送附件的时候，如果MAIL_ASCII_ATTACHMENTS 设置成True 的话，文件名将会转换成ASCII 的。 当文件名是以UTF-8 编码的时候，使用邮件转发的时候会修改邮件内容并且混淆Content-Disposition 描述，这个时候MAIL_ASCII_ATTACHMENTS 配置项是十分有用的。转换成ASCII 的基本方式就是对non-ASCII 字符的去除。任何一个unicode 字符能够被NFKD 分解成一个或者多个ASCII 字符。</p><p><strong>发送照片：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> app.open_resource(<span class="string">"image.png"</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    msg.attach(<span class="string">"image.png"</span>, <span class="string">"image/png"</span>, fp.read())</span><br></pre></td></tr></table></figure><p><strong>发送PDF：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> app.open_resource(<span class="string">'xx.pdf'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        msg.attach(<span class="string">'xx.pdf'</span>, <span class="string">"application/pdf"</span>, fp.read())</span><br></pre></td></tr></table></figure><p><strong><em>注：如果想在HTML里面使用css，需要自己在<code>&lt;style&gt;&lt;/style&gt;</code>里面写css，不可以直接用bootstrap这些框架。</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;由于最近项目的需求，了解了一下flask mail的内容，flask mail一般是用来做注册时候的邮箱验证，或者改密码的时候的验证，还有就
      
    
    </summary>
    
    
      <category term="Backend" scheme="http://yoursite.com/categories/Backend/"/>
    
    
      <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
      <category term="Mail" scheme="http://yoursite.com/tags/Mail/"/>
    
  </entry>
  
  <entry>
    <title>How to use hexo</title>
    <link href="http://yoursite.com/2019/10/07/How-to-use-hexo/"/>
    <id>http://yoursite.com/2019/10/07/How-to-use-hexo/</id>
    <published>2019-10-07T03:19:00.000Z</published>
    <updated>2019-10-07T03:21:48.954Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="Frontend" scheme="http://yoursite.com/categories/Frontend/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
