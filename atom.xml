<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Charles&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-18T11:21:50.382Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Charles</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PayPal</title>
    <link href="http://yoursite.com/2019/10/18/PayPal/"/>
    <id>http://yoursite.com/2019/10/18/PayPal/</id>
    <published>2019-10-18T05:57:00.000Z</published>
    <updated>2019-10-18T11:21:50.382Z</updated>
    
    <content type="html"><![CDATA[<p>最近找了一些关于支付的API，国内大部分都是微信，支付宝什么的。但是因为微信支付宝申请起来挺麻烦的，所以尝试使用了一下PayPal。PayPal可以作为国际使用支付方式。所以今年来详细讲一下怎么在web里面使用PayPal。具体的网址如下：<a href="https://developer.paypal.com/docs/checkout/integrate/#3-render-the-smart-payment-buttons" target="_blank" rel="noopener">PayPal</a></p><h1 id="1-创建PayPal-Sandbox-账户"><a href="#1-创建PayPal-Sandbox-账户" class="headerlink" title="1. 创建PayPal Sandbox 账户"></a>1. 创建PayPal Sandbox 账户</h1><p>首先是创建PayPal Sandbox的账户。因为Sandbox的环境下并不是真正收费的，所以大家可以尽情的测试。</p><p>第一步：申请<a href="[https://developer.paypal.com](https://developer.paypal.com/)">PayPal Develpoer</a>的账号。</p><p>第二步：选择Sandbox环境，创建App。创建完之后会有一个client id，在js里面会使用到：</p><p><img src="/2019/10/18/PayPal/create.png" alt></p><p><img src="/2019/10/18/PayPal/app.png" alt></p><h1 id="2-在web里面调用PayPal"><a href="#2-在web里面调用PayPal" class="headerlink" title="2. 在web里面调用PayPal"></a>2. 在web里面调用PayPal</h1><p>这里需要使用到上一步创建的<code>client id</code>。这里的<code>client-id</code>可以使用<code>sb</code>来作为快捷启动，也可以使用自己的<code>client-id</code>。ps: 不知道他们为什么使用<code>sb</code>，可能国外人不知道sb什么含义。 Anywhere 具体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://www.paypal.com/sdk/js?client-id=sb"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</code>这一行是为了获得最佳Internet Explorer兼容性。</p><p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</code>是为了在移动设备上获得最佳的体验。</p><p>关于<code>https://www.paypal.com/sdk/js</code>需要传递的参数有两个（在官网上看到的解释）：</p><table><thead><tr><th align="center"><strong>Option</strong></th><th align="center"><strong>Example value</strong></th><th align="center"><strong>Default</strong></th><th align="center"><strong>Description</strong></th></tr></thead><tbody><tr><td align="center"><code>client-id</code></td><td align="center"><code>sb</code> or 你申请到的<code>client-id</code></td><td align="center">required</td><td align="center">PayPal REST客户端ID。用于识别PayPal帐户并确定在何处付款。在沙盒中测试时，可以将client-id = sb用作快捷方式。</td></tr><tr><td align="center"><code>currency</code></td><td align="center"><code>AUD</code> <code>USD</code></td><td align="center"><code>USD</code></td><td align="center">收款的默认货币</td></tr></tbody></table><p>如果你需要用澳元的话那就是：<code>https://www.paypal.com/sdk/js?client-id=sb&amp;currency=AUD</code></p><h1 id="3-在HTML中显示PayPal的支付按钮"><a href="#3-在HTML中显示PayPal的支付按钮" class="headerlink" title="3. 在HTML中显示PayPal的支付按钮"></a>3. 在HTML中显示PayPal的支付按钮</h1><p>这里使用的是PayPal集成的js。<code>render</code>所包含的是<code>div</code>的id。也可以使用整个body作为container，比如：<code>.render(&#39;body&#39;)</code>。官方也提供了关于怎么美化button的链接：<a href="https://developer.paypal.com/docs/checkout/troubleshoot/performance/#delayed-render" target="_blank" rel="noopener">Performance</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"paypal-button-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://www.paypal.com/sdk/js?client-id=sb&amp;currency=AUD"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    paypal.Buttons().render('#paypal-button-container');</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>显示结果如下：</p><p><img src="/2019/10/18/PayPal/demo.png" alt></p><h1 id="4-设置交易"><a href="#4-设置交易" class="headerlink" title="4. 设置交易"></a>4. 设置交易</h1><p>当用户点击支付按钮的时候，需要实现<code>createOrder</code>这个function。这个function这里包含了两步：</p><ul><li>首先调用了<code>actions.order.create</code>来初始化交易信息，包含了金额，交易详情等等。</li><li>第二步加载PayPal支付页面。</li></ul><p>具体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"paypal-button-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://www.paypal.com/sdk/js?client-id=sb&amp;currency=AUD"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    paypal.Buttons(&#123;</span><br><span class="line">        createOrder: function(data, actions) &#123;</span><br><span class="line">            // Set up the transaction</span><br><span class="line">            return actions.order.create(&#123;</span><br><span class="line">                purchase_units: [&#123;</span><br><span class="line">                    amount: &#123;</span><br><span class="line">                        currency_code: "AUD",</span><br><span class="line">                        value: '0.01'</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).render('#paypal-button-container');</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关于<code>actions.order.create</code>的具体参数可以参照官网：<a href="https://developer.paypal.com/docs/api/orders/v2/#orders_create" target="_blank" rel="noopener">Orders Create</a></p><p>当用户选择支付方式并点击支付按钮后会跳转到支付页面显示如下：</p><p><img src="/2019/10/18/PayPal/pay.png" alt></p><h1 id="支付结果的反馈信息"><a href="#支付结果的反馈信息" class="headerlink" title="支付结果的反馈信息"></a>支付结果的反馈信息</h1><p>当交易完成之后，需要实现<code>onApprove</code> 这个function。这个function调用了<code>actions.order.capture()</code>来获取详细的支付信息，同时告诉用户的支付结果。详细代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"paypal-button-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://www.paypal.com/sdk/js?client-id=sb&amp;currency=AUD"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    paypal.Buttons(&#123;</span><br><span class="line">        createOrder: function(data, actions) &#123;</span><br><span class="line">            // Set up the transaction</span><br><span class="line">            return actions.order.create(&#123;</span><br><span class="line">                purchase_units: [&#123;</span><br><span class="line">                    amount: &#123;</span><br><span class="line">                        currency_code: "AUD",</span><br><span class="line">                        value: '0.01'</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        onApprove: function(data, actions) &#123;</span><br><span class="line">            // 交易成功</span><br><span class="line">            return actions.order.capture().then(function(details) &#123;</span><br><span class="line">                // 显示支付人的姓名</span><br><span class="line">                console.log(details);</span><br><span class="line">                alert('Transaction completed by ' + details.payer.name.given_name);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).render('#paypal-button-container');</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>details</code>里面包含了很多信息，包括支付人的名字，支付时间，地址等等。这个包含了太多个人信息，所以打了很多码。。</p><p><img src="/2019/10/18/PayPal/res.png" alt></p><p>有时间会写一下在Android里面怎么使用PayPal的。。</p><p>下载文件：<a href="demo.zip">Download demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近找了一些关于支付的API，国内大部分都是微信，支付宝什么的。但是因为微信支付宝申请起来挺麻烦的，所以尝试使用了一下PayPal。PayPal可以作为国际使用支付方式。所以今年来详细讲一下怎么在web里面使用PayPal。具体的网址如下：&lt;a href=&quot;https://
      
    
    </summary>
    
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
      <category term="PayPal" scheme="http://yoursite.com/categories/web/PayPal/"/>
    
    
      <category term="Frontend" scheme="http://yoursite.com/tags/Frontend/"/>
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="PayPal" scheme="http://yoursite.com/tags/PayPal/"/>
    
  </entry>
  
  <entry>
    <title>Google login and calender</title>
    <link href="http://yoursite.com/2019/10/16/Google-login-and-calender/"/>
    <id>http://yoursite.com/2019/10/16/Google-login-and-calender/</id>
    <published>2019-10-16T06:29:12.000Z</published>
    <updated>2019-10-17T06:49:03.034Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web-使用Google-login和calender"><a href="#Web-使用Google-login和calender" class="headerlink" title="Web 使用Google login和calender"></a>Web 使用Google login和calender</h1><p>网页使用Google第三方登录和使用calender。使用<strong>JavaScript</strong>来实现。</p><h2 id="1-首先在Google-API控制中心创建client-id"><a href="#1-首先在Google-API控制中心创建client-id" class="headerlink" title="1. 首先在Google API控制中心创建client id"></a>1. 首先在Google API控制中心创建client id</h2><p>首先在[Google API 控制台](<a href="https://console.developers.google.com/project/_/apiui/apis/library" target="_blank" rel="noopener">Google API 控制台</a>) 选择或者创建一个项目。</p><p><img src="/2019/10/16/Google-login-and-calender/start.png" alt></p><p>当注册完之后根绝需要添加google API的范围。比如我需要google calendar所以我需要添加google calendar的API。一般是用google calendar选择<code>../auth/calendar.events</code>和<code>../auth/calendar</code></p><p><img src="/2019/10/16/Google-login-and-calender/choose.png" alt></p><p><img src="/2019/10/16/Google-login-and-calender/list.png" alt></p><p>然后<strong>创建 OAuth 客户端 ID</strong>, 选择创建web项目。<em>已获授权的 JavaScript 来源</em>和<em>已获授权的重定向 URI</em>可以写成<code>http://localhost:5000</code>。主要是根据大家的IP和port来确定的。当创建完之后会生成一个<strong>client_id</strong>。</p><p><img src="/2019/10/16/Google-login-and-calender/web.png" alt></p><h2 id="2-具体代码实现"><a href="#2-具体代码实现" class="headerlink" title="2. 具体代码实现"></a>2. 具体代码实现</h2><p><strong>切记在浏览器访问的时候输入的IP地址需要和你申请client id填写的IP相同。比如你申请写的<code>http://localhost:5000</code>，那么你浏览器打开的时候也需要用<code>http://localhost:5000</code>才能正常使用google login。</strong></p><p>首先根绝官方文档来定义CSS的login button的样式：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-tag">body</span> &#123; <span class="attribute">padding</span>: <span class="number">2em</span>; &#125;</span><br><span class="line">    <span class="comment">/* Shared */</span></span><br><span class="line">    <span class="selector-class">.loginBtn</span> &#123;</span><br><span class="line">        <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="comment">/* width: 13em;  - apply for fixed size */</span></span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0.2em</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">15px</span> <span class="number">0</span> <span class="number">46px</span>;</span><br><span class="line">        <span class="attribute">border</span>: none;</span><br><span class="line">        <span class="attribute">text-align</span>: left;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">34px</span>;</span><br><span class="line">        <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">0.2em</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#FFF</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.loginBtn</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">        <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">34px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.loginBtn</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">        <span class="attribute">outline</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.loginBtn</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">        <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">32px</span> <span class="built_in">rgba</span>(0,0,0,0.1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Google */</span></span><br><span class="line">    <span class="selector-class">.loginBtn--google</span> &#123;</span><br><span class="line">        <span class="comment">/*font-family: "Roboto", Roboto, arial, sans-serif;*/</span></span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#DD4B39</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.loginBtn--google</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">        <span class="attribute">border-right</span>: <span class="number">#BB3F30</span> <span class="number">1px</span> solid;</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'https://s3-us-west-2.amazonaws.com/s.cdpn.io/14082/icon_google.png'</span>) <span class="number">6px</span> <span class="number">6px</span> no-repeat;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.loginBtn--google</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line">    <span class="selector-class">.loginBtn--google</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#E74B37</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>然后我们来定义HTML的内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"loginBtn loginBtn--google"</span> <span class="attr">id</span>=<span class="string">"googleLogin"</span>&gt;</span></span><br><span class="line">        Login with Google</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> ο<span class="attr">nclick</span>=<span class="string">"signOut();"</span>&gt;</span>Sign out<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://apis.google.com/js/api:client.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> googleUser = &#123;&#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">initClient</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        gapi.load(<span class="string">'auth2'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">            auth2 = gapi.auth2.init(&#123;</span><br><span class="line"><span class="javascript">                <span class="comment">// 上一步获取的 client_id </span></span></span><br><span class="line"><span class="javascript">                client_id: <span class="string">'104xxxxxxxxxxxx'</span>, </span></span><br><span class="line"><span class="javascript">                cookiepolicy: <span class="string">'single_host_origin'</span>,</span></span><br><span class="line"><span class="javascript">                <span class="comment">// scope 是需要获取的google api的权限</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 可以请求除了默认的'profile' and 'email'之外的数据, 比如这里的calendar</span></span></span><br><span class="line"><span class="javascript">                scope: <span class="string">'profile https://www.googleapis.com/auth/calendar https://www.googleapis.com/auth/calendar.events'</span></span></span><br><span class="line">            &#125;);</span><br><span class="line"><span class="javascript">            <span class="comment">// 当login button被点击之后执行function</span></span></span><br><span class="line"><span class="javascript">            attachSignin(<span class="built_in">document</span>.getElementById(<span class="string">'googleLogin'</span>));</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 当页面load之后初始化client</span></span></span><br><span class="line">    initClient();</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">attachSignin</span>(<span class="params">element</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        auth2.attachClickHandler(element, &#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">googleUser</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 可以查看详细信息</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(googleUser);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> profile = auth2.currentUser.get().getBasicProfile();</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'ID: '</span> + profile.getId());</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'Full Name: '</span> + profile.getName());</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'Given Name: '</span> + profile.getGivenName());</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'Family Name: '</span> + profile.getFamilyName());</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'Image URL: '</span> + profile.getImageUrl());</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'Email: '</span> + profile.getEmail());</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// 这里包含了请求的access_token</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> token = auth2.currentUser.get().getAuthResponse();</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(token);</span></span><br><span class="line"><span class="javascript">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">erroe</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(error, <span class="literal">undefined</span>, <span class="number">2</span>));</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">//注销</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">signOut</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> auth2 = gapi.auth2.getAuthInstance();</span></span><br><span class="line"><span class="javascript">        auth2.signOut().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'用户注销成功'</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Google-calendar-的使用"><a href="#Google-calendar-的使用" class="headerlink" title="Google calendar 的使用"></a>Google calendar 的使用</h1><p><a href="https://developers.google.com/calendar/v3/reference/events/insert#try-it" target="_blank" rel="noopener">Google calendar API</a> 的使用链接。</p><h2 id="获取calendar-list"><a href="#获取calendar-list" class="headerlink" title="获取calendar list"></a>获取calendar list</h2><p>(我们一般是用的calendar id是google login之后的邮箱：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从前端获取到的access_token</span></span><br><span class="line">access_token = <span class="string">'ya29.xxxxxxx'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get the calendar list</span></span><br><span class="line">response = requests.get(</span><br><span class="line">    url = <span class="string">'https://www.googleapis.com/calendar/v3/users/me/calendarList'</span>,</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">        <span class="string">'Authorization'</span>: <span class="string">'Bearer '</span> + access_token</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">response.raise_for_status()</span><br><span class="line">print(response.json())</span><br></pre></td></tr></table></figure><h2 id="获取当前calendar的event-list"><a href="#获取当前calendar的event-list" class="headerlink" title="获取当前calendar的event list"></a>获取当前calendar的event list</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从前端获取到的access_token</span></span><br><span class="line">access_token = <span class="string">'ya29.xxxxxxx'</span></span><br><span class="line">email = <span class="string">'xxx@gmail.com'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取email calendar的event list</span></span><br><span class="line">response = requests.get(</span><br><span class="line">    url = <span class="string">'https://www.googleapis.com/calendar/v3/calendars/'</span> + email + <span class="string">'/events'</span>,</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">        <span class="string">'Authorization'</span>: <span class="string">'Bearer '</span> + access_token</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">response.raise_for_status()</span><br><span class="line">print(response.json())</span><br></pre></td></tr></table></figure><h2 id="添加新的event"><a href="#添加新的event" class="headerlink" title="添加新的event"></a>添加新的event</h2><p>值得注意的地方是需要把<code>EVENT_TEXT</code>转成<code>json</code>的格式。不然会报错。里面会返回event id和一系列有关这个event的东西。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从前端获取到的access_token</span></span><br><span class="line">access_token = <span class="string">'ya29.xxxxxxx'</span></span><br><span class="line">email = <span class="string">'xxx@gmail.com'</span></span><br><span class="line"></span><br><span class="line">EVENT_TEXT = &#123;</span><br><span class="line">    <span class="string">"summary"</span>: <span class="string">"hotel booking"</span>,</span><br><span class="line">    <span class="string">"description"</span>: <span class="string">"make a hotel booking"</span>,</span><br><span class="line">    <span class="string">"end"</span>: &#123;</span><br><span class="line">        <span class="string">"dateTime"</span>: <span class="string">"2019-10-17T23:14:31+11:00"</span>,</span><br><span class="line">        <span class="string">"timeZone"</span>: <span class="string">"Australia/Sydney"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"start"</span>: &#123;</span><br><span class="line">        <span class="string">"dateTime"</span>: <span class="string">"2019-10-17T00:00:00+11:00"</span>,</span><br><span class="line">        <span class="string">"timeZone"</span>: <span class="string">"Australia/Sydney"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">response = requests.post(</span><br><span class="line">    url =<span class="string">'https://www.googleapis.com/calendar/v3/calendars/'</span> + email +<span class="string">'/events'</span>,</span><br><span class="line">    </span><br><span class="line">    data = json.dumps(EVENT_TEXT),</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'Authorization'</span>: <span class="string">'Bearer '</span> + access_token,</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">response.raise_for_status()</span><br><span class="line">print(response.json())</span><br></pre></td></tr></table></figure><h2 id="更新event"><a href="#更新event" class="headerlink" title="更新event"></a>更新event</h2><p>我们可以根绝insert返回的event id来更新这个事件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从前端获取到的access_token</span></span><br><span class="line">access_token = <span class="string">'ya29.xxxxxxx'</span></span><br><span class="line">email = <span class="string">'xxx@gmail.com'</span></span><br><span class="line"></span><br><span class="line">event_id = <span class="string">'xxxx'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变了日期</span></span><br><span class="line">EVENT_TEXT = &#123;</span><br><span class="line">    <span class="string">"summary"</span>: <span class="string">"Hotel"</span>,</span><br><span class="line">    <span class="string">"description"</span>: <span class="string">"make a hotel booking"</span>,</span><br><span class="line">    <span class="string">"end"</span>: &#123;</span><br><span class="line">        <span class="string">"dateTime"</span>: <span class="string">"2019-10-18T23:14:31+11:00"</span>,</span><br><span class="line">        <span class="string">"timeZone"</span>: <span class="string">"Australia/Sydney"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"start"</span>: &#123;</span><br><span class="line">        <span class="string">"dateTime"</span>: <span class="string">"2019-10-18T00:00:00+11:00"</span>,</span><br><span class="line">        <span class="string">"timeZone"</span>: <span class="string">"Australia/Sydney"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新event</span></span><br><span class="line">response = requests.put(</span><br><span class="line">    url =<span class="string">'https://www.googleapis.com/calendar/v3/calendars/'</span> + email +<span class="string">'/events/'</span> + event_id,</span><br><span class="line">    </span><br><span class="line">    data = json.dumps(EVENT_TEXT),</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'Authorization'</span>: <span class="string">'Bearer '</span> + access_token,</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">response.raise_for_status()</span><br><span class="line">print(response.json())</span><br></pre></td></tr></table></figure><h2 id="删除event"><a href="#删除event" class="headerlink" title="删除event"></a>删除event</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从前端获取到的access_token</span></span><br><span class="line">access_token = <span class="string">'ya29.xxxxxxx'</span></span><br><span class="line">email = <span class="string">'xxx@gmail.com'</span></span><br><span class="line"></span><br><span class="line">event_id = <span class="string">'xxxx'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除event</span></span><br><span class="line">response = requests.delete(</span><br><span class="line">    url =<span class="string">'https://www.googleapis.com/calendar/v3/calendars/'</span> + email +<span class="string">'/events/'</span> + event_id,</span><br><span class="line">    </span><br><span class="line">    data = json.dumps(EVENT_TEXT),</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'Authorization'</span>: <span class="string">'Bearer '</span> + access_token,</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">response.raise_for_status()</span><br><span class="line">print(response.json())</span><br></pre></td></tr></table></figure><p>关于calendar还有很多用法，大家可以一起学习学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Web-使用Google-login和calender&quot;&gt;&lt;a href=&quot;#Web-使用Google-login和calender&quot; class=&quot;headerlink&quot; title=&quot;Web 使用Google login和calender&quot;&gt;&lt;/a&gt;Web 使
      
    
    </summary>
    
    
      <category term="Backend" scheme="http://yoursite.com/categories/Backend/"/>
    
      <category term="Google Login" scheme="http://yoursite.com/categories/Backend/Google-Login/"/>
    
      <category term="JS" scheme="http://yoursite.com/categories/Backend/Google-Login/JS/"/>
    
      <category term="web" scheme="http://yoursite.com/categories/Backend/Google-Login/JS/web/"/>
    
    
      <category term="Frontend" scheme="http://yoursite.com/tags/Frontend/"/>
    
      <category term="Google Login" scheme="http://yoursite.com/tags/Google-Login/"/>
    
      <category term="Backend" scheme="http://yoursite.com/tags/Backend/"/>
    
  </entry>
  
  <entry>
    <title>Flask upload files</title>
    <link href="http://yoursite.com/2019/10/11/Flask-upload-files/"/>
    <id>http://yoursite.com/2019/10/11/Flask-upload-files/</id>
    <published>2019-10-11T08:07:31.000Z</published>
    <updated>2019-10-13T06:11:17.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask-upload-files"><a href="#Flask-upload-files" class="headerlink" title="Flask upload files"></a>Flask upload files</h1><p>这个note是关于怎么用flask上传文件。包含了两种不同的上传文件的方式。第一种是通过HTML <code>&lt;form&gt;&lt;/form&gt;</code>直接上传。另一种通过<code>API</code>的办法上传。两种方法都会详细解释。等学会了怎么使用之后，大家可以自己做一个自己的file server。当然现成的file server有很多，比如<code>NextCloud</code>这一类的，都是非常成熟的框架，大家如果不想造轮子可以直接用现成的框架来搭建。</p><h2 id="通过Flask-HTML直接上传"><a href="#通过Flask-HTML直接上传" class="headerlink" title="通过Flask HTML直接上传"></a>通过Flask HTML直接上传</h2><p>上传文件一般只需要三步：</p><ol><li><p>第一步就是定义HTML的文件：</p><p>需要说几点：</p><ul><li>因为是上传文件，所以在form里面必须定义<code>enctype=&quot;multipart/form-data&quot;</code>不然没办法上传文件</li><li>然后是<code>&lt;input&gt;</code>, input 的type一定要是<em>file</em> 才可以选中文件，不然没办法使用。然后是如果想上传多个file的话需要申明<code>multiple</code>才可以选中多个文件同时长传。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"submitI"</span> &gt;</span>Upload Image<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>当<strong>Upload Image</strong> 按钮被点击后，通过request对象上的files获取文件。和以前用request获取表单值一样，使用input字段的name值获取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当input 不是multiple时候可以使用这个，这个表示只上传一个file</span></span><br><span class="line">file = request.files[<span class="string">'file'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当input是multiple的时候表示有多个文件上传</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> request.files.getlist(<span class="string">"file"</span>):</span><br></pre></td></tr></table></figure></li><li><p>使用<code>file.save()</code>保存文件，指定保存的地址及文件名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.save(str(path + filename))</span><br></pre></td></tr></table></figure></li></ol><p>详细HTML代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"submitI"</span> &gt;</span>Upload Image<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>详细Python代码，给大家说一下为什么要用<code>static</code>的文件夹存文件：因为如果flask是在服务器上运行的话，需要访问服务器的资源的时候只有<code>static</code>可以被外部访问，所有一般把照片，js这些文件都存在<code>static</code>的文件夹下，以方便外部调用。：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有两种方法来获取路径</span></span><br><span class="line"><span class="comment"># TODO 第一种是绝对路径</span></span><br><span class="line"><span class="comment"># 得到当前路径</span></span><br><span class="line"><span class="comment"># basedir = os.getcwd()</span></span><br><span class="line"><span class="comment"># target = os.path.join(basedir, 'static/files')</span></span><br><span class="line"><span class="comment"># if not os.path.isdir(target):</span></span><br><span class="line"><span class="comment">#os.mkdir(target)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TODO 第二种是相对路径</span></span><br><span class="line">target = <span class="string">'static/files'</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(target):</span><br><span class="line">    os.mkdir(target)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许上传的类型</span></span><br><span class="line">ALLOWED_EXTENSIONS = &#123;<span class="string">'txt'</span>, <span class="string">'pdf'</span>, <span class="string">'png'</span>, <span class="string">'jpg'</span>, <span class="string">'jpeg'</span>, <span class="string">'gif'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否符合上传文件类型</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allowed_file</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'.'</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">            filename.rsplit(<span class="string">'.'</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/', methods=["POST", "GET"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果&lt;input&gt;设置的是单个文件的话，可以使用下面这行代码直接得到file</span></span><br><span class="line">    <span class="comment"># 可以直接用这行代码替换for语句</span></span><br><span class="line">    <span class="comment"># file = request.files.get('file')</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> request.files.getlist(<span class="string">"file"</span>):</span><br><span class="line">        <span class="comment"># 检查是否符合上传类型</span></span><br><span class="line">        <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">            filename = file.filename</span><br><span class="line">            <span class="comment"># 把路径和文件名链接起来</span></span><br><span class="line">            filepath = <span class="string">"/"</span>.join([target,filename])</span><br><span class="line">            file.save(filepath)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"upload.html"</span>)</span><br><span class="line"></span><br><span class="line">app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>因为之前测试的时候已经上传了一个文件，所有在<code>static/files下面有三个文件</code></p><p><img src="/2019/10/11/Flask-upload-files/upload.png" alt></p><p><img src="/2019/10/11/Flask-upload-files/tree.png" alt></p><h2 id="怎么通过Flask下载文件"><a href="#怎么通过Flask下载文件" class="headerlink" title="怎么通过Flask下载文件"></a>怎么通过Flask下载文件</h2><p>可以直接通过<code>send_file</code>来直接下载文件，这个不好截图，直接上代码吧，亲测可以执行，绝对能用。具体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> send_from_directory</span><br><span class="line"><span class="meta">@app.route('/download/&lt;filename&gt;', methods=["GET", "POST"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(filename)</span>:</span></span><br><span class="line">    filepath = <span class="string">"static/files/"</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># as_attachment=True 一定要写，不然会变成打开，而不是下载</span></span><br><span class="line">        <span class="comment"># 这个是根据文件夹来send file的， 所以你要下载什么文件就要使用什么路径</span></span><br><span class="line">        <span class="comment"># 比如我们使用的是 "static/files/"</span></span><br><span class="line">        <span class="keyword">return</span> send_from_directory(filepath, filename,  as_attachment=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br></pre></td></tr></table></figure><h1 id="Flask-API-upload-files"><a href="#Flask-API-upload-files" class="headerlink" title="Flask API upload files"></a>Flask API upload files</h1><p>通过API的方式开上传文件。在使用API上传文件的时候需要在前端用到<code>FormData</code>。<code>FormData</code>的作用就是异步传输二进制文件。<code>FormData</code>的使用场景就是表单提交。</p><p>怎么使用<code>FormData</code>：</p><ol><li><p>首先创建一下<code>FormData</code>对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br></pre></td></tr></table></figure></li><li><p>把HTML表单用来初始化<code>FormData</code>，以及<code>FormData</code>的一些常见用法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(<span class="built_in">document</span>.getElementById(<span class="string">"form"</span>));</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 这样formData就储存了username和password</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 可以通过get的方式得到value</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> username = formData.get(<span class="string">"username"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> password = formData.get(<span class="string">"password"</span>)</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 也可以使用append的方式添加value</span></span></span><br><span class="line"><span class="javascript">    formData.append(<span class="string">"token"</span>, <span class="string">"12334"</span>)</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 可以通过set修改value</span></span></span><br><span class="line"><span class="javascript">    formData.set(<span class="string">"token"</span>, <span class="string">"1"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 可以通过delete删除元素</span></span></span><br><span class="line"><span class="javascript">    formData.delete(<span class="string">"token"</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Flask-RESTful-API"><a href="#Flask-RESTful-API" class="headerlink" title="Flask-RESTful API"></a>Flask-RESTful API</h2><p>后端Flask我们依然是通过<code>reqparse.RequestParser()</code>的方式获取上传的文件。前端则是通过<code>FormData</code>的方式来上传文件。</p><p>详细代码：</p><ul><li>如果想上传多个文件在<code>add_argument</code>的时候需要声明<code>action=&#39;append&#39;</code>才能获取到多个文件否则只能获取一个文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, make_response, request</span><br><span class="line"><span class="keyword">from</span> flask_restplus <span class="keyword">import</span> Api, reqparse, abort, Resource</span><br><span class="line"><span class="keyword">from</span> werkzeug.datastructures <span class="keyword">import</span> FileStorage</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">api = Api(app)</span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = <span class="string">'WHATEVER'</span></span><br><span class="line"></span><br><span class="line">basedir = os.getcwd()</span><br><span class="line"></span><br><span class="line">upload = api.namespace(<span class="string">'upload'</span>, description=<span class="string">"Upload files API"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@upload.route("/", strict_slashes=False)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upload</span><span class="params">(Resource)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        parser = reqparse.RequestParser()</span><br><span class="line">        parser.add_argument(<span class="string">'file'</span>, location=<span class="string">'files'</span>,type=FileStorage, required=<span class="literal">True</span>, action=<span class="string">'append'</span>)</span><br><span class="line"></span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        uploaded_file = args.get(<span class="string">'file'</span>)</span><br><span class="line"></span><br><span class="line">        target = os.path.join(basedir, <span class="string">'static/files'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(target):</span><br><span class="line">            os.mkdir(target)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> uploaded_file:</span><br><span class="line">            filepath = <span class="string">"/"</span>.join([target,file.filename])</span><br><span class="line">            file.save(filepath)</span><br><span class="line"></span><br><span class="line">app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="JQuery-upload-files"><a href="#JQuery-upload-files" class="headerlink" title="JQuery upload files"></a>JQuery upload files</h3><p>前端则使用了<code>JQuery</code>来上传文件。使用的是<code>FormData</code>的格式来上传文件。详细代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"formContent"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">multiple</span> <span class="attr">required</span> <span class="attr">id</span>=<span class="string">"upload"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"submitI"</span> &gt;</span>Upload Image<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#formContent"</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line">        e.preventDefault();</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> formdata = <span class="keyword">new</span> FormData(<span class="keyword">this</span>);</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">            url: <span class="string">"http://127.0.0.1:5000/upload/"</span>,</span></span><br><span class="line"><span class="javascript">            type: <span class="string">"POST"</span>,</span></span><br><span class="line">            data: formdata,</span><br><span class="line"><span class="javascript">            mimeTypes:<span class="string">"multipart/form-data"</span>,</span></span><br><span class="line"><span class="javascript">            contentType: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">            cache: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">            processData: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">            success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(data);</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            error: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(data);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/10/11/Flask-upload-files/Aupload.png" alt></p><p><img src="/2019/10/11/Flask-upload-files/Atree.png" alt></p><h3 id="Flask-API-download-files"><a href="#Flask-API-download-files" class="headerlink" title="Flask API download files"></a>Flask API download files</h3><p>关于通过flask api下载文件的方式和前面讲的基本上差不多，就是改成了API的写法。详细代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, make_response, request</span><br><span class="line"><span class="keyword">from</span> flask_restplus <span class="keyword">import</span> Api, reqparse, abort, Resource</span><br><span class="line"><span class="keyword">from</span> werkzeug.datastructures <span class="keyword">import</span> FileStorage</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">api = Api(app)</span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = <span class="string">'WHATEVER'</span></span><br><span class="line"></span><br><span class="line">basedir = os.getcwd()</span><br><span class="line"></span><br><span class="line">upload = api.namespace(<span class="string">'upload'</span>, description=<span class="string">"Upload files API"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@upload.route("/", strict_slashes=False)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upload</span><span class="params">(Resource)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        parser = reqparse.RequestParser()</span><br><span class="line">        parser.add_argument(<span class="string">'file'</span>, location=<span class="string">'files'</span>,type=FileStorage, required=<span class="literal">True</span>, action=<span class="string">'append'</span>)</span><br><span class="line"></span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        uploaded_file = args.get(<span class="string">'file'</span>)</span><br><span class="line"></span><br><span class="line">        target = os.path.join(basedir, <span class="string">'static/files'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(target):</span><br><span class="line">            os.mkdir(target)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> uploaded_file:</span><br><span class="line">            filepath = <span class="string">"/"</span>.join([target,file.filename])</span><br><span class="line">            file.save(filepath)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        parser = reqparse.RequestParser()</span><br><span class="line">        parser.add_argument(<span class="string">'filename'</span>, type=str)</span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        filename = args.get(<span class="string">"filename"</span>)</span><br><span class="line"></span><br><span class="line">        filepath = <span class="string">"static/files/"</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># as_attachment=True 一定要写，不然会变成打开，而不是下载</span></span><br><span class="line">            <span class="comment"># 这个是根据文件夹来send file的， 所以你要下载什么文件就要使用什么路径</span></span><br><span class="line">            <span class="comment"># 比如我们使用的是 "static/files/"</span></span><br><span class="line">            <span class="keyword">return</span> send_from_directory(filepath, filename,  as_attachment=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> make_response(<span class="string">"Error"</span>, <span class="number">403</span>)</span><br><span class="line"></span><br><span class="line">app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>在浏览器内输入以下命令就可以开始下载文件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:5000/upload?filename=sqlmap.pdf</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Flask-upload-files&quot;&gt;&lt;a href=&quot;#Flask-upload-files&quot; class=&quot;headerlink&quot; title=&quot;Flask upload files&quot;&gt;&lt;/a&gt;Flask upload files&lt;/h1&gt;&lt;p&gt;这个note
      
    
    </summary>
    
    
      <category term="Backend" scheme="http://yoursite.com/categories/Backend/"/>
    
      <category term="API" scheme="http://yoursite.com/categories/Backend/API/"/>
    
      <category term="JQuery" scheme="http://yoursite.com/categories/Backend/API/JQuery/"/>
    
    
      <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
      <category term="API" scheme="http://yoursite.com/tags/API/"/>
    
      <category term="Upload file" scheme="http://yoursite.com/tags/Upload-file/"/>
    
  </entry>
  
  <entry>
    <title>Flask API</title>
    <link href="http://yoursite.com/2019/10/09/Flask-API/"/>
    <id>http://yoursite.com/2019/10/09/Flask-API/</id>
    <published>2019-10-09T12:08:04.000Z</published>
    <updated>2019-10-12T14:31:45.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask-API"><a href="#Flask-API" class="headerlink" title="Flask API"></a>Flask API</h1><p>给大家分享一下学习flask api的note。首先API只会返回json的类型，不会返回HTML。API一般适用于前后端分离的情况。Flask API的实现方式有两种。第一种就是不用<code>flask_restplus</code>。第二种是用<code>flask_restplus</code>。首先给大家说一下不用<code>flask_restplus</code>怎么写。</p><h2 id="不使用-flask-restplus"><a href="#不使用-flask-restplus" class="headerlink" title="不使用 flask_restplus"></a>不使用 flask_restplus</h2><p>在不适用<code>flask_restplus</code>的情况下我们可以直接使用route的形式来写API。只是把<code>return render_template</code>改成了<code>return jsonify</code> 来返回一个json类型的数据。可以根据不同的request的方式(GET, POST, DELETE)可以处理不同的事情，比如DELETE可以用来删除数据， POST可以添加数据，GET可以获取数据。具体实现方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># SECRET_KEY 可以设置为任意的string</span></span><br><span class="line">app.config[<span class="string">"SECRET_KEY"</span>] = <span class="string">"WHATEVER"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index', methods=["POST","GET","DELETE"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"GET"</span>:</span><br><span class="line">        username = request.args.get(<span class="string">"username"</span>)</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">"GET"</span>: username&#125;)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        username = request.args.get(<span class="string">"username"</span>)</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">"POST"</span>: username&#125;)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"DELETE"</span>:</span><br><span class="line">        username = request.args.get(<span class="string">"username"</span>)</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">"DELETE"</span>: username&#125;)</span><br><span class="line"></span><br><span class="line">app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>GET 请求测试如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET "http://127.0.0.1:5000/index?username=admin" -H "accept: application/json"</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"GET"</span>: <span class="string">"admin"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>POST 请求测试如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST "http://127.0.0.1:5000/index?username=admin" -H "accept: application/json"</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"POST"</span>: <span class="string">"admin"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DELETE 请求测试如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X DELETE "http://127.0.0.1:5000/index?username=admin" -H "accept: application/json"</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"DELETE"</span>: <span class="string">"admin"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用flask-restplus"><a href="#使用flask-restplus" class="headerlink" title="使用flask_restplus"></a>使用flask_restplus</h2><p>Flask-RESTful 提供了 reqparse 一种类似 argparse 参数解析机制以简化参数处理。所以处理请求数据的时候和Flask不太一样。<code>parser = reqparse.RequestParser():</code> reqparse使用RequestParser() 可以从 flask.Request.values，以及 flask.Request.json 解析值。这里创建了一个解析对象parser。<code>parser.add_argument(&#39;task&#39;)：</code>向parser对象中添加你要关注的命令行参数和选项，每一个add_argument方法对应一个你要关注的参数或选项。<code>parser.parse_args()：</code>调用parse_args()方法进行解析，解析成功之后即可使用。<code>POST, GET, DELETE</code>获取参数的方式一样。在定义API的时候可以是用<code>@api.param</code>添加参数，在web端测试的时候比较方便。<code>@app.doc(description=&#39;xx&#39;)</code>添加对这个API的描述。<code>@app.response(200,&#39;success&#39;)</code>定义路由code的信息，普遍是用的是200，404，400，403等等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, make_response, request</span><br><span class="line"><span class="keyword">from</span> flask_restplus <span class="keyword">import</span> Api, reqparse, abort, Resource</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">api = Api(app)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = <span class="string">'WHATEVER'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@api.route('/login')</span></span><br><span class="line"><span class="meta">@api.param('username')</span></span><br><span class="line"><span class="meta">@api.doc(description="This is test")</span></span><br><span class="line"><span class="meta">@api.response(200, 'Success')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span><span class="params">(Resource)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">()</span>:</span></span><br><span class="line">        parser = reqparse.RequestParser()</span><br><span class="line">        parser.add_argument(<span class="string">'username'</span>, type=str)</span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        username = args.get(<span class="string">"username"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果结果正确可以直接make_response</span></span><br><span class="line">        <span class="comment"># 如果不正确可以用abort</span></span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">"admin"</span>:</span><br><span class="line">            <span class="keyword">return</span> make_response(jsonify(&#123;<span class="string">"POST"</span>: username&#125;),<span class="number">200</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            abort(<span class="number">400</span>, <span class="string">"username not currect"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">()</span>:</span></span><br><span class="line">        parser = reqparse.RequestParser()</span><br><span class="line">        parser.add_argument(<span class="string">'username'</span>, type=str)</span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        username = args.get(<span class="string">"username"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">"admin"</span>:</span><br><span class="line">            <span class="keyword">return</span> make_response(jsonify(&#123;<span class="string">"GET"</span>: username&#125;),<span class="number">200</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            abort(<span class="number">400</span>, <span class="string">"username not currect"</span>)</span><br><span class="line"></span><br><span class="line">app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>GET 请求测试：</p><p>API的请求方法和flask不太一样，需要 <code>-d 加上参数</code>， POST请求也是一样</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET "http://127.0.0.1:5000/login" -H "accept: application/json" -d "username=admin"</span><br></pre></td></tr></table></figure><p>请求结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"GET"</span>: <span class="string">"admin"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>POST 请求测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST "http://127.0.0.1:5000/login" -H "accept: application/json" -d "username=admin"</span><br></pre></td></tr></table></figure><p>请求结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"POST"</span>: <span class="string">"admin"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给大家看一下<code>abort</code>的显示结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"username not currect"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者大家可以直接打开<code>http://127.0.0.1:5000</code>可以显示界面来测试。 如下图所示： </p><p><img src="/2019/10/09/Flask-API/s.png" alt></p><h1 id="前端请求API"><a href="#前端请求API" class="headerlink" title="前端请求API"></a>前端请求API</h1><p>昨天写的太晚就先睡了，今天给补上怎么用<code>AJAX</code>也就是前端来请求API数据的。大家可以自行了解一下<code>AJAX</code>的function什么的，demo用的是<code>JQuery</code>中的<code>AJAX</code>。因为牵涉到了跨域请求，所以后端也稍微有一点改变。需要用到<code>flask_cors</code>来解决这个问题。只需要在上面的Python代码加两行代码就OK了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS</span><br><span class="line">...... <span class="comment"># 这些是初始化app部分</span></span><br><span class="line">CORS(app)</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>如果不加<code>CROS(app)</code>的话会在浏览器的调试<code>Console</code>出现以下报错：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access to XMLHttpRequest at <span class="string">'http://127.0.0.1:5000/login?username=admi'</span> <span class="keyword">from</span> origin <span class="string">'null'</span> has been blocked by CORS policy: No <span class="string">'Access-Control-Allow-Origin'</span> header is present on the requested resource.</span><br></pre></td></tr></table></figure><p>前端代码具体实现如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    $.ajax (&#123;</span></span><br><span class="line"><span class="javascript">        url: <span class="string">'http://127.0.0.1:5000/login'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            username: <span class="string">"admin"</span></span></span><br><span class="line">        &#125;, </span><br><span class="line"><span class="javascript">        error: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// data 包含了整个的错误信息</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// data.status 指的是返回的错误代码，比如400</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// data.responseJSON.message 指返回的错误信息， username not currect</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"ERROR: "</span>, data)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        type: <span class="string">"GET"</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Flask-API&quot;&gt;&lt;a href=&quot;#Flask-API&quot; class=&quot;headerlink&quot; title=&quot;Flask API&quot;&gt;&lt;/a&gt;Flask API&lt;/h1&gt;&lt;p&gt;给大家分享一下学习flask api的note。首先API只会返回json的类型，不
      
    
    </summary>
    
    
      <category term="Backend" scheme="http://yoursite.com/categories/Backend/"/>
    
      <category term="API" scheme="http://yoursite.com/categories/Backend/API/"/>
    
    
      <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
      <category term="API" scheme="http://yoursite.com/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>Flask Mail</title>
    <link href="http://yoursite.com/2019/10/08/Flask-Mail/"/>
    <id>http://yoursite.com/2019/10/08/Flask-Mail/</id>
    <published>2019-10-08T07:24:57.000Z</published>
    <updated>2019-10-18T11:58:48.256Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>由于最近项目的需求，了解了一下flask mail的内容，flask mail一般是用来做注册时候的邮箱验证，或者改密码的时候的验证，还有就是一些预定信息的通知，或者是tax的一些内容。当然网上的教程很多，但是大部分都不够全面，有的是基础，有的是加深，所以我打算在这里做一个关于flask mail尽量全面的教程。</p><h1 id="安装-Flask-Mail"><a href="#安装-Flask-Mail" class="headerlink" title="安装 Flask Mail"></a>安装 Flask Mail</h1><p>如果大家没有使用过flask mail，需要先用pip3安装一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install flask_mail</span><br></pre></td></tr></table></figure><h1 id="Flask-Mail-的配置"><a href="#Flask-Mail-的配置" class="headerlink" title="Flask Mail 的配置"></a>Flask Mail 的配置</h1><table><thead><tr><th align="center"><strong>配置</strong></th><th align="center"><strong>默认值</strong></th><th align="center"><strong>功能</strong></th></tr></thead><tbody><tr><td align="center"><strong>MAIL_SERVER</strong></td><td align="center">localhost</td><td align="center">邮件服务器</td></tr><tr><td align="center"><strong>MAIL_PORT</strong></td><td align="center">25</td><td align="center">邮件端口（一般是465）</td></tr><tr><td align="center"><strong>MAIL_USE_TLS</strong></td><td align="center">False</td><td align="center">是否使用TLS协议（一般不使用）</td></tr><tr><td align="center"><strong>MAIL_USE_SSL</strong></td><td align="center">False</td><td align="center">是否使用SSL协议（大多数使用）</td></tr><tr><td align="center"><strong>MAIL_DEBUG</strong></td><td align="center">app.debug</td><td align="center">是否为DEBUG模式，打印调试消息（一般默认开启）</td></tr><tr><td align="center"><strong>MAIL_USERNAME</strong></td><td align="center">None</td><td align="center">用户名</td></tr><tr><td align="center"><strong>MAIL_PASSWORD</strong></td><td align="center">None</td><td align="center">密码 or 授权码</td></tr><tr><td align="center"><strong>MAIL_DEFAULT_SENDER</strong></td><td align="center">None</td><td align="center">默认发送者</td></tr><tr><td align="center"><strong>MAIL_MAX_EMAILS</strong></td><td align="center">None</td><td align="center">一次连接中的发送邮件的上限</td></tr><tr><td align="center"><strong>MAIL_ASCII_ATTACHMENTS</strong></td><td align="center">False</td><td align="center">如果 MAIL_ASCII_ATTACHMENTS 设置成 True 的话，文件名将会转换成 ASCII 的。一般用于添加附件。</td></tr></tbody></table><p>大部分情况下我们只需要设置<code>MAIL_USE_TLS</code>, <code>MAIL_USE_SSL</code>, <code>MAIL_USERNAME</code>, <code>MAIL_PASSWORD</code>, <code>MAIL_DEFAULT_SENDER</code>这些就可以了</p><h1 id="使用Flask-Mail"><a href="#使用Flask-Mail" class="headerlink" title="使用Flask Mail"></a>使用Flask Mail</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置邮件服务器</span></span><br><span class="line"><span class="comment"># 如果是163邮箱的话是: smtp.163.com</span></span><br><span class="line"><span class="comment"># 如果是gmail邮箱的话是: smtp.gamil.com</span></span><br><span class="line"><span class="comment"># 如果是自己注册的域名邮箱的话，在购买域名邮箱的时候会给特定的server</span></span><br><span class="line">app.config[<span class="string">'MAIL_SERVER'</span>] = <span class="string">'smtp.qq.com'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 端口要根据设置来改，一般是用465</span></span><br><span class="line">app.config[<span class="string">'MAIL_PORT'</span>] = <span class="number">465</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用ssl传输协议，普遍是用ssl</span></span><br><span class="line">app.config[<span class="string">'MAIL_USE_SSL'</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置邮件的用户名，只需要@xxqq.com前面的内容，不需要包含@xx.com</span></span><br><span class="line">app.config[<span class="string">'MAIL_USERNAME'</span>] = <span class="string">'123456'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在qq邮件里面，这个密码是指的授权码!</span></span><br><span class="line"><span class="comment"># 不是密码，一定要授权码，一般是16位的字符</span></span><br><span class="line"><span class="comment"># 如果是gmail或者别的可以直接是用密码</span></span><br><span class="line">app.config[<span class="string">'MAIL_PASSWORD'</span>] = <span class="string">'aaaaaaaaaaaaaaaa'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认发送的邮箱，需要包含@xx.com</span></span><br><span class="line">app.config[<span class="string">'MAIL_DEFAULT_SENDER'</span>] = <span class="string">'123456@qq.com'</span></span><br><span class="line"></span><br><span class="line">mail = Mail(app)</span><br></pre></td></tr></table></figure><h2 id="怎么使用HTML模板"><a href="#怎么使用HTML模板" class="headerlink" title="怎么使用HTML模板"></a>怎么使用HTML模板</h2><p>大部分时候不管发送邮件验证还是什么，HTML的模板都是不变的，只是改变了里面的内容，所以我们先说一下怎么使用HTML模板来发送，最主要的一个function就是<code>render_template</code>这个函数，因为flask使用的是<strong><em>Jinja2</em></strong>的模板，<code>render_template</code>函数可以把Jinja2的模板转义成string的格式。所以我们用的<code>return render_template</code>就是把HTML转成string，然后发回给浏览器。</p><p>我们用Jinja2在templates的文件夹下定义一个HTML文件叫<code>hello.html</code>, 这样我们就可以传进来参数，来修改username。具体的使用方法下面两种发送方式里面都有例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;Hello &#123;&#123; username &#125;&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h2 id="不使用异步发送"><a href="#不使用异步发送" class="headerlink" title="不使用异步发送"></a>不使用异步发送</h2><p>Flask mail可以是用异步发送，可以不适用，首先讲一下不使用异步发送的做法。也可以用<code>render_template</code>的方法来修改<code>msg.html</code>的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># recipients是list，可以添加多个收件人</span></span><br><span class="line"><span class="comment"># sender 是发件人</span></span><br><span class="line"><span class="comment"># Message第一个变量Hello是邮件的标题</span></span><br><span class="line">msg = Message(<span class="string">'Hello'</span>, sender=<span class="string">'123456@qq.com'</span>, recipients=[<span class="string">'123456@qq.com'</span>])</span><br><span class="line">msg.body = <span class="string">'Hello'</span></span><br><span class="line"><span class="comment"># HTML的内容可以直接写</span></span><br><span class="line">msg.html = <span class="string">"&lt;h1&gt;Hello world&lt;/h1&gt;"</span></span><br><span class="line"><span class="comment"># 也可以用render_template</span></span><br><span class="line">msg.html = render_template(<span class="string">'hello.html'</span>,username=<span class="string">'xxx'</span>)</span><br><span class="line">mail.send(msg)</span><br></pre></td></tr></table></figure><p>如果配置什么都没有错误的话可以直接发送出去了。</p><h2 id="使用异步发送"><a href="#使用异步发送" class="headerlink" title="使用异步发送"></a>使用异步发送</h2><p>从电子邮件发送开始，直到电子邮件交付后，给浏览器发回其响应，在整个过程中，Web服务器会一直阻塞。如果我们试图发送电子邮件到一个服务器是缓慢的，所以使用多线程异步发送电子邮件可以避免处理请求过程中不必要的延迟，将发送电子邮件的函数使用Thread来运行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异步发送function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">async_start</span><span class="params">(app, msg)</span>:</span></span><br><span class="line">    <span class="comment"># 获取当前程序的上下文</span></span><br><span class="line">    <span class="keyword">with</span> app.app_context():</span><br><span class="line">        <span class="comment"># 发送邮件</span></span><br><span class="line">        mail.send(msg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义发送函数, message的配置和上面讲的一样</span></span><br><span class="line"><span class="comment"># **kwargs 指传进来的参数, 可以传多个参数进来。eg: username = 'xxx', link = 'xxx.com'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(to, subject, template, **args)</span>:</span></span><br><span class="line">    msg = Message(subject, sender = <span class="string">'123456@qq.com'</span>, recipients=[to])</span><br><span class="line">    msg.html = render_template(template, **args)</span><br><span class="line">    thread = Thread(target=async_start, args=[app, msg])</span><br><span class="line">    thread.start()</span><br><span class="line">    <span class="comment"># 返回调用的结果</span></span><br><span class="line">    <span class="keyword">return</span> thread</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 调用send_mail</span></span><br><span class="line"><span class="comment"># 第一个参数是收件人，第二个是标题，第三个是html的名字，第四个是render_template里面需要包含的变量（相当于render_template('hello.html', username='xxx')）</span></span><br><span class="line"><span class="meta">@app.route('/send')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span><span class="params">()</span>:</span></span><br><span class="line">  send(<span class="string">'123456@qq.com'</span>, <span class="string">'Hello world'</span>, <span class="string">'hello.html'</span>, username=<span class="string">'xxx'</span>)</span><br></pre></td></tr></table></figure><h1 id="关于Flask-Mail发送附件"><a href="#关于Flask-Mail发送附件" class="headerlink" title="关于Flask Mail发送附件"></a>关于Flask Mail发送附件</h1><p>当flask mail需要发送附件的时候，如果MAIL_ASCII_ATTACHMENTS 设置成True 的话，文件名将会转换成ASCII 的。 当文件名是以UTF-8 编码的时候，使用邮件转发的时候会修改邮件内容并且混淆Content-Disposition 描述，这个时候MAIL_ASCII_ATTACHMENTS 配置项是十分有用的。转换成ASCII 的基本方式就是对non-ASCII 字符的去除。任何一个unicode 字符能够被NFKD 分解成一个或者多个ASCII 字符。</p><p><strong>发送照片：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> app.open_resource(<span class="string">"image.png"</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    msg.attach(<span class="string">"image.png"</span>, <span class="string">"image/png"</span>, fp.read())</span><br></pre></td></tr></table></figure><p><strong>发送PDF：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> app.open_resource(<span class="string">'xx.pdf'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        msg.attach(<span class="string">'xx.pdf'</span>, <span class="string">"application/pdf"</span>, fp.read())</span><br></pre></td></tr></table></figure><p><strong><em>注：如果想在HTML里面使用css，需要自己在<code>&lt;style&gt;&lt;/style&gt;</code>里面写css，不可以直接用bootstrap这些框架。</em></strong></p><h1 id="关于怎么使用Gmail"><a href="#关于怎么使用Gmail" class="headerlink" title="关于怎么使用Gmail"></a>关于怎么使用Gmail</h1><ol><li>首先开启安全性较低的应用的访问权限 <a href="https://myaccount.google.com/lesssecureapps" target="_blank" rel="noopener">URL</a></li></ol><p><img src="/2019/10/08/Flask-Mail/less.png" alt></p><ol start="2"><li>启用<strong>IMAP</strong> <a href="https://mail.google.com/mail/#settings/fwdandpop" target="_blank" rel="noopener">URL</a>:</li></ol><p><img src="/2019/10/08/Flask-Mail/enable.png" alt></p><h1 id="关于怎么使用QQ邮箱"><a href="#关于怎么使用QQ邮箱" class="headerlink" title="关于怎么使用QQ邮箱"></a>关于怎么使用QQ邮箱</h1><ol><li>首先开启<strong><em>IMAP/SMTP服务</em></strong>。在邮箱”设置-&gt;账户“ 里面设置。</li></ol><p><img src="/2019/10/08/Flask-Mail/qq.png" alt></p><ol start="2"><li>需要生成授权码，也在同一个页面</li></ol><p><img src="/2019/10/08/Flask-Mail/ma.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;由于最近项目的需求，了解了一下flask mail的内容，flask mail一般是用来做注册时候的邮箱验证，或者改密码的时候的验证，还有就
      
    
    </summary>
    
    
      <category term="Backend" scheme="http://yoursite.com/categories/Backend/"/>
    
    
      <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
      <category term="Mail" scheme="http://yoursite.com/tags/Mail/"/>
    
  </entry>
  
  <entry>
    <title>How to use hexo</title>
    <link href="http://yoursite.com/2019/10/07/How-to-use-hexo/"/>
    <id>http://yoursite.com/2019/10/07/How-to-use-hexo/</id>
    <published>2019-10-07T03:19:00.000Z</published>
    <updated>2019-10-07T03:21:48.954Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="Frontend" scheme="http://yoursite.com/categories/Frontend/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
