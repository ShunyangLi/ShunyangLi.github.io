<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shunyang Li</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shunyangli.github.io/"/>
  <updated>2022-06-14T06:34:12.823Z</updated>
  <id>https://shunyangli.github.io/</id>
  
  <author>
    <name>Shunyang Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Entropy</title>
    <link href="https://shunyangli.github.io/post/663/"/>
    <id>https://shunyangli.github.io/post/663/</id>
    <published>2022-06-14T06:15:20.000Z</published>
    <updated>2022-06-14T06:34:12.823Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Entropy"><a href="#Entropy" class="headerlink" title="Entropy"></a>Entropy</h1><p>Entropy can be used as a measure of uncertainty in information theory.</p><p>Entropy <code>H(Y)</code> of a random <code>Y</code> with <code>n</code> different possible values:<br>$$<br>H(Y) =-\sum^{n}_{i=1}P(y_i)log_2P(y_i)<br>$$</p><p>Where $P(y_i)$ is the probaility that random variable <code>Y</code> equals $y_i$ (One of <code>n</code> different possible values of <code>Y</code>).</p><p><code>n</code> represents the number of types of outcomes, for example, if the outcome is 1, 2, 3 then n is 3. $P(y_i)$represents the probability of different outcomes, for example, if 1, 2, 3 then the probability of 1 is $1/3$.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><table><thead><tr><th align="center">$X_1$</th><th align="center">$X_2$</th><th align="center">Y</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">F</td><td align="center">T</td></tr><tr><td align="center">T</td><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">F</td><td align="center">F</td><td align="center">F</td></tr><tr><td align="center">F</td><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">T</td><td align="center">F</td><td align="center">F</td></tr></tbody></table><p>Y has two values: T and F. In the equation <code>n</code> = 2. Therefore, we can get:</p><p>$$<br>H(Y) =-\sum^{n}_{i=1}P(y_i)log_2P(y_i)<br>$$</p><p>$$<br>H(Y) =-\frac{3}{5}log_2\frac{3}{5}-\frac{2}{5}log_2\frac{2}{5} \approx0.292<br>$$</p><h2 id="Conditional-entropy"><a href="#Conditional-entropy" class="headerlink" title="Conditional entropy"></a>Conditional entropy</h2><p>Conditional entropy $H(Y|X=x_j)$ of <code>Y</code> given $X=x_i$.<br>$$<br>H(Y|X=x_j)=-\sum^{n}<em>{i=1}P(y_i|X=x_j)log_2P(y_i|X=x_j)<br>$$<br>After split we can get:<br>$$<br>H(Y|X)=\sum^{k}</em>{j=1}P(x_j)H(Y|X=x_j)<br>$$</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><table><thead><tr><th align="center">$X_1$</th><th align="center">$X_2$</th><th align="center">Y</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">F</td><td align="center">T</td></tr><tr><td align="center">T</td><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">F</td><td align="center">F</td><td align="center">F</td></tr><tr><td align="center">F</td><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">T</td><td align="center">F</td><td align="center">F</td></tr></tbody></table><p>Suppose we split the data based on the value of $X_1$. $X_1$ has two possible values: T and F. We can compute the conditional entropy for $X_1=T$ and $X_1=F$.</p><blockquote><p>Compute $X_1=T$</p></blockquote><table><thead><tr><th align="center">$X_1$</th><th align="center">Y</th></tr></thead><tbody><tr><td align="center"><em>T</em></td><td align="center"><em>T</em></td></tr><tr><td align="center"><em>T</em></td><td align="center"><em>T</em></td></tr><tr><td align="center"><em>T</em></td><td align="center"><em>F</em></td></tr><tr><td align="center">F</td><td align="center">T</td></tr><tr><td align="center">F</td><td align="center">F</td></tr></tbody></table><p>After splitting, when $X_1=T$, Y has two values. Therefore, $P(Y=T|X_1=T) = 2/3$ and $P(Y=F|X_1=T) = 2/3$.</p><p>We can jave the following entropy when $X_1=T$:</p><p>$$<br>H(Y|X_1=T)=-\sum^{n}_{i=1}P(y_i|X_1=T)log_2P(y_i|X_1=T)\<br>= -\frac{2}{3}log_2(\frac{2}{3})-\frac{1}{3}log_2(\frac{1}{3}) \<br>\approx 0.28<br>$$</p><blockquote><p>Compute $X_1=F$</p></blockquote><table><thead><tr><th align="center">$X_1$</th><th align="center">Y</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">T</td><td align="center">F</td></tr><tr><td align="center"><em>F</em></td><td align="center"><em>T</em></td></tr><tr><td align="center"><em>F</em></td><td align="center"><em>F</em></td></tr></tbody></table><p>After splitting, when $X_1=F$, Y has two values. Therefore, $P(Y=T|X_1=F) = 1/2$ and $P(Y=F|X_1=T) = 1/2$.</p><p>We can jave the following entropy when $X_1=F$:</p><p>$$<br>H(Y|X_1=T)=-\sum^{n}_{i=1}P(y_i|X_1=F)log_2P(y_i|X_1=F)\<br>= -\frac{1}{2}log_2(\frac{1}{2})-\frac{1}{2}log_2(\frac{1}{2}) \<br>\approx 0.3<br>$$</p><h3 id="Entropy-after-split"><a href="#Entropy-after-split" class="headerlink" title="Entropy after split"></a>Entropy after split</h3><table><thead><tr><th align="center">$X_1$</th><th align="center">Y</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">T</td><td align="center">F</td></tr><tr><td align="center">F</td><td align="center">T</td></tr><tr><td align="center">F</td><td align="center">F</td></tr></tbody></table><p>We get $P(X_1=T)=3/5$ and $P(X_1=F)=2/5$. We have the following overall conditional entropy:</p><p>$$<br>H(Y|X_1)=\frac{3}{5}<em>0.28+\frac{2}{5}</em>0.3=0.288<br>$$</p><h2 id="Information-Gain"><a href="#Information-Gain" class="headerlink" title="Information Gain"></a>Information Gain</h2><p>Information Gain $I(X,Y)$ is defined as the expected reduction in entropy of target varible Y after split over variable X.</p><p>$$<br>I(X,Y)=H(Y)-H(Y|X)<br>$$</p><p>In the previous example, we can get the infromation gain is:</p><p>$$<br>I(X_1,Y)=H(Y)-H(Y|X_1)=0.292-0.288\approx0.004<br>$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Entropy&quot;&gt;&lt;a href=&quot;#Entropy&quot; class=&quot;headerlink&quot; title=&quot;Entropy&quot;&gt;&lt;/a&gt;Entropy&lt;/h1&gt;&lt;p&gt;Entropy can be used as a measure of uncertainty in
      
    
    </summary>
    
    
      <category term="COMP" scheme="https://shunyangli.github.io/categories/COMP/"/>
    
    
      <category term="COMP" scheme="https://shunyangli.github.io/tags/COMP/"/>
    
  </entry>
  
  <entry>
    <title>COMP9311 Extension</title>
    <link href="https://shunyangli.github.io/post/5fc4/"/>
    <id>https://shunyangli.github.io/post/5fc4/</id>
    <published>2022-05-07T23:52:21.000Z</published>
    <updated>2022-06-14T06:15:58.957Z</updated>
    
    <content type="html"><![CDATA[<h1 id="COMP9311-extension"><a href="#COMP9311-extension" class="headerlink" title="COMP9311 extension"></a>COMP9311 extension</h1><p>This is an extension knowledge about COMP9311</p><h2 id="Auto-deploy-PostgreSQL"><a href="#Auto-deploy-PostgreSQL" class="headerlink" title="Auto deploy PostgreSQL"></a>Auto deploy PostgreSQL</h2><p>You can find the shell script <a href="deploy.sh">here</a>. You can execute the following command in <code>grieg</code> server to deploy the SQL server.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod +x deploy.sh</span><br><span class="line"></span><br><span class="line">./deploy.sh</span><br></pre></td></tr></table></figure><p>The code in <code>deploy.sh</code> is:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">user=$(whoami)</span><br><span class="line"></span><br><span class="line">priv srvr</span><br><span class="line"></span><br><span class="line">~cs9311/bin/pginit</span><br><span class="line"></span><br><span class="line">echo "if [ \`hostname\` = \"grieg\" ]</span><br><span class="line">then</span><br><span class="line">    source /srvr/$user/env</span><br><span class="line">fi</span><br><span class="line">" &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure><h2 id="Backgroud-information"><a href="#Backgroud-information" class="headerlink" title="Backgroud information"></a>Backgroud information</h2><ul><li><code>grieg</code> means a server named grieg</li></ul><h2 id="Login-CSE-GRIEG"><a href="#Login-CSE-GRIEG" class="headerlink" title="Login CSE/GRIEG"></a>Login CSE/GRIEG</h2><p>You can log in to <code>cse</code> server by using the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh ZID@cse.unsw.edu.au</span><br></pre></td></tr></table></figure><p>PS: Please replace <code>ZID</code> with your zid, and the password is same as your zid passowrd (typing the password in terminal is <strong>unvisitable</strong>).</p><p>After log in to the <code>cse</code> server, then you can log in to <code>grieg</code> server by using the following command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh grieg</span><br></pre></td></tr></table></figure><p>Also, you can log in to <code>grieg</code> directly by using the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh ZID@grieg.cse.unsw.edu.au</span><br></pre></td></tr></table></figure><p>PS: Please replace <code>ZID</code> with your zid, and the password is same as your zid passowrd (typing the password in terminal is <strong>unvisitable</strong>).</p><h2 id="Log-in-to-cse-server-without-password"><a href="#Log-in-to-cse-server-without-password" class="headerlink" title="Log in to cse server without password"></a>Log in to <code>cse</code> server without password</h2><p>You can log in to <code>cse</code> server without password by uploading <code>ssh-key</code> into the server. If you did not have a <code>ssh-key</code>, you can generate a <code>ssh-key</code> by using the following command (please execute these commands in personal computer) :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>Then you can use <code>ssh-copy-id</code> to copy your key to server:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id ZID@cse.unsw.edu.au</span><br></pre></td></tr></table></figure><p>PS: Please replace <code>ZID</code> with your zid.</p><p>You can find more details <a href="https://www.ssh.com/ssh/copy-id" target="_blank" rel="noopener">here</a></p><h2 id="bash-profile-settings"><a href="#bash-profile-settings" class="headerlink" title=".bash_profile settings"></a>.bash_profile settings</h2><p>When you logging in to <code>cse</code> server, you may can not find these files (.bash_profile, .bashrc or .profile). You can use <code>touch</code> command to create a empty file in home directory.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~  // switch the directory into home directory</span><br><span class="line">touch .bash_profile</span><br></pre></td></tr></table></figure><p>Then you can find the <code>.bash_profile</code> file by using:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al</span><br></pre></td></tr></table></figure><p>Then you can add the following config code into <code>.bash_profile</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if [ `hostname` = "grieg" ]</span><br><span class="line">then</span><br><span class="line">    source /srvr/ZID/env</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>PS: Please replace <code>ZID</code> with your zid.</p><h2 id="Terminal-display"><a href="#Terminal-display" class="headerlink" title="Terminal display"></a>Terminal display</h2><p>Several students asked how to modify the Linux terminal display. After logging in to <code>grieg</code> server, on the left hand side it looks like:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grieg %</span><br></pre></td></tr></table></figure><p>It only shows the hostname which is very inconvenient when we want to know which folder we are in. The following commands can help you to solve the issue:</p><ol><li>Log in to <code>grieg</code> server</li><li>Add this line <code>export PS1=&quot;\u@\h \w $ &quot;</code> into the <code>.bash_profile</code> file</li><li>Execute <code>source ~/.bash_profile</code></li></ol><p>Then the terminal display should like:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZID@grieg ~ $</span><br></pre></td></tr></table></figure><p>Where <code>~</code> means home directory.</p><p>You can find more details <a href="https://www.thegeekstuff.com/2008/09/bash-shell-ps1-10-examples-to-make-your-linux-prompt-like-angelina-jolie/" target="_blank" rel="noopener">here</a></p><h2 id="Upload-files-to-cse-server"><a href="#Upload-files-to-cse-server" class="headerlink" title="Upload files to cse server"></a>Upload files to <code>cse</code> server</h2><p>Use <code>scp</code> (srcure copy) command can upload files/directory from local (Linux or Mac system) to remote <code>cse</code> server:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp [source file] [username]@[destination server]:/path/</span><br></pre></td></tr></table></figure><p>For example:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp schema.sql ZID@cse.unsw.edu.au:~</span><br></pre></td></tr></table></figure><p>Which means upload the <code>schema.sql</code> file into your <code>cse</code> server home directory.</p><p>If you want to upload a directory you can use:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r [source directory] [username]@[destination server]:/path/</span><br></pre></td></tr></table></figure><p>If you are using windows system, you can have a look <code>winscp</code>. And UNSW gives a <a href="https://taggi.cse.unsw.edu.au/FAQ/Accessing_Your_Files/" target="_blank" rel="noopener">guideline</a> about that</p><h2 id="SSH-config"><a href="#SSH-config" class="headerlink" title="SSH config"></a>SSH config</h2><p>After finished configuration of <em>log in without password. (section 1.3)</em>. You can config the ssh config file like:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host cse</span><br><span class="line">    HostName cse.unsw.edu.au</span><br><span class="line">    Port 22</span><br><span class="line">    User ZID</span><br></pre></td></tr></table></figure><p>Where <code>ZID</code> is your zid. Now, you can use <code>ssh cse</code> instead of <code>ssh zid@cse.unsw.edu.au</code>.</p><h1 id="Lab-02"><a href="#Lab-02" class="headerlink" title="Lab 02"></a>Lab 02</h1><p>The lab 02 slides is available <a href="https://docs.google.com/presentation/d/1nRCQGahTeVD0qvVuNeTMYEBgLvrqs-rvqKCjTJjMUOc/edit?usp=sharing" target="_blank" rel="noopener">here</a>, if you have any issues, please email me.</p><h1 id="Lab03"><a href="#Lab03" class="headerlink" title="Lab03"></a>Lab03</h1><h2 id="Step-up"><a href="#Step-up" class="headerlink" title="Step up"></a>Step up</h2><ol><li><p>Download the <a href="https://www.cse.unsw.edu.au/~cs9311/21T1/lab/04/weblog.zip" target="_blank" rel="noopener">weblog.zip</a> by using <code>wget</code> command in the terminal: <code>wget https://www.cse.unsw.edu.au/~cs9311/21T1/lab/04/weblog.zip</code></p></li><li><p>Unzip the weblog.zip files: <code>unzip weblog.zip</code></p></li><li><p>Create a database for this lab: <code>createdb weblog</code></p></li><li><p>Load SQL file</p><ol><li><p>switch to the weblog directory: <code>cd weblog</code></p></li><li><p>load schema: <code>psql weblog -f schema.sql</code></p></li><li><p>load data sql file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">psql weblog -f Hosts.sql</span><br><span class="line">psql weblog -f Sessions.sql</span><br><span class="line">psql weblog -f Accesses.sql</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>Regex online test <a href="https://regexr.com" target="_blank" rel="noopener">regex</a></p><h1 id="K-Core-decomposition"><a href="#K-Core-decomposition" class="headerlink" title="K-Core decomposition"></a>K-Core decomposition</h1><p>Given a graph G, the k-core of G can be computed by recursively deleting every node and its adjacent edges if its degree is less than <code>k</code>.<br>The python code of k-core as shown in the following part.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">edges = &#123;</span><br><span class="line">    <span class="string">'a'</span>: [<span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>],</span><br><span class="line">    <span class="string">'b'</span>: [<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>],</span><br><span class="line">    <span class="string">'c'</span>: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>],</span><br><span class="line">    <span class="string">'d'</span>: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_k_core</span><span class="params">(k, edges)</span>:</span></span><br><span class="line">    deleted_nodes = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> edges:</span><br><span class="line">            <span class="keyword">if</span> len(edges[node]) &lt; k:</span><br><span class="line">                deleted_nodes.append(node)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> len(deleted_nodes) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> deleted_nodes:</span><br><span class="line">            <span class="keyword">if</span> u <span class="keyword">not</span> <span class="keyword">in</span> edges:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> v <span class="keyword">in</span> edges[u]:</span><br><span class="line">                edges[v].remove(u)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">del</span> edges[u]</span><br><span class="line">        deleted_nodes.clear()</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">", "</span>.join(edges.keys()))</span><br><span class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> edges:</span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> edges[u]:</span><br><span class="line">            print(<span class="string">"&#123;&#125;, &#123;&#125;"</span>.format(u,v))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    compute_k_core(<span class="number">2</span>, edges=copy.deepcopy(edges))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;COMP9311-extension&quot;&gt;&lt;a href=&quot;#COMP9311-extension&quot; class=&quot;headerlink&quot; title=&quot;COMP9311 extension&quot;&gt;&lt;/a&gt;COMP9311 extension&lt;/h1&gt;&lt;p&gt;This i
      
    
    </summary>
    
    
      <category term="COMP" scheme="https://shunyangli.github.io/categories/COMP/"/>
    
    
      <category term="COMP" scheme="https://shunyangli.github.io/tags/COMP/"/>
    
  </entry>
  
  <entry>
    <title>Upload Large File</title>
    <link href="https://shunyangli.github.io/post/4707/"/>
    <id>https://shunyangli.github.io/post/4707/</id>
    <published>2022-04-30T14:30:48.000Z</published>
    <updated>2022-05-03T05:31:45.346Z</updated>
    
    <content type="html"><![CDATA[<p>python实现大文件切片上传。有段时间没学习一下新东西了，最近偶尔在学习一下并行和分布式的东西。大文件上传的方式有点并行处理的那味道。所以就抽时间写了一点python实现大文件上传，代码写的比较简陋，大家感兴趣的可以自己实现一个。大部分上传文件其实是在前端实现的，但是原理都差不多，知道懂原理实现就很简单。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>文件上传这个需求在哪都有，网盘，上传各种文件等等。在文件比较大的时候有一些比较容易遇到的问题：</p><ol><li>超时。因为前端或者后端代理都有限制最长请求时间，一旦超时文件就没办法长上传成功。</li><li>大小限制。一般后端对上传文件大小会有一定限制。</li></ol><p>当然我们可以通过调整最大请求时间和大小限制来解决这个问题，但是会对服务器造成负载。上传失败重来这玩意有点头大。</p><h2 id="文件切片"><a href="#文件切片" class="headerlink" title="文件切片"></a>文件切片</h2><p>我们可以通过把文件切分成若干个小文件，并且把这些小文件并行的上传到后台，这样的话会节省大量的时间。当上传完成之后，后台会对这些若干个小文件进行合并。这个有点类似分布式（HDFS）的储存方法。</p><p>我们可以把文件读取成bytes格式，然后对这些bytes进行切片：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span><span class="params">(filename)</span>:</span></span><br><span class="line">    CHUNSIZE = <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line">    file_size = os.stat(filename).st_size</span><br><span class="line">    f = open(filename, <span class="string">'rb'</span>)</span><br><span class="line">    data = f.read()</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"file size: "</span>, file_size)</span><br><span class="line"></span><br><span class="line">    cursor = <span class="number">0</span></span><br><span class="line">    chunk_list = []</span><br><span class="line">    <span class="keyword">while</span> cursor &lt;= file_size:</span><br><span class="line">        chunk_list.append(data[cursor:cursor + CHUNSIZE]) </span><br><span class="line">        cursor = cursor + CHUNSIZE</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"chunk number: "</span>, len(chunk_list))</span><br></pre></td></tr></table></figure><p>我们可以根据网络状态，文件大小等因素来决定<code>CHUNSIZE</code>的大小。为了方便实现，我这里直接固定了切片的大小。在上传到后台的时候我们需要考虑切片文件的顺序，不然可能会导致文件发生错误，当然这个是后台需要实现的功能，可以稍后讨论。为了让资源得到充分利用我们可以使用多线程进行上传，如果是前端可以采用异步的方式。在这里我用的是<code>Thread</code>的方式实现多线程上传。</p><h2 id="文件合并"><a href="#文件合并" class="headerlink" title="文件合并"></a>文件合并</h2><p>文件合并常见的方式有：</p><ol><li>上传完所有的小文件之后发送一个请求来合并文件，请求的时候可以传递合并之后文件的名字。</li><li>后台记录切片的<code>index</code>，当达到末尾的时候自动合并。</li></ol><p>在这里我实现的是第一种方法（因为懒/(ㄒoㄒ)/~~）。</p><p>先简单介绍一个文件合并的原理，先把所有切分的文件根据bytes的格式读取，然后把这些读取的bytes按照顺序写入到新的文件中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'./xx.tar.bz2'</span>, <span class="string">'ab'</span>)</span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> chunk_list:</span><br><span class="line">    f.write(chunk)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>当把所有的文件都写入到文件之后就成功把这个文件合并了。注意：<code>ab</code>表示appending bytes。</p><h2 id="文件秒传"><a href="#文件秒传" class="headerlink" title="文件秒传"></a>文件秒传</h2><p>文件秒传是指如果后台已经有一个一样的文件，那么就没必要再次上传，直接返回上传成功即可。这个功能还是比较使用的，比如某盘的资源共享等等。</p><p>妙传的关键在于文件的唯一标识。我们可以根据文件的二进制编码进行计算hash值，用来当作文件的唯一标识。通常使用的算法是<code>md5</code>。对于<code>md5</code>算法，我们也有两种不同的方式去计算文件的hahs值。第一种是直接计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">f = open(filename, <span class="string">'rb'</span>).read()</span><br><span class="line">md5 = hashlib.md5(f)</span><br><span class="line">hash = md5.hexdigest()</span><br><span class="line">print(hash)</span><br></pre></td></tr></table></figure><p>第二种根据每行数据进行update hash值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> lines:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        md5.update(line)</span><br><span class="line">hash = md5.hexdigest()</span><br><span class="line">print(hash)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总体代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upload</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, filename, url, CHUNSIZE=<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">30</span>)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.filename = filename</span><br><span class="line">        self.url = url</span><br><span class="line">        self.md5 = <span class="string">""</span></span><br><span class="line">        self.chunk_list = []</span><br><span class="line">        self.CHUNSIZE = CHUNSIZE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">md5_small</span><span class="params">(self)</span>:</span></span><br><span class="line">        f = open(self.filename, <span class="string">'rb'</span>).read()</span><br><span class="line">        md5 = hashlib.md5(f)</span><br><span class="line">        self.md5 = md5.hexdigest()</span><br><span class="line">        print(md5.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">md5_large</span><span class="params">(self)</span>:</span></span><br><span class="line">        md5 = hashlib.md5()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> open(self.filename, <span class="string">'rb'</span>) <span class="keyword">as</span> lines:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">                md5.update(line)</span><br><span class="line">        </span><br><span class="line">        self.md5 = md5.hexdigest()</span><br><span class="line">        print(md5.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">split</span><span class="params">(self)</span>:</span></span><br><span class="line">        file_size = os.stat(self.filename).st_size</span><br><span class="line">        f = open(self.filename, <span class="string">'rb'</span>)</span><br><span class="line">        data = f.read()</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"file size: "</span>, file_size)</span><br><span class="line"></span><br><span class="line">        cursor = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> cursor &lt;= file_size:</span><br><span class="line">            self.chunk_list.append(data[cursor:cursor + self.CHUNSIZE]) </span><br><span class="line">            cursor = cursor + self.CHUNSIZE</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"chunk number: "</span>, len(self.chunk_list))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">async_upload</span><span class="params">(self, chunks, offset, filename=<span class="string">"upt"</span>)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> index, chunk <span class="keyword">in</span> enumerate(chunks):</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">'index'</span>: index + offset,</span><br><span class="line">                <span class="string">'chunk'</span>: chunk.decode(<span class="string">'latin-1'</span>),</span><br><span class="line">                <span class="string">'filename'</span>: filename</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            response = requests.get(</span><br><span class="line">                url=<span class="string">'&#123;&#125;/upload'</span>.format(self.url),</span><br><span class="line">                data=json.dumps(data),</span><br><span class="line">                headers = &#123;</span><br><span class="line">                    <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">                    <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            print(response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        merge is not belong to this part</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"path"</span>: <span class="string">"upt"</span>,</span><br><span class="line">            <span class="string">"filename"</span>: <span class="string">"xx.tar.bz2"</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.get(</span><br><span class="line">            url=<span class="string">'&#123;&#125;/merge'</span>.format(self.url),</span><br><span class="line">            data=json.dumps(data),</span><br><span class="line">            headers = &#123;</span><br><span class="line">                <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">                <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        print(response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">(self)</span>:</span></span><br><span class="line">        TREADNUM = <span class="number">3</span></span><br><span class="line">        CHUNKSIZE = len(self.chunk_list)</span><br><span class="line">        PERSIZE = int(CHUNKSIZE / TREADNUM)</span><br><span class="line">        threads = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, CHUNKSIZE, PERSIZE):</span><br><span class="line">            t = Thread(target=self.async_upload, args=[self.chunk_list[i : i + PERSIZE], i])</span><br><span class="line">            t.start()</span><br><span class="line">            threads.append(t)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">                <span class="keyword">if</span> t.is_alive():</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">"Finish"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    upload = Upload(<span class="string">'comp-books-master.zip'</span>, <span class="string">'http://127.0.0.1:5000'</span>)</span><br><span class="line">    upload.split()</span><br><span class="line">    upload.upload()</span><br><span class="line">    <span class="comment"># upload.merge()</span></span><br></pre></td></tr></table></figure><p>后台模拟代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">CURR = os.getcwd()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/upload', methods=["POST","GET"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    data = request.get_json()</span><br><span class="line">    index = data[<span class="string">'index'</span>]</span><br><span class="line">    chunk = data[<span class="string">'chunk'</span>]</span><br><span class="line">    filename = data[<span class="string">'filename'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(os.path.join(CURR, filename)):</span><br><span class="line">        os.mkdir(os.path.join(CURR, filename))</span><br><span class="line">    </span><br><span class="line">    f = open(os.path.join(CURR, filename, str(index)), <span class="string">'ab'</span>)</span><br><span class="line">    f.write(chunk.encode(<span class="string">'latin-1'</span>))</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"SUCCESS"</span>, <span class="number">200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/merge', methods=["POST","GET"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">meger</span><span class="params">()</span>:</span></span><br><span class="line">    data = request.get_json()</span><br><span class="line">    mp = data[<span class="string">'path'</span>]</span><br><span class="line">    filename = data[<span class="string">'filename'</span>]</span><br><span class="line"></span><br><span class="line">    f = open(filename, <span class="string">'ab'</span>)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(os.path.join(CURR, mp)):</span><br><span class="line">        tf = open(os.path.join(CURR, mp, file), <span class="string">'rb'</span>)</span><br><span class="line">        f.write(tf.read())</span><br><span class="line">        tf.close()</span><br><span class="line">    </span><br><span class="line">    f.close()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"SUCCESS"</span>, <span class="number">200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;python实现大文件切片上传。有段时间没学习一下新东西了，最近偶尔在学习一下并行和分布式的东西。大文件上传的方式有点并行处理的那味道。所以就抽时间写了一点python实现大文件上传，代码写的比较简陋，大家感兴趣的可以自己实现一个。大部分上传文件其实是在前端实现的，但是原理
      
    
    </summary>
    
    
    
      <category term="backend" scheme="https://shunyangli.github.io/tags/backend/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Part 2</title>
    <link href="https://shunyangli.github.io/post/b672/"/>
    <id>https://shunyangli.github.io/post/b672/</id>
    <published>2022-02-26T03:30:31.000Z</published>
    <updated>2022-05-03T05:31:45.394Z</updated>
    
    <content type="html"><![CDATA[<p>An extension of <a href="https://shunyangli.github.io/2020/05/26/leetcode/#more">leetcode</a>. Keep working on leetcode.</p><h1 id="Daily-Temperatures"><a href="#Daily-Temperatures" class="headerlink" title="Daily Temperatures"></a>Daily Temperatures</h1><p><a href="https://leetcode.com/problems/daily-temperatures/" target="_blank" rel="noopener">Daily Temperatures</a>: Given a list of daily temperatures T, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead.</p><p>For example, given the list of temperatures T = [73, 74, 75, 71, 69, 72, 76, 73], your output should be [1, 1, 4, 2, 1, 1, 0, 0].</p><h2 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dailyTemperatures</span><span class="params">(self, T: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        num = len(T) - <span class="number">1</span></span><br><span class="line">        data = [<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(T) - <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> T[i] &gt;= T[num]:</span><br><span class="line">                data.insert(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">                num = i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                count = <span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, num + <span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">if</span> T[j] &lt;= T[i]:</span><br><span class="line">                        count += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                data.insert(<span class="number">0</span>, count)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><p>However, the worst time complexity is $O(N^2)$. The code can not pass one of the complex test case which is (Time Limit Exceeded).</p><h2 id="Advance-Approach"><a href="#Advance-Approach" class="headerlink" title="Advance Approach"></a>Advance Approach</h2><p>Stack can be used to improve the efficiency of this issue. We use stack to store a key-value temperature with decreasing order where key is the index of temperature, and value is the temperature. The time complexity of this approache is $O(N)$. For example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Temperature: [73, 74, 75, 71, 69, 72, 76, 73]</span><br><span class="line">stack = []</span><br><span class="line">res = [0, 0, 0, 0, 0, 0, 0, 0]</span><br><span class="line"></span><br><span class="line">1. index = 0</span><br><span class="line">stack = [(0, 73)]</span><br><span class="line"></span><br><span class="line">2. index = 1</span><br><span class="line">74 &gt; 73, pop (0, 73) and set res[0] = index - 0</span><br><span class="line">stack = [(1, 74)]</span><br><span class="line">res = [1, 0, 0, 0, 0, 0, 0, 0]</span><br><span class="line"></span><br><span class="line">3. index = 2</span><br><span class="line">75 &gt; 74, pop (1, 74) and set res[1] = index - 1</span><br><span class="line">stack = [(2, 75)]</span><br><span class="line">res = [1, 1, 0, 0, 0, 0, 0, 0]</span><br><span class="line"></span><br><span class="line">4. index = 3</span><br><span class="line">71 &lt; 75, add (3, 71) into stack</span><br><span class="line">stack = [(2, 75), (3, 71)]</span><br><span class="line"></span><br><span class="line">5. index = 4</span><br><span class="line">69 &lt; 71, add (3, 69) into stack</span><br><span class="line">stack = [(2, 75), (3, 71), (4, 69)]</span><br><span class="line"></span><br><span class="line">6. index = 5</span><br><span class="line">72 &lt; 69, pop (4, 69) and (3, 71), set res[4] = index - 4, and res[3] = index - 3</span><br><span class="line">stack = [(2, 75), (5, 72)]</span><br><span class="line">res = [1, 1, 0, 2, 1, 0, 0, 0]</span><br><span class="line"></span><br><span class="line">7. index = 6</span><br><span class="line">76 &gt; 72 pop (5, 72) and (2, 75), set res[5] = index - 5, and res[2] = index -2</span><br><span class="line">stack = []</span><br><span class="line">res = [1, 1, 4, 2, 1, 1, 0, 0]</span><br></pre></td></tr></table></figure><p>And implementation is:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dailyTemperatures</span><span class="params">(self, T: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        stack = []</span><br><span class="line">        res = [<span class="number">0</span>] * len(T)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(T)):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> stack[<span class="number">-1</span>][<span class="number">1</span>] &lt; T[i]:</span><br><span class="line">                index, val = stack.pop()</span><br><span class="line">                res[index] = i - index</span><br><span class="line"></span><br><span class="line">            stack.append((i, T[i]))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="Minimum-Size-Subarray-Sum"><a href="#Minimum-Size-Subarray-Sum" class="headerlink" title="Minimum Size Subarray Sum"></a>Minimum Size Subarray Sum</h1><p><a href="https://leetcode.com/problems/minimum-size-subarray-sum/submissions/" target="_blank" rel="noopener">Minimum Size Subarray Sum</a>: Given an array of positive integers nums and a positive integer target, return the minimal length of a contiguous subarray [numsl, numsl+1, …, numsr-1, numsr] of which the sum is greater than or equal to target. If there is no such subarray, return 0 instead.</p><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: target = 7, nums = [2,3,1,2,4,3]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The subarray [4,3] has the minimal length under the problem constraint.</span><br></pre></td></tr></table></figure><h2 id="Brute-Force-1"><a href="#Brute-Force-1" class="headerlink" title="Brute Force"></a>Brute Force</h2><p>The basic approach is to use two loops to solve that. The time complexity of this approach is $O(N^2)$. It will cause time limit exceeded.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minSubArrayLen</span><span class="params">(self, target: int, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        length = <span class="number">9999</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(nums)):</span><br><span class="line">            res = nums[i]</span><br><span class="line">            <span class="keyword">if</span> res &gt;= target:</span><br><span class="line">                length = <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(nums)):</span><br><span class="line">                res += nums[j]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> res &gt;= target:</span><br><span class="line">                    length = min(length, j - i + <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> length <span class="keyword">if</span> length != <span class="number">9999</span> <span class="keyword">else</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Advance-Approach-1"><a href="#Advance-Approach-1" class="headerlink" title="Advance Approach"></a>Advance Approach</h2><p><img src="/post/b672/1.png" alt><br>To solve this issue, we can use <strong>Sliding Window</strong> to solve this issue. This method is similar to the double pointer. The <code>index</code> the left index of this array. When the sum between <code>i</code> and <code>index</code> is greater or equal to the target, then advance <code>i</code> and <code>index</code> to find other positions that sum is greater or equal to the target. The basic idea of sliding windows is shown in the Figure.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minSubArrayLen</span><span class="params">(self, target: int, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        min_len = <span class="number">99999999</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(nums)):</span><br><span class="line">            res += nums[i]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> res &gt;= target:</span><br><span class="line">                length = i - index + <span class="number">1</span></span><br><span class="line">                min_len = min(length, min_len)</span><br><span class="line">                res -= nums[index]</span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> min_len <span class="keyword">if</span> min_len != <span class="number">99999999</span> <span class="keyword">else</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="Valid-Anagram"><a href="#Valid-Anagram" class="headerlink" title="Valid Anagram"></a>Valid Anagram</h1><p>Given two strings <code>s</code> and <code>t</code>, return true if <code>t</code> is an anagram of <code>s</code>, and false otherwise.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;anagram&quot;, t = &quot;nagaram&quot;</span><br><span class="line">Output: true</span><br><span class="line">Input: s = &quot;rat&quot;, t = &quot;car&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><h2 id="Brute-Force-2"><a href="#Brute-Force-2" class="headerlink" title="Brute Force"></a>Brute Force</h2><p>This issue can be solved by using two loop. But the time complexity is $O(N)$. In addition, it also can be done through sort algorithm, to check whether same. But it is too complex. Here we did not code for this approache.</p><h2 id="Advance-Approach-2"><a href="#Advance-Approach-2" class="headerlink" title="Advance Approach"></a>Advance Approach</h2><p>We can use <code>hashmap</code> to record that how many times they appeared in the string. Therefore, the time complexity is $O(N)$.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isAnagram</span><span class="params">(self, s: str, t: str)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> len(s) != len(t):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        data = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                data[i] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                data[i] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> data[i] == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    data[i] -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> key, val <span class="keyword">in</span> data.items():</span><br><span class="line">            <span class="keyword">if</span> data[key] != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h1 id="Combinations"><a href="#Combinations" class="headerlink" title="Combinations"></a>Combinations</h1><p>Given two integers <code>n</code> and <code>k</code>, return all possible combinations of <code>k</code> numbers out of the range <code>[1, n]</code>. You may return the answer in any order. For example</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 4, k = 2</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [2,4],</span><br><span class="line">  [3,4],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  [1,3],</span><br><span class="line">  [1,4],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>It is pretty hard to use loop to solve this issue. Beacause the <code>k</code> determine the number of nested loop, when <code>k=2</code> then it should have three nested loop. However, when k in not a const number, then we can not determine how many loops we need.</p><p>Therefore, we can use recursion to do this kind of issues. We can seen it as a tree as shown in the Figure. The root node is <code>1-n</code> and the deep is <code>k</code>. Pick up the number from left to right without repeating. We can set up a <code>path</code> to record the visited path, and when the length of <code>path</code> is equal to <code>k</code> then add the <code>path</code> to result.</p><p><img src="/post/b672/1.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combine</span><span class="params">(self, n: int, k: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">back_tracking</span><span class="params">(n, k, index, path, result)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> len(path) == k:</span><br><span class="line">                result.append([i <span class="keyword">for</span> i <span class="keyword">in</span> path])</span><br><span class="line">                <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(index + <span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">                path.append(i)</span><br><span class="line">                back_tracking(n, k, i, path, result)</span><br><span class="line">                path.pop()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> back_tracking(n, k, <span class="number">0</span>, [], [])</span><br></pre></td></tr></table></figure><h1 id="Combination-Sum-III"><a href="#Combination-Sum-III" class="headerlink" title="Combination Sum III"></a>Combination Sum III</h1><p><a href="https://leetcode.com/problems/combination-sum-iii/" target="_blank" rel="noopener">Combination Sum III</a>: Find all valid combinations of k numbers that sum up to n such that the following conditions are true:</p><ul><li>Only numbers 1 through 9 are used.</li><li>Each number is used at most once.</li></ul><p>Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order. For example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: k = 3, n = 7</span><br><span class="line">Output: [[1,2,4]]</span><br><span class="line">Explanation:</span><br><span class="line">1 + 2 + 4 = 7</span><br><span class="line">There are no other valid combinations.</span><br></pre></td></tr></table></figure><p>This question is pretty similar with the previous one, just add one more constrain (sum = n).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum3</span><span class="params">(self, k: int, n: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">combine</span><span class="params">(k, n, index, path, result)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> len(path) == k:</span><br><span class="line">                <span class="keyword">if</span> sum(path) == n:</span><br><span class="line">                    result.append([i <span class="keyword">for</span> i <span class="keyword">in</span> path])</span><br><span class="line">                <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(index, <span class="number">10</span>):</span><br><span class="line">                path.append(i)</span><br><span class="line">                combine(k, n, i + <span class="number">1</span>, path, result)</span><br><span class="line"></span><br><span class="line">                path.pop()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> combine(k, n, <span class="number">1</span>, [], [])</span><br></pre></td></tr></table></figure><h1 id="Valid-Palindrome"><a href="#Valid-Palindrome" class="headerlink" title="Valid Palindrome"></a>Valid Palindrome</h1><p><a href="https://leetcode.com/problems/valid-palindrome/" target="_blank" rel="noopener">Valid Palindrome</a>: Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;A man, a plan, a canal: Panama&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: &quot;amanaplanacanalpanama&quot; is a palindrome.</span><br></pre></td></tr></table></figure><p>This one is pretty easy, we just need to ignore the char which is not belong to <code>a-z, 0-9</code>. During the processing, we can use double pointer to do that. Set a index from the left and a index from the right.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, s: str)</span> -&gt; bool:</span></span><br><span class="line">        s = s.lower()</span><br><span class="line">        start = <span class="number">0</span></span><br><span class="line">        end = len(s) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> start &lt;= end:</span><br><span class="line">            l = s[start]</span><br><span class="line">            r = s[end]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> l.isalnum():</span><br><span class="line">                start += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> r.isalnum():</span><br><span class="line">                end -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> s[start] != s[end]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            start += <span class="number">1</span></span><br><span class="line">            end -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h1 id="Next-Greater-Node-In-Linked-List"><a href="#Next-Greater-Node-In-Linked-List" class="headerlink" title="Next Greater Node In Linked List"></a>Next Greater Node In Linked List</h1><p><a href="https://leetcode.com/problems/next-greater-node-in-linked-list/" target="_blank" rel="noopener">Next Greater Node In Linked List</a> is a medium problem.<br>We are given a linked list with <code>head</code> as the first node.  Let’s number the nodes in the list: <code>node_1, node_2, node_3, ... etc.</code></p><p>Each node may have a next larger value: for node_i, next_larger(node_i) is the node_j.val such that <code>j &gt; i</code>, <code>node_j.val &gt; node_i.val,</code> and <code>j</code> is the smallest possible choice.  If such a j does not exist, the next larger value is 0.</p><p>Return an array of integers answer, where <code>answer[i] = next_larger(node_{i+1})</code>.</p><p>Note that in the example inputs (not outputs) below, arrays such as <code>[2,1,5]</code> represent the serialization of a linked list with a head node value of 2, second node value of 1, and third node value of 5.</p><h2 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h2><p>This problem is pretty similar with <a href="https://leetcode.com/problems/daily-temperatures/" target="_blank" rel="noopener">Daily Temperatures</a> which can be solved by applying stack. For this issue, we can use <code>stack</code> + <code>hashmap</code> to solve it with $O(n)$ time complexity.</p><ol><li>Init stack and the final result.</li><li><code>result</code>(hashmap) will recored the index as key and greater or 0 value as the value</li><li>When the <code>temp</code> node value is greater then the top value of the stack, update the <code>result</code> value and pop the top value of stack.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextLargerNodes</span><span class="params">(self, head: ListNode)</span> -&gt; List[int]:</span></span><br><span class="line">        stack = []</span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        temp = head</span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># stack store like (val, pos)</span></span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">None</span>):</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> len(stack) != <span class="number">0</span> <span class="keyword">and</span> temp.val &gt; stack[len(stack) - <span class="number">1</span>][<span class="number">0</span>]:</span><br><span class="line">                result[stack[len(stack) - <span class="number">1</span>][<span class="number">1</span>]] = temp.val</span><br><span class="line">                stack.pop(len(stack) - <span class="number">1</span>)</span><br><span class="line">            </span><br><span class="line">            stack.append((temp.val, index))</span><br><span class="line">            result[index] = <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">            temp = temp.next</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result.values()</span><br></pre></td></tr></table></figure><p>We can use the following data to give an example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,1,5]</span><br><span class="line">Output: [5,5,0]</span><br></pre></td></tr></table></figure><p>In the following part, we will display the <code>result</code> and <code>stack</code> storage.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. stack.push((2, 0)) stack = [(2, 0)], result = &#123;0: 0&#125;</span><br><span class="line"></span><br><span class="line">2. stack.push((1, 1)), stack = [(2, 0), (1, 1)], result = &#123;0: 0, 1: 0&#125;</span><br><span class="line"></span><br><span class="line">3. The node value is 5, greater than 1, then</span><br><span class="line">    1. top value of stack is (1, 1), then result[1] = node.val (5), stack pop (1, 1)</span><br><span class="line">    2. top value of stack is (2, 0), then result[0] = node.val (5), stack pop (2, 0)</span><br><span class="line">    3. End while loop, and insert the (5, 3) into stack and result.</span><br><span class="line"></span><br><span class="line">The final value in result is:</span><br><span class="line">result = &#123;</span><br><span class="line">    0: 5,</span><br><span class="line">    1: 5,</span><br><span class="line">    2: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="How-Many-Numbers-Are-Smaller-Than-the-Current-Number"><a href="#How-Many-Numbers-Are-Smaller-Than-the-Current-Number" class="headerlink" title="How Many Numbers Are Smaller Than the Current Number"></a>How Many Numbers Are Smaller Than the Current Number</h1><p><a href="https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/" target="_blank" rel="noopener">How Many Numbers Are Smaller Than the Current Number</a> is an easy problem. Howerver, it is more interesting than other questions.</p><p>Given the array nums, for each <code>nums[i]</code> find out how many numbers in the array are smaller than it. That is, for each <code>nums[i]</code> you have to count the number of valid j’s such that <code>j != i</code> and <code>nums[j] &lt; nums[i]</code>.</p><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [8,1,2,2,3]</span><br><span class="line">Output: [4,0,1,1,3]</span><br><span class="line">Explanation: </span><br><span class="line">For nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). </span><br><span class="line">For nums[1]=1 does not exist any smaller number than it.</span><br><span class="line">For nums[2]=2 there exist one smaller number than it (1). </span><br><span class="line">For nums[3]=2 there exist one smaller number than it (1). </span><br><span class="line">For nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).</span><br></pre></td></tr></table></figure><h2 id="Approach-1"><a href="#Approach-1" class="headerlink" title="Approach"></a>Approach</h2><p>Naive approach is brute force. Just use two nest loop can get the result.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">result = []</span><br><span class="line">for i in range(0, len(nums)):</span><br><span class="line">    num = 0</span><br><span class="line">    for j in range(i, len(nums)):</span><br><span class="line">        if nums[i] &gt; nums[j]:</span><br><span class="line">            num += 1</span><br><span class="line">    result.append(num)</span><br></pre></td></tr></table></figure><p>The time complexity is <code>O(n^2)</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;An extension of &lt;a href=&quot;https://shunyangli.github.io/2020/05/26/leetcode/#more&quot;&gt;leetcode&lt;/a&gt;. Keep working on leetcode.&lt;/p&gt;
&lt;h1 id=&quot;Dail
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://shunyangli.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://shunyangli.github.io/tags/leetcode/"/>
    
      <category term="algorithm" scheme="https://shunyangli.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Nano Editor</title>
    <link href="https://shunyangli.github.io/post/943f/"/>
    <id>https://shunyangli.github.io/post/943f/</id>
    <published>2022-02-08T08:49:26.000Z</published>
    <updated>2022-05-03T05:31:45.308Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><a href="https://www.nano-editor.org/" target="_blank" rel="noopener">Nano</a> is a text editor for terminals.</p><h1 id="Open-and-create-files"><a href="#Open-and-create-files" class="headerlink" title="Open and create files"></a>Open and create files</h1><p>Open or create new files, you can type the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano filename</span><br></pre></td></tr></table></figure><p>This will open a new editor window and you can start editing the file. At the bottom of the window, the most basic command shortcuts that can be used with the nano editor are listed. <code>^</code> means <code>Ctrl</code> keys (e.g., <code>^X</code> = <code>Ctrl + X</code>).</p><h1 id="Search-and-replace"><a href="#Search-and-replace" class="headerlink" title="Search and replace"></a>Search and replace</h1><p>You can use <code>Ctrl + w</code> to search key words, it will match the first key word. Then you can use <code>Alt + w</code> to move to the next key word.</p><p>To search and replace, press <code>Ctrl + \</code>. Enter the search term and the text to be replaced. The editor will move to the first match and ask if you want to replace it. y or n will move to the next match. Pressing A will replace all matches.</p><h1 id="Save-and-exit"><a href="#Save-and-exit" class="headerlink" title="Save and exit"></a>Save and exit</h1><p>To save changes made to a file, press <code>Ctrl + o</code>. If the file does not yet exist, it will be created immediately after saving.</p><p>To exit nano, press <code>Ctrl + x</code>. If there are unsaved changes, you will be asked if you want to save the changes (<code>Y</code> means save, <code>N</code> means not save).</p><p>To save a file, you must have write access to the file. To create a new file, you need to have write access to the directory where the file will be createde</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.nano-edit
      
    
    </summary>
    
    
      <category term="tool" scheme="https://shunyangli.github.io/categories/tool/"/>
    
    
      <category term="tool" scheme="https://shunyangli.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop Partition</title>
    <link href="https://shunyangli.github.io/post/8700/"/>
    <id>https://shunyangli.github.io/post/8700/</id>
    <published>2021-10-13T13:11:54.000Z</published>
    <updated>2022-05-03T05:31:45.302Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hadoop-Partition-And-Secondary-Sort"><a href="#Hadoop-Partition-And-Secondary-Sort" class="headerlink" title="Hadoop Partition And Secondary Sort"></a>Hadoop Partition And Secondary Sort</h1><p>This article will describe an implementation and process of Hadoop partitioning and secondary sorting. First we need to briefly understand the workflow of Hadoop map-reduce task. In the <a href="https://shunyangli.github.io/2021/09/08/Hadoop-Distributed-System/#more">previous article</a>, we briefly explained the operation mechanism of Hadoop. The mapper task will read the file and process the data, after processing the mapper task will pass the result to the shuffle. shuffle will sort and partition all the map task results, and then will pass the partitioned and sorted data to the reducer, the key-value pairs with the same key will be passed to the same reducer. </p><p><img src="/post/8700/1.png" alt></p><p> The default distribution method used by hadoop is based on the hash value, but in practice, this is not very efficient or performs the task as we require. For example, after partitioning, one node’s reducer is assigned 20 records while the other is assigned 10 million records, so imagine how inefficient this is. Or, we want to process the output file according to a certain rule, assuming there are two reducers, we want the final result to store the results of records starting with “a” in part-00000, and other results in part-00001, the default partitioner is unable to do. So we need to customize our own partition to choose the reducer of records according to our own requirements.</p><h1 id="Why-partition"><a href="#Why-partition" class="headerlink" title="Why partition"></a>Why partition</h1><p>We want to use Hadoop to get a ordered file by using a partition (because it will be sorted before partitioning).  However if the input is huge (e.g. 10 GB), the performance of reducer is pretty inefficient which completely losing the advantage of the parallel architecture provided by MapReduce. We can use a partitioner to sort the data, so that when the reducer processes the data, it can be guaranteed that the data is already sorted. One partition corresponds to one reducer, so all the output of the reducer is ordered, we just need to merge all the output files, then the total file must be ordered.</p><h1 id="Hadoop-Streaming-Partition"><a href="#Hadoop-Streaming-Partition" class="headerlink" title="Hadoop Streaming Partition"></a>Hadoop Streaming Partition</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mapred streaming \</span><br><span class="line"> -D mapreduce.job.output.key.comparator.class=org.apache.hadoop.mapreduce.lib.partition.KeyFieldBasedComparator \</span><br><span class="line"> -D stream.map.output.field.separator=, \</span><br><span class="line"> -D stream.num.map.output.key.fields=2 \</span><br><span class="line"> -D mapreduce.map.output.key.field.separator=,\</span><br><span class="line"> -D mapreduce.partition.keycomparator.options=-k2,2nr \</span><br><span class="line"> -D mapreduce.job.reduces=2\</span><br><span class="line"> -input input</span><br><span class="line"> -output output \</span><br><span class="line"> -mapper /bin/cat \</span><br><span class="line"> -reducer /bin/cat \</span><br><span class="line"> -partitioner org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-D map.output.key.field.separator=, means the separator for the key is “,”</span><br><span class="line">-D stream.num.map.output.key.fields=2 means the prefix up to the second “,” in a line will be the key and the rest of the line (excluding the second “,”) will be the value.</span><br><span class="line"></span><br><span class="line">e.g.:</span><br><span class="line">1,2,3 then &apos;map.output.key.field.separator&apos; split the input by , and &apos;stream.num.map.output.key.fields=2&apos; will set (1,2) is the key and 3 is the value</span><br><span class="line"></span><br><span class="line">-D map.output.key.field.separator=, means the separator for the key is also “,”</span><br><span class="line"></span><br><span class="line">-D mapreduce.partition.keypartitioner.options=-k1,2” means</span><br><span class="line">MapReduce will partition the map outputs by the first two fields of the keys</span><br></pre></td></tr></table></figure><p>For example, the input files is like this, name (input.txt)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">muse,curious,1</span><br><span class="line">muse,days,2</span><br><span class="line">muse,do,3</span><br><span class="line">muse,growing,4</span><br><span class="line">muse,grown,5</span><br><span class="line">muse,in,1</span><br><span class="line">cat,invent,2</span><br><span class="line">muse,more,3</span><br><span class="line">muse,please,4</span><br><span class="line">cat,subject,5</span><br><span class="line">cat,ten,2</span><br><span class="line">muse,these,3</span><br><span class="line">muse,this,2</span><br><span class="line">muse,times,5</span><br><span class="line">muse,to,6</span><br><span class="line">cat,want,8</span><br><span class="line">muse,with,9</span><br><span class="line">muse,worth,0</span><br><span class="line">muse,*,10</span><br><span class="line">muse,age,12</span><br></pre></td></tr></table></figure><p>Put this file into hdfs:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -put input.txt input</span><br></pre></td></tr></table></figure><p>We partition by two different ranges of keys (mapreduce.partition.keypartitioner.options) (e.g.: key is (muse, curious) value is 1), and we get two different results.</p><p>The first command is partition based the first filed in the key.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar $HADOOP_HOME/share/hadoop/tools/lib/hadoop-streaming-*.jar \</span><br><span class="line">-D stream.map.output.field.separator=, \</span><br><span class="line">-D stream.num.map.output.key.fields=2 \</span><br><span class="line">-D map.output.key.field.separator=, \</span><br><span class="line">-D mapreduce.partition.keypartitioner.options=-k1,1 \</span><br><span class="line">-D mapreduce.job.reduces=3 \</span><br><span class="line">-input input/test.txt \</span><br><span class="line">-output ou2 \</span><br><span class="line">-mapper /bin/cat \</span><br><span class="line">-reducer /bin/cat \</span><br><span class="line">-partitioner org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner</span><br></pre></td></tr></table></figure><p>The first reducer gets:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat,invent2</span><br><span class="line">cat,subject5</span><br><span class="line">cat,ten2</span><br><span class="line">cat,want8</span><br></pre></td></tr></table></figure><p>The second reducer gets:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">muse,*10</span><br><span class="line">muse,age12</span><br><span class="line">muse,curious1</span><br><span class="line">muse,days2</span><br><span class="line">muse,do3</span><br><span class="line">muse,growing4</span><br><span class="line">muse,grown5</span><br><span class="line">muse,in1</span><br><span class="line">muse,more3</span><br><span class="line">muse,please4</span><br><span class="line">muse,these3</span><br><span class="line">muse,this2</span><br><span class="line">muse,times5</span><br><span class="line">muse,to6</span><br><span class="line">muse,with9</span><br><span class="line">muse,worth0</span><br></pre></td></tr></table></figure><p>The last reducer is empty. With the result of the reducer we get the desired partition.</p><p>The first command is partition based the second filed in the key.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar $HADOOP_HOME/share/hadoop/tools/lib/hadoop-streaming-*.jar \</span><br><span class="line">-D stream.map.output.field.separator=, \</span><br><span class="line">-D stream.num.map.output.key.fields=2 \</span><br><span class="line">-D map.output.key.field.separator=, \</span><br><span class="line">-D mapreduce.partition.keypartitioner.options=-k2,2 \</span><br><span class="line">-D mapreduce.job.reduces=3 \</span><br><span class="line">-input input/test.txt \</span><br><span class="line">-output ou1 \</span><br><span class="line">-mapper /bin/cat \</span><br><span class="line">-reducer /bin/cat \</span><br><span class="line">-partitioner org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner</span><br></pre></td></tr></table></figure><p>Reducer 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat,subject5</span><br><span class="line">cat,ten2</span><br><span class="line">muse,*10</span><br><span class="line">muse,more3</span><br><span class="line">muse,these3</span><br><span class="line">muse,times5</span><br><span class="line">muse,with9</span><br><span class="line">muse,worth0</span><br></pre></td></tr></table></figure><p>Reducer 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat,invent2</span><br><span class="line">cat,want8</span><br><span class="line">muse,age12</span><br><span class="line">muse,curious1</span><br><span class="line">muse,days2</span><br><span class="line">muse,do3</span><br></pre></td></tr></table></figure><p>Reducer 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">muse,growing4</span><br><span class="line">muse,grown5</span><br><span class="line">muse,in1</span><br><span class="line">muse,please4</span><br><span class="line">muse,this2</span><br><span class="line">muse,to6</span><br></pre></td></tr></table></figure><p>Comparing the two output results we can see that different partition ranges lead to completely different partition results.</p><h1 id="MRJob-example"><a href="#MRJob-example" class="headerlink" title="MRJob example"></a>MRJob example</h1><p>By using the given text file, I did a example that in mrjob.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mrjob.job <span class="keyword">import</span> MRJob</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(MRJob)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    the number of reducer is 1,</span></span><br><span class="line"><span class="string">    then we can use map separator</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mapper</span><span class="params">(self, _, line)</span>:</span></span><br><span class="line">        words = line.split(<span class="string">','</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> words[<span class="number">0</span>]   <span class="string">","</span>   words[<span class="number">1</span>], int(words[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reducer</span><span class="params">(self, key, values)</span>:</span></span><br><span class="line">        <span class="keyword">yield</span> key, sum(values)</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">    SORT_VALUES = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    JOBCONF = &#123;</span><br><span class="line">      <span class="string">'map.output.key.field.separator'</span>: <span class="string">','</span>,</span><br><span class="line">      <span class="string">'mapred.reduce.tasks'</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="string">'mapreduce.partition.keypartitioner.options'</span>:<span class="string">'-k1,1'</span>,</span><br><span class="line">      <span class="string">'partitioner'</span>:<span class="string">'org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner'</span>,</span><br><span class="line">      <span class="string">'mapreduce.partition.keycomparator.options'</span>:<span class="string">'-k1,1 -k2,2n'</span>,</span><br><span class="line">      <span class="string">'mapreduce.job.output.key.comparator.class'</span>:<span class="string">'org.apache.hadoop.mapreduce.lib.partition.KeyFieldBasedComparator'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    Example.run()</span><br></pre></td></tr></table></figure><p>Run the code:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 example.py -r hadoop hdfs:///user/xx/example.txt -o hdfs:///user/xx/output</span><br></pre></td></tr></table></figure><p>The result of three reducers:</p><ol><li><p>None</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">muse,*10</span><br><span class="line">muse,age12</span><br><span class="line">muse,curious1</span><br><span class="line">muse,days2</span><br><span class="line">muse,do3</span><br><span class="line">muse,growing4</span><br><span class="line">muse,grown5</span><br><span class="line">muse,in1</span><br><span class="line">muse,more3</span><br><span class="line">muse,please4</span><br><span class="line">muse,these3</span><br><span class="line">muse,this2</span><br><span class="line">muse,times5</span><br><span class="line">muse,to6</span><br><span class="line">muse,with9</span><br><span class="line">muse,worth0</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat,invent2</span><br><span class="line">cat,subject5</span><br><span class="line">cat,ten2</span><br><span class="line">cat,want8</span><br></pre></td></tr></table></figure></li></ol><h1 id="Partition-and-secondary-sort-video"><a href="#Partition-and-secondary-sort-video" class="headerlink" title="Partition and secondary sort video"></a>Partition and secondary sort video</h1><iframe width="950" height="525" src="https://www.youtube.com/embed/ljFjAeKjZm8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hadoop-Partition-And-Secondary-Sort&quot;&gt;&lt;a href=&quot;#Hadoop-Partition-And-Secondary-Sort&quot; class=&quot;headerlink&quot; title=&quot;Hadoop Partition And S
      
    
    </summary>
    
    
    
      <category term="Distributed" scheme="https://shunyangli.github.io/tags/Distributed/"/>
    
  </entry>
  
  <entry>
    <title>mrjob for hadoop</title>
    <link href="https://shunyangli.github.io/post/af28/"/>
    <id>https://shunyangli.github.io/post/af28/</id>
    <published>2021-09-16T12:42:15.000Z</published>
    <updated>2022-05-03T05:31:45.375Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Yelp/mrjob" target="_blank" rel="noopener">mrjob</a> is the easiest way to write python programs that can run on hadoop. Its most prominent feature is that with the help of mrjob, there is no need to install hadoop or deploy any cluster, and we can run the code (for testing) on our local machine. Also, mrjob can easily run on Amazon Elastic MapReduce.</p><p>Since Hadoop does not currently support the python API, we can only use the stream processing method to complete the mapredduce ren using python. mrjob is a good choice.</p><h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><p>If you did not installed <a href="https://pip.pypa.io/en/stable/" target="_blank" rel="noopener">pip3</a> for Linux, then you can execute the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install python3-pip</span><br></pre></td></tr></table></figure><p>After that, you can install mrjob by using <code>pip3</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install mrjob</span><br></pre></td></tr></table></figure><p>To check if your installation is correct you can execute in the python3 terminal:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ &gt; python3</span><br><span class="line">Python 3.8.10 (default, Jun  2 2021, 10:49:15) </span><br><span class="line">[GCC 9.4.0] on linux</span><br><span class="line">Type "help", "copyright", "credits" or "license" for more information.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; import mrjob</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>If there is no output from import, the installation is successful.</p><h1 id="mrjob-example"><a href="#mrjob-example" class="headerlink" title="mrjob example"></a>mrjob example</h1><p>We use a generic word count example to demonstrate the use of mrjob.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mrjob.job <span class="keyword">import</span> MRJob</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordCount</span><span class="params">(MRJob)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mapper</span><span class="params">(self, _, line)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> line.split():</span><br><span class="line">            <span class="keyword">yield</span> (word, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reducer</span><span class="params">(self, key, values)</span>:</span></span><br><span class="line">        <span class="keyword">yield</span> key, sum(values)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    WordCount.run()</span><br></pre></td></tr></table></figure><p>Using yield, you can let the function generate a sequence, the function returns an object of type “generator”, through the object to call the next() method to return the sequence of values.</p><p>Briefly understand: yield is return returns a value, and remember this return position, the next iteration will start from this position after (the next line).</p><p>For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ &gt; python3                         </span><br><span class="line">Python <span class="number">3.8</span><span class="number">.10</span> (default, Jun  <span class="number">2</span> <span class="number">2021</span>, <span class="number">10</span>:<span class="number">49</span>:<span class="number">15</span>) </span><br><span class="line">[GCC <span class="number">9.4</span><span class="number">.0</span>] on linux</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">3</span>):</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">yield</span> i</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num = count()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num</span><br><span class="line">&lt;generator object count at <span class="number">0x7f5786f7d900</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num.__next__()</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num.__next__()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num.__next__()</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num.__next__()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><p>By execute the <code>word_count.py</code> in local environment:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 word_count.py input.txt</span><br></pre></td></tr></table></figure><h1 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h1><p>mapreduce is a system for processing large amounts of data on distributed systems. It is based on the paper <a href="https://dl.acm.org/doi/pdf/10.1145/1327452.1327492" target="_blank" rel="noopener">MapReduce: Simplified Data Processing on Large Clusters</a>. mapreduce divides massive data into small data sets, performs the same task in parallel, and finally collates and merges all the sub-results into the final result. The step of splitting the data for the same is called mapper, and the step of merging and organizing later is called reducer. combiner can be seen as an optimizer, but it is not necessary.</p><p>When we are calling the Hadoop framework with mrjob, we first need to configure Hadoop. <strong>You must make sure that yarn is started at the time of mrjob.</strong> </p><p>Configuration of <code>mapred-site.xml</code> :</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_MAPRED_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_MAPRED_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_MAPRED_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Configuration of <code>yarn-site.xml</code>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Execute-hadoop-on-mrjob"><a href="#Execute-hadoop-on-mrjob" class="headerlink" title="Execute hadoop on mrjob"></a>Execute hadoop on mrjob</h1><p>Use the same word count code, then we can execute the file by using:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 word_count.py -r hadoop input.txt</span><br></pre></td></tr></table></figure><p>mrjob can also call the file above the hdfs:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 word_count.py -r hadoop hdfs:///input/input.txt</span><br></pre></td></tr></table></figure><h1 id="Hadoop-JAVA-and-mrjob-installation"><a href="#Hadoop-JAVA-and-mrjob-installation" class="headerlink" title="Hadoop, JAVA and mrjob installation"></a>Hadoop, JAVA and mrjob installation</h1><iframe width="950" height="534" src="https://www.youtube.com/embed/lux2RA7ul4w" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/Yelp/mrjob&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mrjob&lt;/a&gt; is the easiest way to write python programs that can run
      
    
    </summary>
    
    
    
      <category term="Distributed" scheme="https://shunyangli.github.io/tags/Distributed/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop Distributed System</title>
    <link href="https://shunyangli.github.io/post/515d/"/>
    <id>https://shunyangli.github.io/post/515d/</id>
    <published>2021-09-08T10:01:55.000Z</published>
    <updated>2022-05-03T05:31:45.288Z</updated>
    
    <content type="html"><![CDATA[<p>HDFS的原理以及Hadoop的安装，MapReduce的运行流程，shuffle的运行机制。</p><h1 id="hdfs-功能"><a href="#hdfs-功能" class="headerlink" title="hdfs 功能"></a>hdfs 功能</h1><p>HDFS：分布式文件管理系统 </p><p>Hadoop fs：使用面最广，可以操作任何文件系统。 </p><p>hadoop dfs与hdfs dfs：只能操作HDFS文件系统相关（包括与Local FS间的操作），前者已经Deprecated，一般使用后者。 </p><p>Hadoop/hdfs fs/dfs {args} {args} </p><h1 id="hdfs-实现原理"><a href="#hdfs-实现原理" class="headerlink" title="hdfs 实现原理"></a>hdfs 实现原理</h1><p>当在使用hdfs dfs -put命令的时候，文件会被切块（文件块的大小通过参数来决定，默认是128M）存放到不同的datanode server里面，具体分布到哪个datanode取决于namenode server。<br>namenode会记录并维护不同的文件块所存放的具体位置（存放在哪个datanode里面），这些信息被称作元数据。 </p><pre><code class="shell">e.g.: file被分割成3块，分别存放在datanode0, datanode1 and datanode 2。 那么在namenode会记录: file: {block0: datanode0-server, block1: datanode1-server, block2: datanode2-server。 </code></pre><p>当在使用hdfs dfs -get 的时候，系统会在namenode获取源数据，然后根据元数据记录的文件块存放的位置进行获取文件块，然后合并。<br><img src="/post/515d/1.png" alt></p><h2 id="hdfs副本"><a href="#hdfs副本" class="headerlink" title="hdfs副本"></a>hdfs副本</h2><p>为了防止datanode出现宕机情况，hdfs会对文件进行储存副本，副本的具体数量由用户设定。就是把同一文件块储存在不同的datanode上面。 </p><h2 id="hdfs特点"><a href="#hdfs特点" class="headerlink" title="hdfs特点"></a>hdfs特点</h2><p>hdfs是适应一次写入，多次读的场景，不支持文件的修改。所以hdfs不适合做网盘应用，因为延迟高，开销大。<br>优点：可以线性扩展（不够存我直接再租几个服务器就够了），数据储存可靠性高，分布式运算处理方便。 </p><h1 id="hdfs-读-写数据流程"><a href="#hdfs-读-写数据流程" class="headerlink" title="hdfs 读/写数据流程"></a>hdfs 读/写数据流程</h1><h2 id="hdfs读数据流程"><a href="#hdfs读数据流程" class="headerlink" title="hdfs读数据流程"></a>hdfs读数据流程</h2><ul><li><p>和namenode通信查询元数据，根据元数据找到文件快所在的datanode server </p></li><li><p>挑选一个datanode server（就近原则，然后随机），建立socket 通信 </p></li><li><p>datanode开始发送数据（采用streaming），以packet为单位做校验 </p></li><li><p>client以packet为单位接受，在本地缓存，然后写入目标文件（获取所有的文件快后进行合并） </p></li></ul><p><img src="/post/515d/2.png" alt></p><h2 id="hdfs写数据流程"><a href="#hdfs写数据流程" class="headerlink" title="hdfs写数据流程"></a>hdfs写数据流程</h2><ul><li><p>client和namenode通信并请求上传文件，namenode检查文件是否存在 </p></li><li><p>namenode返回给client是否可以上传 </p></li><li><p>client请求第一个block该传输到哪些datanode（因为包含副本） </p></li><li><p>namenode返回所需要上传的datanode server（数量取决于副本的数量），假设返回A B C三台server </p></li><li><p>client和datanode A建立pipeline（本质是RPC调用），A收到请求后调用B建立pipeline，B收到请求后和C建立pipeline，然后逐级返回client </p></li><li><p>client开始给A上传文件块，以packet为单位，A收到之后传给B，B收到之后传给C </p></li><li><p>当一个文件块上传完成之后，client再次请求namenode上传下一个文件块 </p></li><li><p><img src="/post/515d/3.png" alt></p></li></ul><h1 id="hdfs-namenode-工作原理"><a href="#hdfs-namenode-工作原理" class="headerlink" title="hdfs namenode 工作原理"></a>hdfs namenode 工作原理</h1><p>namenode负责：响应client请求，维护路径树，管理元数据（查询，修改） </p><h2 id="hdfs元数据管理机制"><a href="#hdfs元数据管理机制" class="headerlink" title="hdfs元数据管理机制"></a>hdfs元数据管理机制</h2><ul><li><p>内存中有一份完整的元数据（特定的数据结构） </p></li><li><p>磁盘中有一个准完整的元数据的镜像文件 </p></li><li><p>当client对hdfs中的文件新增或者修改的时候，首先会在edits文件中记录操作日志，当client操作成功之后，相应的元数据会更新到内存中。每隔一段时间会有secondary namenode将namenode上积累的所有edits和一个最新的元数据镜像下载到本地，并加载到内存中进行合并（这个过程被称为checkpoint） </p></li></ul><p><img src="/post/515d/4.png" alt></p><h1 id="MapReduce-原理"><a href="#MapReduce-原理" class="headerlink" title="MapReduce 原理"></a>MapReduce 原理</h1><p><img src="/post/515d/5.png" alt></p><p>在map的时候会对同一个文件进行处理，每一个mserver里面的map会访问不同的部分，然后对文本数据进行处理，且map过程输出的格式是key value的形式。<br>在map task执行完之后会把数据传到shuffle里面，然后shuffle传递给reduce task。reduce会拉取在map里面处理过的数据，对key value进行整合（类似db里面的group by操作）。 </p><h1 id="shuffle原理"><a href="#shuffle原理" class="headerlink" title="shuffle原理"></a>shuffle原理</h1><p>shuffle是map和reduce中间的数据调度机制，主要包含缓存，分区，排序 </p><p>在map task里面有一个缓冲区，把处理过的key-value数据放到缓存里面，但是由于缓存有限，所以当缓冲区使用达到一定限制后（80%），split thread（一个线程，归map task管）会把缓冲区的数据写入到磁盘，split在处理缓冲数据的时候会对数据进行排序和分区，默认是hash partition进行分区，根据key的值hash分区。每split一次会写入到磁盘的一个新的文件（sort and partition）。在map完所有的数据之后，对所有溢出文件进行合并和排序，在合并的时候对每个分区的数据进行合并。 </p><p><img src="/post/515d/6.png" alt></p><p>在reduce阶段，拉取所有map tasks的最终结果，并对这些数据做排序。</p><p><img src="/post/515d/7.png" alt></p><p>Reduce function会拿到根据key聚合数据，每个聚合组调用一次reduce方法。会有多个reduce task同时运行。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HDFS的原理以及Hadoop的安装，MapReduce的运行流程，shuffle的运行机制。&lt;/p&gt;
&lt;h1 id=&quot;hdfs-功能&quot;&gt;&lt;a href=&quot;#hdfs-功能&quot; class=&quot;headerlink&quot; title=&quot;hdfs 功能&quot;&gt;&lt;/a&gt;hdfs 功能&lt;/h
      
    
    </summary>
    
    
    
      <category term="Distributed" scheme="https://shunyangli.github.io/tags/Distributed/"/>
    
  </entry>
  
  <entry>
    <title>bipartite graph data pre-processing</title>
    <link href="https://shunyangli.github.io/post/3fe5/"/>
    <id>https://shunyangli.github.io/post/3fe5/</id>
    <published>2021-07-28T10:16:59.000Z</published>
    <updated>2022-05-03T05:31:45.360Z</updated>
    
    <content type="html"><![CDATA[<p>The initialized downloaded data is messy and the graph id is not continuous, so a data preprocessing method is written to allow the data to be loaded into memory faster. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">filepath = os.getcwd() + <span class="string">"/"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_files</span><span class="params">(filename: str, sep: str, skip: int)</span>:</span></span><br><span class="line">    data = []</span><br><span class="line">    filename = filepath + filename[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> lines:</span><br><span class="line">        lines = list(lines)</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines[skip:]:</span><br><span class="line">            nodes = line.split(sep)</span><br><span class="line">            temp = [int(nodes[<span class="number">0</span>]), int(nodes[<span class="number">1</span>])]</span><br><span class="line">            <span class="keyword">for</span> val <span class="keyword">in</span> nodes[<span class="number">2</span>:]:</span><br><span class="line">                temp.append(val)</span><br><span class="line">            data.append(temp)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_data</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    encoding the data</span></span><br><span class="line"><span class="string">    :param data:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    u_node = &#123;&#125;</span><br><span class="line">    u_id = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    v_node = &#123;&#125;</span><br><span class="line">    v_id = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> u_node:</span><br><span class="line">            u_node[line[<span class="number">0</span>]] = u_id</span><br><span class="line">            u_id += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">1</span>] <span class="keyword">not</span> <span class="keyword">in</span> v_node:</span><br><span class="line">            v_node[line[<span class="number">1</span>]] = v_id</span><br><span class="line">            v_id += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    nodes = <span class="string">""</span></span><br><span class="line">    edges = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> data:</span><br><span class="line">        nodes += <span class="string">"&#123;&#125; &#123;&#125;"</span>.format(u_node[line[<span class="number">0</span>]], v_node[line[<span class="number">1</span>]])</span><br><span class="line">        nodes += <span class="string">" "</span>.join(line[<span class="number">2</span>:])</span><br><span class="line">        nodes += <span class="string">"\n"</span></span><br><span class="line">        edges += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> u_id, v_id, edges, nodes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">store_file</span><span class="params">(filename, data)</span>:</span></span><br><span class="line">    meta = filepath + filename + <span class="string">'.meta'</span></span><br><span class="line">    edge = filepath + filename + <span class="string">'.e'</span></span><br><span class="line"></span><br><span class="line">    f = open(edge, <span class="string">'w'</span>)</span><br><span class="line">    f.write(data[<span class="number">3</span>])</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">    lines = <span class="string">"&#123;&#125;\n&#123;&#125;\n&#123;&#125;\n"</span>.format(data[<span class="number">0</span>], data[<span class="number">1</span>], data[<span class="number">2</span>])</span><br><span class="line">    f = open(meta, <span class="string">'w'</span>)</span><br><span class="line">    f.write(lines)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(args)</span>:</span></span><br><span class="line">    filename = args.filename</span><br><span class="line">    sep = args.sep</span><br><span class="line">    outfile = args.out</span><br><span class="line">    skip = args.skip</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> outfile <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        outfile = str(filename).split(<span class="string">'.'</span>)[<span class="number">1</span>][:<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    data = read_files(filename, sep, int(skip))</span><br><span class="line">    parsed_data = parse_data(data)</span><br><span class="line">    store_file(outfile, parsed_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">'Processing csv data'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--filename'</span>, help=<span class="string">'Please add file name'</span>, required=<span class="literal">True</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--sep'</span>, help=<span class="string">'Separator'</span>, default=<span class="string">' '</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--out'</span>, help=<span class="string">'output file name'</span>, default=<span class="literal">None</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--skip'</span>, help=<span class="string">'how many lines need to be skiped'</span>, default=<span class="number">1</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Start processing: "</span>, args.filename)</span><br><span class="line">    execute(args)</span><br><span class="line">    print(<span class="string">"Finished"</span>)</span><br></pre></td></tr></table></figure><h1 id="How-to-use-it"><a href="#How-to-use-it" class="headerlink" title="How to use it"></a>How to use it</h1><p>You can get help information by using <code>--help</code>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">usage: data.py [-h] --filename FILENAME [--sep SEP] [--out OUT] [--skip SKIP]</span><br><span class="line"></span><br><span class="line">Processing csv data</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help           show this help message and exit</span><br><span class="line">  --filename FILENAME  Please add file name</span><br><span class="line">  --sep SEP            Separator</span><br><span class="line">  --out OUT            output file name</span><br><span class="line">  --skip SKIP          how many lines need to be skiped、</span><br></pre></td></tr></table></figure><p><code>--sep</code> default value is a space, <code>--skip</code> default value is 1.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The initialized downloaded data is messy and the graph id is not continuous, so a data preprocessing method is written to allow the data 
      
    
    </summary>
    
    
      <category term="Data processing" scheme="https://shunyangli.github.io/categories/Data-processing/"/>
    
    
      <category term="Data processing" scheme="https://shunyangli.github.io/tags/Data-processing/"/>
    
  </entry>
  
  <entry>
    <title>Union-Find Set</title>
    <link href="https://shunyangli.github.io/post/14e7/"/>
    <id>https://shunyangli.github.io/post/14e7/</id>
    <published>2021-05-25T03:45:50.000Z</published>
    <updated>2022-05-03T05:31:45.338Z</updated>
    
    <content type="html"><![CDATA[<p>In computer science, a disjoint-set data structure is a data structure used to handle the merging and querying of disjoint sets (a series of sets with no duplicate elements).</p><h1 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h1><p>A non-intersecting forest represents each set as a tree (deepth with 1), where each node is an element. A node holds a reference to its parent node, and the root node of the tree holds an empty reference or a reference to itself or some other invalid value to indicate itself as the root node. This data structure was first proposed by Bernard A. Galler and Michael J. Fischer in 1964,but it took several years before a precise analysis was completed. As shown:<br><img src="/post/14e7/1.png" alt></p><h1 id="New-Approach"><a href="#New-Approach" class="headerlink" title="New Approach"></a>New Approach</h1><p>There are many different types of variations of this data structure that we can change to suit different needs. I used two HashMap to store the roots and parent (<code>parent</code> and <code>roots</code>). For <code>parent</code>, it stores the roots of every element, for <code>roots</code>, it stores the root of all the elements.<br><code>parent</code> can be seen as <code>{node: root}</code>, <code>roots</code> can be seen as <code>{root: [node1, node2, ...]}</code>.</p><h2 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h2><p>In my method, I use Hashmap to store the tree. So, the search complexity is $O(n)$.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> parent[x]</span><br></pre></td></tr></table></figure><h2 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h2><p>For union, we need to set the root of such element to be a new root. And merge the childs of such root.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    rootX = parent[x]</span><br><span class="line">    rootY = parent[y]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> rootX == rootY:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    parent[y] = rootX</span><br><span class="line">    roots[rootX] += roots[y]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> roots[y]:</span><br><span class="line">        parent[n] = rootX</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">del</span> roots[y]</span><br></pre></td></tr></table></figure><h1 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h1><p>It can be used for subgraph pattern matching decompistion, bipartite graph and commuity.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UF</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :param parent &#123;node: root&#125;</span></span><br><span class="line"><span class="string">        :param roots: &#123;root: [n1,n2..]&#125;</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.parent = &#123;&#125;</span><br><span class="line">        self.roots = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">            self.parent[i] = i</span><br><span class="line">            self.roots[i] = [i]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, p, q)</span>:</span></span><br><span class="line">        rootP = self.parent[p]</span><br><span class="line">        rootQ = self.parent[q]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> rootP == rootQ:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        self.parent[q] = rootP</span><br><span class="line">        self.roots[rootP] += self.roots[q]</span><br><span class="line">        <span class="keyword">del</span> self.roots[q]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        to find x parent</span></span><br><span class="line"><span class="string">        :param x:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">in</span> self.parent:</span><br><span class="line">            <span class="keyword">return</span> self.parent[x]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isConnect</span><span class="params">(self, p, q)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        check whether two val has same root</span></span><br><span class="line"><span class="string">        :param p:</span></span><br><span class="line"><span class="string">        :param q:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        rootP = self.find(p)</span><br><span class="line">        rootQ = self.find(q)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rootP == rootQ</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getRoots</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.roots.keys()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getRecords</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.roots</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    uf = UF()</span><br><span class="line">    uf.init(<span class="number">10</span>)</span><br><span class="line">    uf.union(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    uf.union(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    uf.union(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    uf.union(<span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">    uf.union(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    x = uf.find(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In computer science, a disjoint-set data structure is a data structure used to handle the merging and querying of disjoint sets (a series
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://shunyangli.github.io/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://shunyangli.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Prime Number</title>
    <link href="https://shunyangli.github.io/post/4d31/"/>
    <id>https://shunyangli.github.io/post/4d31/</id>
    <published>2021-04-25T05:18:45.000Z</published>
    <updated>2022-05-03T05:31:45.316Z</updated>
    
    <content type="html"><![CDATA[<p>In math, prime numbers are whole numbers greater than 1, that have only two factors – 1 and the number itself. Prime numbers are divisible only by the number 1 or itself. For example, 2, 3, 5, 7 and 11 are the first few prime numbers.</p><h1 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h1><p>For this solution we can use two loops to handle. For example, we want to find all the prime number between 2 and 100, then we can write code like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">100</span></span><br><span class="line">primes = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, num):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>, i):</span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        primes.append(i)</span><br></pre></td></tr></table></figure><p>The time complexity is $O(n\sqrt{n})$. But when the number is huge, then it is very slow. There is a small optimization in the method. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">100</span></span><br><span class="line">primes = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, num):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>, i // <span class="number">2</span> + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        primes.append(i)</span><br></pre></td></tr></table></figure><h1 id="Ehrlich-Sieve-Algorithm"><a href="#Ehrlich-Sieve-Algorithm" class="headerlink" title="Ehrlich Sieve Algorithm"></a>Ehrlich Sieve Algorithm</h1><p>The algorithm enumerates all the numbers from small to large, and for each prime number, it sifts all its multiples, and the rest is the prime number. The time complexity is $O(loglog(n))$.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">primes = []</span><br><span class="line">is_prime = [<span class="literal">True</span>] * (num + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, num):</span><br><span class="line">    <span class="keyword">if</span> is_prime[i]:</span><br><span class="line">        primes.append(i)</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">1</span>, num // i + <span class="number">1</span>):</span><br><span class="line">            is_prime[i * m] = <span class="literal">False</span></span><br></pre></td></tr></table></figure><h1 id="Performance-Evaluation"><a href="#Performance-Evaluation" class="headerlink" title="Performance Evaluation"></a>Performance Evaluation</h1><p>We set the value of <code>num</code> to <code>[10000, 50000, 100000, 200000]</code>. For Brute Force (BF) we used its optimization algorithm. For Ehrlich Sieve (ES) we do not change anything.</p><p><img src="/post/4d31/1.png" alt></p><p>We can see that as the number increases the time consumed by BF is higher. For all the test, the time cost of ES algorithm no more than one seconds.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In math, prime numbers are whole numbers greater than 1, that have only two factors – 1 and the number itself. Prime numbers are divisibl
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://shunyangli.github.io/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://shunyangli.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>A* Search Algorithm</title>
    <link href="https://shunyangli.github.io/post/44e7/"/>
    <id>https://shunyangli.github.io/post/44e7/</id>
    <published>2021-04-21T04:06:33.000Z</published>
    <updated>2022-05-03T05:31:45.248Z</updated>
    
    <content type="html"><![CDATA[<p>A* search algorithm is a heuristic search which works on path planning and graph traversal (weighted).<br>It is an extension of <a href="https://shunyangli.github.io/2020/05/03/Algorithm/">Dijkstra</a> algorithm. The formula of Dijkstra is $f(n)=g(n)$, and the formula of A* is $f(n)=g(n) + h(n)$, where $g(n)$ is the cost from start to current node and $h(n)$ is the estimated cost from source node to target node. Manhattan distance or Euclidean distance is usually used to estimate. A* algorithm is better than Dijkstra when $h(n)$ is admissible (never overstimates). The time complexity is $O(|E|log|V|)$ and space complexity is $O(|v|)$. The worst case is same with Dijkstra. </p><h1 id="Pseudocode"><a href="#Pseudocode" class="headerlink" title="Pseudocode"></a>Pseudocode</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;A* search algorithm is a heuristic search which works on path planning and graph traversal (weighted).&lt;br&gt;It is an extension of &lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://shunyangli.github.io/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://shunyangli.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Bidirectional BFS</title>
    <link href="https://shunyangli.github.io/post/c0bf/"/>
    <id>https://shunyangli.github.io/post/c0bf/</id>
    <published>2021-04-15T13:25:01.000Z</published>
    <updated>2022-05-03T05:31:45.260Z</updated>
    
    <content type="html"><![CDATA[<p>Bidirectional BFS is applicable to the case where the target node is known; the initial node expands toward the target node and the target node expands toward the initial node at the same time, until the same node appears in both expansion directions, and the search ends. For example, in a maze, when we need to know the number of steps to reach each location, a normal BFS is sufficient, but if we only need to know the number of steps to reach a specific location, we should use a two-way BFS. Start BFS from two target points at the same time, so we will have two different queues. Update the smaller one each time until there are elements in the two queues that overlap, indicating that the path is found. For example in the following graph, it will stop at node 9.</p><p><img src="/post/c0bf/1.png" alt></p><h1 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity"></a>Time Complexity</h1><p>Suppose if the branching factor of the tree is b and the distance between the target vertex and the source is d, then the normal BFS search complexity will be $O(b^d)$. On the other hand, if we perform two search operations, the complexity of each search will be $O(b^{d/2})$ and the total complexity will be $O(b^{d/2} + b^{d/2})$, which is much less than $O(b^d)$.</p><p>The branch factor refers to the number of children of each node in the expanded tree, i.e., the number of new elements that can be reached by each element. For example, in a maze where you can only move up and down, the branch factor is 4.</p><h1 id="Word-Ladder"><a href="#Word-Ladder" class="headerlink" title="Word Ladder"></a>Word Ladder</h1><p><a href="https://leetcode.com/problems/word-ladder" target="_blank" rel="noopener">Word Ladder</a> is a hard level question. It can be solved by using BFS. However BFS will time out. We can use Bidirectional to solve this issue.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; findLadders(<span class="built_in">string</span> from, <span class="built_in">string</span> to, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; wordList) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="built_in">string</span>&gt; lexicon(wordList.begin(), wordList.end());</span><br><span class="line">        <span class="keyword">auto</span> result = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&gt;&#123;&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// check whether exist to, if not just return a empty</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> lexicon.count(to)) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// init a word maps for double bfs</span></span><br><span class="line">        <span class="keyword">auto</span> word_maps = <span class="built_in">unordered_map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&gt;&#123;&#125;;</span><br><span class="line">        <span class="comment">// the left vector</span></span><br><span class="line">        <span class="keyword">auto</span> left = <span class="built_in">unordered_set</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&#123;from&#125;;</span><br><span class="line">        <span class="comment">// the right vector</span></span><br><span class="line">        <span class="keyword">auto</span> right = <span class="built_in">unordered_set</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&#123;to&#125;;</span><br><span class="line">        <span class="comment">// contain all the visited elements</span></span><br><span class="line">        <span class="keyword">auto</span> visited = <span class="built_in">unordered_set</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the bfs direction, could start at from and start at end</span></span><br><span class="line">        <span class="comment">// true means start at from</span></span><br><span class="line">        <span class="comment">// false means start at end</span></span><br><span class="line">        <span class="comment">// this is helpful for store the word into hashmap</span></span><br><span class="line">        <span class="keyword">auto</span> ahead = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">auto</span> found = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// which contain all the words</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">not</span> left.empty() <span class="keyword">and</span> <span class="keyword">not</span> right.empty()) &#123;</span><br><span class="line">            <span class="comment">// change the position when left &gt; right</span></span><br><span class="line">            <span class="comment">// part of two end bfs algorithm</span></span><br><span class="line">            <span class="keyword">if</span> (left.size() &gt; right.size()) &#123;</span><br><span class="line">                <span class="built_in">std</span>::swap(left, right);</span><br><span class="line">                ahead = <span class="keyword">not</span> ahead;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// contain all the words which generate according to left set words</span></span><br><span class="line">            <span class="comment">// which like insert to queue in bfs</span></span><br><span class="line">            <span class="keyword">auto</span> <span class="built_in">queue</span> = <span class="built_in">unordered_set</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&#123;&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// insert all the left set into visited</span></span><br><span class="line">            visited.insert(left.begin(), left.end());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// loop all the element in the left</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> origin_word : left) &#123;</span><br><span class="line">                <span class="keyword">auto</span> neighbors = neighbor(origin_word, visited, lexicon);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; word : neighbors) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">std</span>::find(right.begin(), right.end(), word) != right.end()) &#123;</span><br><span class="line">                        found = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (ahead) &#123;</span><br><span class="line">                        word_maps[word].push_back(origin_word);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        word_maps[origin_word].push_back(word);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">queue</span>.insert(word);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// put the new path to left then do new iterator</span></span><br><span class="line">            left = <span class="built_in">queue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// if found the to word, then generate the word ladders</span></span><br><span class="line">            <span class="keyword">if</span> (found) &#123;</span><br><span class="line">                result.push_back(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&#123;to&#125;);</span><br><span class="line">                <span class="comment">// the first one should be from</span></span><br><span class="line">                <span class="keyword">while</span> (result[<span class="number">0</span>][<span class="number">0</span>] != from) &#123;</span><br><span class="line">                    result = generate_result(result, word_maps);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// std::sort(result.begin(), result.end());</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * generate the neighbor words according to the word</span></span><br><span class="line"><span class="comment">     * to change the char from a-z</span></span><br><span class="line"><span class="comment">     * @param word the currecnt word to generate neighor words</span></span><br><span class="line"><span class="comment">     * @param visited the visited word</span></span><br><span class="line"><span class="comment">     * @param lexicon all the words</span></span><br><span class="line"><span class="comment">     * @return the neighors of the word</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">neighbor</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; word,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">const</span> <span class="built_in">unordered_set</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp; visited,</span></span></span><br><span class="line">                  const unordered_set&lt;std::string&gt;&amp; lexicon) -&gt; unordered_set&lt;std::string&gt; &#123;</span><br><span class="line">        <span class="comment">// contains all the neighbor words</span></span><br><span class="line">        <span class="keyword">auto</span> words = <span class="built_in">unordered_set</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::size_type&#123;<span class="number">0</span>&#125;; i &lt; word.size(); i++) &#123;</span><br><span class="line">            <span class="comment">// because we does n</span></span><br><span class="line">            <span class="comment">// ot want to change the current word</span></span><br><span class="line">            <span class="comment">// so we use curr_char to store the char which will be replaced</span></span><br><span class="line">            <span class="keyword">char</span> curr_char = word[i];</span><br><span class="line">            <span class="comment">// change the curr with a-z and check whether visited and whether in lexicon</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> c = <span class="string">'a'</span>; c &lt;= <span class="string">'z'</span>; ++c) &#123;</span><br><span class="line">                word[i] = c;</span><br><span class="line">                <span class="comment">// to avoid same word</span></span><br><span class="line">                <span class="keyword">if</span> (curr_char == c) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// the word should not visited and should in lexicon</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">not</span> visited.count(word) </span><br><span class="line">                   <span class="keyword">and</span> lexicon.count(word)) &#123;</span><br><span class="line">                    words.insert(word);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            word[i] = curr_char;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> words;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * iterate the result according to the end word</span></span><br><span class="line"><span class="comment">     * it can be a recurrsion, but I do not want to do that</span></span><br><span class="line"><span class="comment">     * recurrsion not stable.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * In the hashmap the word stored as: end-&gt;&#123;w1, w2, w2&#125;</span></span><br><span class="line"><span class="comment">     * this means w1, w2, w3 can convert to end, similar idea for start</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param words is the result which contain as list</span></span><br><span class="line"><span class="comment">     * @param word_maps hashmap, key is word, values is word ladders</span></span><br><span class="line"><span class="comment">     * @return a new list of result and then loop again</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">generate_result</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&gt;&amp; words,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&gt;&amp; word_maps)</span></span></span><br><span class="line">       -&gt; std::vector&lt;std::vector&lt;std::string&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">auto</span> temp = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&gt;&#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the word_maps were stored as a hashmap</span></span><br><span class="line">        <span class="comment">// key is the word, value is the word ladders</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; word_list : words) &#123;</span><br><span class="line">            <span class="keyword">auto</span> t = word_list[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// get the related word from hashmap</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; word : word_maps[t]) &#123;</span><br><span class="line">                <span class="comment">// insert the value in the front of list</span></span><br><span class="line">                <span class="keyword">auto</span> w = word_list;</span><br><span class="line">                w.insert(w.begin(), word);</span><br><span class="line">                temp.push_back(w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>This problem is also the first assignment of <a href="https://webcms3.cse.unsw.edu.au/COMP6771/20T2/" target="_blank" rel="noopener">COMP6771</a> in 20T2.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Bidirectional BFS is applicable to the case where the target node is known; the initial node expands toward the target node and the targe
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://shunyangli.github.io/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://shunyangli.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Automatically generate gitignore</title>
    <link href="https://shunyangli.github.io/post/c26f/"/>
    <id>https://shunyangli.github.io/post/c26f/</id>
    <published>2021-04-15T11:25:59.000Z</published>
    <updated>2022-05-03T05:31:45.254Z</updated>
    
    <content type="html"><![CDATA[<p>We use <a href="https://github.com/" target="_blank" rel="noopener">Git</a> a lot when working on projects, but not all of the files we need to put into github, such as datasets, virtual environments, and configuration files. So we need to configure .gitignore to automatically ignore these files that don’t need to be added to the Git admin. Configuring .gitignore is usually tedious because you need to add all the uncessary files.</p><p><a href="https://github.com/Antrikshy/ignr.py" target="_blank" rel="noopener">ignr</a> is a tool which can generate .gitignore files automatically. It is implmeneted by Python.</p><h1 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h1><p>If you already installed python and pip, then you can execute the following command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ignr</span><br></pre></td></tr></table></figure><h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><p>The <a href="https://github.com/Antrikshy/ignr.py" target="_blank" rel="noopener">ignr</a> supports over four hundred different .gitignore templates, which we can view with the<code>ignr -l</code>command or search for with the <code>ignr -s</code>  command. For example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ignr -s python</span><br></pre></td></tr></table></figure><p>Searches for supplied query in list of available templates from gitignore.io.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ignr -n python</span><br></pre></td></tr></table></figure><p>It will generate python’s project gitignore file in the currect directory.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;We use &lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git&lt;/a&gt; a lot when working on projects, but not all of the files we n
      
    
    </summary>
    
    
      <category term="git" scheme="https://shunyangli.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://shunyangli.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Mail activation</title>
    <link href="https://shunyangli.github.io/post/9b8a/"/>
    <id>https://shunyangli.github.io/post/9b8a/</id>
    <published>2020-07-04T05:36:33.000Z</published>
    <updated>2022-05-03T05:31:45.322Z</updated>
    
    <content type="html"><![CDATA[<p>本文会教大家怎么做邮箱验证，以及怎么发送好看一点的邮箱的HTML模板。很久没写过有用的教程，本来今天我应该在干经济，实在写不下去了，我跑来写这些了。(⊙︿⊙)关于怎么使用flask发送邮件，我在之前的教程有说的。<a href="https://shunyangli.github.io/2019/10/08/Flask-Mail/#more">传送门</a></p><p>技术：</p><ul><li>flask</li><li>html</li><li>css</li></ul><h1 id="HTML-Template"><a href="#HTML-Template" class="headerlink" title="HTML Template"></a>HTML Template</h1><p>首先我们需要知道flask使用的是Jinja2的模板。</p><ol><li>需要首先设计一个HTML来展示你相对应的邮箱验证的界面。我已经提前做好了一个，所有的源代码我都放到最后面了，到时候大家可以下载跑一下看看。</li></ol><p><img src="/post/9b8a/1.png" alt></p><ol start="2"><li>设置一下HTML所需要的参数，激活所需要的URL，用户名等。</li><li>写flask部分的代码</li></ol><p><strong>首先初始化flask：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> TimedJSONWebSignatureSerializer <span class="keyword">as</span> Serializer</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, session</span><br><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Mail, Message</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = os.urandom(<span class="number">24</span>)</span><br><span class="line">app.config[<span class="string">'MAIL_SERVER'</span>] = <span class="string">'smtp.qq.com'</span></span><br><span class="line">app.config[<span class="string">'MAIL_PORT'</span>] = <span class="number">465</span></span><br><span class="line">app.config[<span class="string">'MAIL_USE_SSL'</span>] = <span class="literal">True</span></span><br><span class="line">app.config[<span class="string">'MAIL_USERNAME'</span>] = <span class="string">'xxxx'</span></span><br><span class="line">app.config[<span class="string">'MAIL_PASSWORD'</span>] = <span class="string">'xxxx'</span></span><br><span class="line">app.config[<span class="string">'MAIL_DEFAULT_SENDER'</span>] = <span class="string">'xxxx@qq.com'</span></span><br><span class="line"></span><br><span class="line">mail = Mail(app)</span><br></pre></td></tr></table></figure><p><strong>初始化发送邮件的function:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 异步发送function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">async_send_mail</span><span class="params">(app, msg)</span>:</span></span><br><span class="line">    <span class="comment"># 获取当前程序的上下文</span></span><br><span class="line">    <span class="keyword">with</span> app.app_context():</span><br><span class="line">        <span class="comment"># 发送邮件</span></span><br><span class="line">        mail.send(msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义发送函数, message的配置和上面讲的一样</span></span><br><span class="line"><span class="comment"># **kwargs 指传进来的参数, 可以传多个参数进来。eg: username = 'xxx', link = 'xxx.com'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span><span class="params">(to, subject, template, **kwargs)</span>:</span></span><br><span class="line">    msg = Message(subject, sender = <span class="string">'1479201404@qq.com'</span>, recipients=[to])</span><br><span class="line">    msg.html = render_template(template + <span class="string">'.html'</span>, **kwargs)</span><br><span class="line">    thr = Thread(target=async_send_mail, args=[app, msg])</span><br><span class="line">    thr.start()</span><br><span class="line">    <span class="comment"># 返回调用的结果</span></span><br><span class="line">    <span class="keyword">return</span> thr</span><br></pre></td></tr></table></figure><p><strong>初始化加密fucntion：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encryption</span><span class="params">(data, expires_in=<span class="number">3600</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    加密json</span></span><br><span class="line"><span class="string">    :param data: 需要加密的数据</span></span><br><span class="line"><span class="string">    :param expires_in: 过期时间</span></span><br><span class="line"><span class="string">    :return: 返回加密的str</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    s = Serializer(app.config[<span class="string">'SECRET_KEY'</span>], expires_in=expires_in)</span><br><span class="line">    <span class="keyword">return</span> s.dumps(data).decode(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decryption</span><span class="params">(token)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    解密token到json数据</span></span><br><span class="line"><span class="string">    :param token: 密文</span></span><br><span class="line"><span class="string">    :return: 解密的数据</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    s = Serializer(app.config[<span class="string">'SECRET_KEY'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = s.loads(token)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">except</span> SignatureExpired:</span><br><span class="line">        print(<span class="string">'Token expired'</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'Unknown error'</span>)</span><br></pre></td></tr></table></figure><p><strong>最后开始写flask路由部分的代码:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/', methods=["POST", "GET"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        email = request.form.get(<span class="string">'email'</span>)</span><br><span class="line">        <span class="keyword">if</span> email <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            session[email] = email</span><br><span class="line">            token = encryption(email)</span><br><span class="line">            send_mail(email, <span class="string">'Activate you account'</span>, <span class="string">'activate'</span>, action_url=<span class="string">'127.0.0.1:5000/activate/&#123;&#125;'</span>.format(token))</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&lt;h1&gt;success&lt;/h1&gt;'</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/activate/&lt;token&gt;', methods=["POST", "GET"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(token)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> token <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"False"</span></span><br><span class="line">    </span><br><span class="line">    email = decryption(token)</span><br><span class="line">    <span class="keyword">if</span> session.get(email) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"False"</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"True"</span></span><br></pre></td></tr></table></figure><p>结果如下:</p><p><img src="/post/9b8a/2.png" alt></p><p><img src="/post/9b8a/3.png" alt></p><p><img src="/post/9b8a/4.png" alt></p><p>具体代码可以下载查看：<a href="./mail-activation.zip">下载</a></p><p><strong>ps：需要修改相对应的邮箱和邮箱的配置</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文会教大家怎么做邮箱验证，以及怎么发送好看一点的邮箱的HTML模板。很久没写过有用的教程，本来今天我应该在干经济，实在写不下去了，我跑来写这些了。(⊙︿⊙)关于怎么使用flask发送邮件，我在之前的教程有说的。&lt;a href=&quot;https://shunyangli.git
      
    
    </summary>
    
    
    
      <category term="api" scheme="https://shunyangli.github.io/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>database</title>
    <link href="https://shunyangli.github.io/post/1c6b/"/>
    <id>https://shunyangli.github.io/post/1c6b/</id>
    <published>2020-07-03T03:47:42.000Z</published>
    <updated>2022-05-03T05:31:45.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h1><p>包含一些database常见的问题，MySQL的索引，怎么使用索引等等。</p><h1 id="数据库的三大范式"><a href="#数据库的三大范式" class="headerlink" title="数据库的三大范式"></a>数据库的三大范式</h1><p>第一范式：每个列都不能再拆分</p><p>第二范式：在第一范式的基础上，非主键列完全依赖于主键，而不能是依赖于主键的一部分</p><p>第三范式：在第二范式的基础上，非主键列只依赖于主键，不依赖于其他非主键。</p><h1 id="引擎"><a href="#引擎" class="headerlink" title="引擎"></a>引擎</h1><p>MySQL里面储存引擎MyISAM与InnoDB的区别：</p><p><strong>InnoDB引擎：</strong>提供了对数据库ACID的支持，并且提供了行级锁和外键的约束。它的设计目的就是处理大数据容量的数据库系统。<strong>可以自适应哈希索引</strong>（聚簇索引：在索引中保存了数据，从而避免直接读取磁盘，因此对查询性能有很大的提升）</p><p><strong>MyISAM引擎：</strong>不提供事务支持，也不支持行级锁和外键。<strong>只支持表级锁。支持压缩表和空间数据索引。</strong>（非聚簇索引：索引和数据分开存，在索引里面找到需要的内存地址，然后去读取）</p><p>MyISAM 崩溃后发生损坏的概率比 InnoDB 高很多，而且恢复的速度也更慢。InnoDB现在是MySQL的默认引擎。</p><h1 id="MySQL的ACID原理"><a href="#MySQL的ACID原理" class="headerlink" title="MySQL的ACID原理"></a>MySQL的ACID原理</h1><p><strong>原子性(Atomicity)、一致性(Consistency)、隔离性(Isolation)、持久性(Durability)</strong></p><p>我们以从A账户转账50元到B账户为例进行说明一下ACID，四大特性。</p><p><strong>原子性：</strong></p><p>一个事物是一个不可分割的单位，其中的操作<strong>要么全做，要么不做，不存在中间状态。</strong>要么转账成功，要么失败，不存在中间状态。</p><blockquote><p>如果没办法保证原子性会怎么样？</p></blockquote><p>可能会导致A的账户少了50元，但是B的账户也没多50。系统总金额会少50.。。。</p><p><strong>隔离性：</strong></p><p>是指在并发执行的时候，<em>事务内部的操作与其他的事务是隔离的</em>，并发操作的时候各个事务之间不能相互干扰。</p><blockquote><p>如果没办法保证隔离性会发生什么？</p></blockquote><p>比如说A有200，B有0，A向B转账两次，每次50元。如果没发保证隔离性，就会导致A扣款了两次，但是B只增加了一次，A就变成了100，B只有50。又凭空蒸发了。</p><p><strong>持久性：</strong></p><p>指的是当事务提交之后，它对数据库的改变就应该是永久性的。如果接下来有什么错误发生也不会被影响到。</p><blockquote><p>如果没办法保证持久性会发生什么？</p></blockquote><p>如果你正在写入磁盘的时候，突然服务器宕机了，在内存中修改的数据全部丢失了，持久性就无法保证。</p><p><strong>一致性：</strong></p><p>是指事务执行前后，数据处于一种合法的状态。。那什么是合法的数据状态呢？ oK，这个状态是满足预定的约束就叫做合法的状态，再通俗一点，这状态是由你自己来定义的。<strong>「满足这个状态，数据就是一致的，不满足这个状态，数据就是不一致的」</strong>！（就是自己去规定的一个状态，比如账户余额必须大于100）</p><blockquote><p>如果没办法保证一致性会发生什么？</p></blockquote><p>例一：A账户有200元，转账300元出去，此时A账户余额为-100元。你自然就发现了此时数据是不一致的，为什么呢？因为你定义了一个状态，余额这列必须大于0。</p><p><strong>数据库必须要实现AID三大特性，才有可能实现一致性。</strong>例如，原子性无法保证，显然一致性也无法保证。</p><h2 id="MySQL怎么实现ACID的"><a href="#MySQL怎么实现ACID的" class="headerlink" title="MySQL怎么实现ACID的"></a>MySQL怎么实现ACID的</h2><p>MySQL里面InnoDB是使用<strong><code>undo log</code> 是实现原子性</strong>的关键，<strong>当事物回滚的时候能够撤销所有已经成功执行的SQL语句。</strong>他需要记录你要回滚的相应日志信息：</p><ol><li>当你delete一条数据的时候，就需要记录这条数据的信息，回滚的时候，insert这条旧数据</li><li>当你update一条数据的时候，就需要记录之前的旧值，回滚的时候，根据旧值执行update操作</li><li>当年insert一条数据的时候，就需要这条记录的主键，回滚的时候，根据主键执行delete操作</li></ol><p>InnoDB使用<strong><code>redo log</code>是实现持久性</strong>的关键，Mysql是先把磁盘上的数据加载到内存中，在内存中对数据进行修改，同时会在<code>redo log</code>里面记录该操作，当宕机重启之后，会将<code>redo log</code>中的内容回复到数据库里面。</p><p><strong>MySQL使用的是锁和MVCC机制保证隔离性。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Database&quot;&gt;&lt;a href=&quot;#Database&quot; class=&quot;headerlink&quot; title=&quot;Database&quot;&gt;&lt;/a&gt;Database&lt;/h1&gt;&lt;p&gt;包含一些database常见的问题，MySQL的索引，怎么使用索引等等。&lt;/p&gt;
&lt;h1 i
      
    
    </summary>
    
    
    
      <category term="db" scheme="https://shunyangli.github.io/tags/db/"/>
    
  </entry>
  
  <entry>
    <title>Distributed Things</title>
    <link href="https://shunyangli.github.io/post/f61e/"/>
    <id>https://shunyangli.github.io/post/f61e/</id>
    <published>2020-06-26T05:05:27.000Z</published>
    <updated>2022-05-03T05:31:45.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Distributed-session"><a href="#Distributed-session" class="headerlink" title="Distributed session"></a>Distributed session</h1><p>怎么使用flask来做分布式session，以及为什么要使用分布式的session。</p><p>因为cookie不太适合存一些敏感信息，所以一般敏感的信息会存到session里。但是大部分时候都是cookie和session结合使用。session是存在服务器里面的相对安全一点。</p><p><strong>储存原理：</strong></p><p>通过cookie存一个session_id，然后具体的数据是保存到session里面，而session会存到server里面。比如在用户登录之后服务器会在cookie里面保存一个session_id，下次再发起请求的时候会把该session_id携带上来，服务器根据session_id在session的库中获取用户的session数据。</p><p><strong>flask默认采用的方式是将session数据加密，然后存到cookie里面。但是也可以换成别的方式。</strong></p><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>先来了解一下flask默认的session的使用方法。因为要使用session所以必须要设置<code>SECRET_KEY</code>才能正常启动。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">by using flask session to learn distribute system</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = os.urandom(<span class="number">24</span>)</span><br><span class="line">app.config[<span class="string">'SESSION_PERMANENT'</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/', methods=["POST", "GET"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 获取session里面的key，如果不存在就返回nothing</span></span><br><span class="line">    <span class="keyword">return</span> session.get(<span class="string">'key'</span>, <span class="string">'nothing'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/test', methods=["POST", "GET"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">session_test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 设置session里面key的值</span></span><br><span class="line">    session[<span class="string">'key'</span>] = <span class="string">'TEST'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'ok'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/set', methods=["POST", "GET"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_key</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 根据参数来设置session里面的key</span></span><br><span class="line">    key = request.args.get(<span class="string">'key'</span>)</span><br><span class="line">    session[<span class="string">'key'</span>] = key</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'ok'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/get', methods=["POST", "GET"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> session.get(<span class="string">'key'</span>, <span class="string">'nothing'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/delete', methods=["POST", "GET"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span><span class="params">()</span>:</span></span><br><span class="line">    session.pop(<span class="string">'key'</span>)</span><br><span class="line">    <span class="comment"># del session['key']</span></span><br><span class="line">    <span class="comment"># session.clear()</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'ok'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>在这里就不给大家截图了，大家可以自己输入这些代码尝试一下。</p><h2 id="session的过期时间"><a href="#session的过期时间" class="headerlink" title="session的过期时间"></a>session的过期时间</h2><p>如果没有设置session的有效时间，默认的就是关闭浏览器之后过期。如果设置<code>session.permanent=True</code>，那session默认31天之后过期。如果不想31天后过期可以设置<code>app.config[&#39;PERMANENT_SESSION_LIFETIME&#39;] = 3600</code>来修改过期时间。</p><h2 id="session的删除"><a href="#session的删除" class="headerlink" title="session的删除"></a>session的删除</h2><p>session的储存方法类似字典。有三种删除的方法<code>session.pop(&#39;key&#39;)</code>, <code>del session[&#39;key&#39;]</code>, <code>session.clear()</code>最后一个表示清除整个session的数据。</p><h2 id="分布式的session"><a href="#分布式的session" class="headerlink" title="分布式的session"></a>分布式的session</h2><p><img src="/post/f61e/1.png" alt></p><p>利用flask-session把session存到服务器里面。flask-session支持多种数据库：</p><ul><li>redis</li><li>memcached</li><li>filesystem</li><li>MongoDB</li><li>sqlalchmey</li></ul><p>因为redis是把数据储存到内存上面的，速度相当快，所以一般用redis来储存session的。</p><p>首先把<code>flask-seesion</code>，<code>redis</code>安装一下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install flask-session</span><br><span class="line">pip3 install redis</span><br></pre></td></tr></table></figure><p>然后在代码里面配置redis的信息就好：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">使用redis来配置session</span></span><br><span class="line"><span class="string">类似分布式的session的数据</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, request</span><br><span class="line"><span class="keyword">from</span> flask_session <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置使用session的储存方式</span></span><br><span class="line">app.config[<span class="string">'SESSION_TYPE'</span>] = <span class="string">'redis'</span></span><br><span class="line">app.config[<span class="string">'SESSION_REDIS'</span>] = Redis(</span><br><span class="line">    host=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port=<span class="number">6379</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类似是否对session加密</span></span><br><span class="line">app.config[<span class="string">'SESSION_USE_SIGNER'</span>] = <span class="literal">True</span></span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = os.urandom(<span class="number">24</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否长期使用session, 一般是关闭的, 浏览器关闭则session失效</span></span><br><span class="line">app.config[<span class="string">'SESSION_PERMANENT'</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># session有效时长</span></span><br><span class="line">app.config[<span class="string">'PERMANENT_SESSION_LIFETIME'</span>] = <span class="number">3600</span></span><br><span class="line">Session(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/', methods=["POST", "GET"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> session.get(<span class="string">'key'</span>, <span class="string">'nothing'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/test', methods=["POST", "GET"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">session_test</span><span class="params">()</span>:</span></span><br><span class="line">    session[<span class="string">'key'</span>] = <span class="string">'TEST'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'ok'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/set', methods=["POST", "GET"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_key</span><span class="params">()</span>:</span></span><br><span class="line">    key = request.args.get(<span class="string">'key'</span>)</span><br><span class="line">    print(key)</span><br><span class="line">    session[<span class="string">'key'</span>] = key</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'ok'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/get', methods=["POST", "GET"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> session.get(<span class="string">'key'</span>, <span class="string">'nothing'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>我们可以通过<code>redis-cli</code>来查看相对应的session信息：</p><p><img src="/post/f61e/2.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Distributed-session&quot;&gt;&lt;a href=&quot;#Distributed-session&quot; class=&quot;headerlink&quot; title=&quot;Distributed session&quot;&gt;&lt;/a&gt;Distributed session&lt;/h1&gt;&lt;p&gt;怎么
      
    
    </summary>
    
    
    
      <category term="Distributed" scheme="https://shunyangli.github.io/tags/Distributed/"/>
    
  </entry>
  
  <entry>
    <title>cpp learning note</title>
    <link href="https://shunyangli.github.io/post/da06/"/>
    <id>https://shunyangli.github.io/post/da06/</id>
    <published>2020-06-01T06:41:33.000Z</published>
    <updated>2022-05-03T05:31:45.419Z</updated>
    
    <content type="html"><![CDATA[<p>COMP6771 lecture note. COMP6771学习笔记</p><h1 id="cpp"><a href="#cpp" class="headerlink" title="cpp"></a>cpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello world"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">auto main() -&gt; int &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello world"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="cpp-数据类型"><a href="#cpp-数据类型" class="headerlink" title="cpp 数据类型"></a>cpp 数据类型</h1><p>学过c语言应该对数据类型都有所了解，cpp的数据类型和c语言差不多，但是比c语言要多几种。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span>, <span class="keyword">int</span>, <span class="keyword">float</span>, <span class="keyword">double</span>, <span class="keyword">char</span>, <span class="keyword">void</span>(无类型), <span class="keyword">wchar_t</span>(宽字符型)</span><br></pre></td></tr></table></figure><p><code>wchar_t</code> 是这样定义的，所以<code>wchar_t</code>和<code>short int</code>占用的空间一样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">short</span> <span class="keyword">int</span> <span class="keyword">wchar_t</span>;</span><br></pre></td></tr></table></figure><p><code>typedef</code>的作用就是给数据类型换一个名字而已，语法：<code>typedef type name</code>，比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> bit;</span><br></pre></td></tr></table></figure><p>编译器会理解成<code>bit</code>和<code>int</code>是一样的数据类型。</p><p><strong>枚举类型：</strong></p><p><code>enum</code>是枚举类型的关键词，枚举类型的定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="keyword">enum</span>-name &#123; <span class="built_in">list</span> of names&#125; var-<span class="built_in">list</span>;</span><br></pre></td></tr></table></figure><p>enum-name 是枚举类型名。list of name 是由逗号分隔开的。</p><p>例如，我们可以使用枚举类型来定义一个color：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> color &#123;</span><br><span class="line">    red,</span><br><span class="line">    green,</span><br><span class="line">    blue</span><br><span class="line">&#125; c;</span><br></pre></td></tr></table></figure><p>在color里面red默认是0，green默认是1，blue默认是2。也可以手动去更改相对应的数字，比如:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> color &#123;</span><br><span class="line">    red = <span class="number">1</span>,</span><br><span class="line">    green,</span><br><span class="line">    blue</span><br><span class="line">&#125; c;</span><br></pre></td></tr></table></figure><p>那么green就是2，blue就是3。也可以去定义<code>c = red || c = blue</code>等等，这样c代表的就是不同的数字。一般在去设定人物名称或者别的不同类型的时候会用到枚举来替代数字，这样更容易分辨。比如说：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// assume:</span></span><br><span class="line"><span class="comment">// 0 is red,</span></span><br><span class="line"><span class="comment">// 1 is green</span></span><br><span class="line"><span class="comment">// 这样的话很难记住，如果使用枚举就不需要考虑这些，直接对数据进行判断就行</span></span><br><span class="line"><span class="keyword">if</span> (color == red) <span class="comment">/*better than*/</span> <span class="keyword">if</span> (color == <span class="number">1</span>)</span><br><span class="line"><span class="comment">// it's hard to known what is 1</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">enum</span> color &#123;</span><br><span class="line">    red,</span><br><span class="line">    green,</span><br><span class="line">    blue</span><br><span class="line">&#125; c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    c = blue;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; color::red &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>提示：</em></p><ol><li>枚举变量可以直接输出，但<strong>不能直接输入</strong></li><li><strong>不能直接将常量赋给枚举变量</strong></li><li>不同类型的枚举变量之间<strong>不能相互赋值</strong></li><li>枚举变量的输入输出<strong>一般都采用switch</strong>语句将其转换为字符或字符串；枚举类型数据的其他处理也往往应用switch语句，以保证程序的合法性和可读性。</li></ol><p><strong>常见的类型修饰符：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span>, <span class="keyword">short</span>, <span class="keyword">signed</span>, <span class="keyword">unsigned</span></span><br></pre></td></tr></table></figure><p><em>long int 与 int 都是 4 个字节</em></p><p>可以使用<code>&lt;limits&gt;</code> 来查看相对应的数据类型的限制（在c语言里面声明头文件需要<code>*.h</code>，在cpp里面不需要带.h）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Type size"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Int: "</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">int</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Max int: "</span> &lt;&lt; numeric_limits&lt;<span class="keyword">int</span>&gt;::max() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Min int: "</span> &lt;&lt; numeric_limits&lt;<span class="keyword">int</span>&gt;::min() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用<code>using namespace xxx;</code>，在调用function的时候不需要<code>xxx:cout</code>，可以直接使用function。<code>endl = \n</code>，就是换行符的意思。<code>&lt;&lt;</code>可以理解为合并字符串，有点类似于shell里面的<code>&lt;</code>（<del>不一样，只是类似</del>） <code>numeric_limits</code>这个函数里面使用到了<em>泛型</em>，但是忘得差不多了o(╥﹏╥)o。。。慢慢补吧，如果学过Java那么应该对这部分比较熟悉。</p><p>变量的声明：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type variable_name = value;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b,c;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> b;</span><br></pre></td></tr></table></figure><p>未初始化的变量都被默认为null。</p><p><strong><em>声明extern关键字的全局变量和函数可以使得它们能够跨文件被访问。</em></strong></p><h1 id="cpp-变量作用域"><a href="#cpp-变量作用域" class="headerlink" title="cpp 变量作用域"></a>cpp 变量作用域</h1><p><strong>局部变量：</strong></p><p>在函数或代码块内部声明的变量称为局部变量。他们在函数体内声明后仅能被其声明的所在函数体内部的后续语句操作。局部变量不能被函数外部访问到。也就是说只作用于这一个函数内：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cal(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = a + b;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如在<code>int cal(int,int)</code>里面定义了一个c的变量，那么这个c只能作用于<code>cal</code>这个function内。</p><p><strong>全局变量：</strong></p><p>在整个cpp文件内都可以用。在整个生命周期内都可以使用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    cal(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    sum = a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以在任意函数调用<code>sum</code>这个变量。</p><h1 id="cpp-常量"><a href="#cpp-常量" class="headerlink" title="cpp 常量"></a>cpp 常量</h1><p>二进制，八进制，十进制，十六进制。二进制是以<code>0bxx</code>开头，数字范围是0和1。八进制是0开头的，数字范围是0-7。十进制就是我们常用的数字。十六进制是<code>ox</code>开头，取值范围是<code>0-9, A-F</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">212 // 合法   </span><br><span class="line">215u// 合法  </span><br><span class="line">0xFeeL  // 合法  </span><br><span class="line">078 // 不合法: 8不是合法的八进制  </span><br><span class="line">032UU   // 不合法: U后缀不能重复使用</span><br></pre></td></tr></table></figure><p>其中<code>u</code>代表的是<code>unsigned</code>，也可以是<code>l</code> 等：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">85 // 十进制</span><br><span class="line">0213   // 八进制</span><br><span class="line">0x4b   // 十六进制</span><br><span class="line">30 // 整型</span><br><span class="line">30u// 无符号整型</span><br><span class="line">30l// 长整型</span><br><span class="line">30ul   // 无符号整型</span><br></pre></td></tr></table></figure><h1 id="cpp储存类型"><a href="#cpp储存类型" class="headerlink" title="cpp储存类型"></a>cpp储存类型</h1><p>储存类型如下：</p><ol><li>auto</li><li>register</li><li>static</li><li>extern</li><li>mutable</li></ol><p><strong>auto储存类型：</strong></p><p><strong>auto</strong> 关键字用于两种情况：声明变量时根据初始化表达式自动推断该变量的类型、声明函数时函数返回值的占位符。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> a = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">int</span> month;</span><br></pre></td></tr></table></figure><p>auto 仅能运用于函数内的局部变量。</p><p><strong>register 存储类型：</strong></p><p><strong>register</strong> 存储类用于定义存<strong>储在寄存器中而不是 RAM 中的局部变量</strong>。这意味着变量的最大尺寸等于寄存器的大小（通常是一个词），<strong>且不能对它应用一元的 ‘&amp;’ 运算符</strong>（因为它没有内存位置）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">register</span> <span class="keyword">int</span>  miles;</span><br></pre></td></tr></table></figure><p><strong>register类型应该仅应用于需要快速访问的变量</strong>，比如计数器。需要注意的是，定义 register 类型的变量并不意味着该变量一定就存储在寄存器中，这仅仅意味着需要按照硬件以及具体实现的限制来判定到底是不是存储在寄存器中。</p><p><strong>static储存类型：</strong></p><p><strong>static</strong> 存储类型的变量意味着该变量将会从始至终地存活在程序的整个生命周期内，而不会随着每次访问到它所在的代码块时就建立该变量，离开代码块时就销毁该变量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">call_num</span> <span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    call_num();</span><br><span class="line">    call_num();</span><br><span class="line">    call_num();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">call_num</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a-- &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>extern 存储类型：</strong></p><p><strong>extern</strong> 存储类型用于使全局变量的引用对所有程序文件可见。如果前面已经定义了一个变量名，那么就不能再使用 extern 来声明同一变量名的变量了。有点类似于Python的<code>import</code>。</p><p>在<code>main.app</code>中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">write_line</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    num = <span class="number">1</span>;</span><br><span class="line">    write_line();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>write.app</code>中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> num;</span><br><span class="line"><span class="comment">//void write_line();</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write_line</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"count is : "</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译： <code>g++ main.cpp write.app -o main</code></p><p>运行：<code>./main</code></p><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count is : 1</span><br></pre></td></tr></table></figure><p>写着写着发现和C语言如此相似（基础部分）。(<em>^▽^</em>)</p><h1 id="cpp-Const-类型"><a href="#cpp-Const-类型" class="headerlink" title="cpp Const 类型"></a>cpp Const 类型</h1><p><strong>Const</strong> 被当做一个很基础但是很有用的关键字。</p><p><strong>先说下为什么用const：</strong></p><ol><li>Clear code (know a function won’t try and modify something just by reading the signature)</li><li>Immutable objects are easier to reason about.</li><li>The complier <strong>may</strong> be able to mkae certain optimisations</li><li>Immutable objects are <strong>much</strong> easier to use in multithreading situations.</li></ol><p>eg:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> y = <span class="number">173</span></span><br></pre></td></tr></table></figure><p><strong>const修饰普通类型的变量：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = a;</span><br><span class="line"></span><br><span class="line">a = <span class="number">8</span>; <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p>a可以被定义为一个常量，也可以把a的内容赋值给b。<strong>但是不能对b再次赋值</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">auto main() -&gt; int &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> *p = (<span class="keyword">int</span>*)&amp;a;</span><br><span class="line">    *p = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"A: "</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Output: </span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">A: 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>我们可以通过得到a的地址，然后对地址直接重新赋值的方法来改变a的值。<strong>（指针就是一个变量的地址，&amp;取地址，*取内容）</strong>。</p><p><strong>const修饰指针变量：</strong></p><ol><li>const修饰指针指向的内容，则内容为不变量</li><li>const修饰指针，则指针为不变量</li><li>const修饰指针和指针指向的内容，则指针和指针指向的内容都是不可变</li></ol><p>For 1：</p><p>内容不可以变，但是可以通过地址重新改变数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b = a</span><br></pre></td></tr></table></figure><p>当<code>int b = a</code>的时候b只是得到了a的内容，所以可以修改。</p><p>For 2：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> * <span class="keyword">const</span> p = &amp;a;</span><br><span class="line">*p = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// error code</span></span><br><span class="line"><span class="keyword">int</span> c = <span class="number">10</span>;</span><br><span class="line">p = &amp;c;</span><br></pre></td></tr></table></figure><p><em>在const左边，代表地址不可变，所以在第一次把a的地址赋值给p的时候没什么问题，但是当把c的地址赋值给p是就不行，*</em>因为地址不可以变**。</p><p>For 3：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> p = &amp;a;</span><br></pre></td></tr></table></figure><p>啥都变不了。</p><p><strong>ps: 左定值，右定向，const修饰不变量</strong></p><h2 id="References-and-const"><a href="#References-and-const" class="headerlink" title="References and const"></a>References and const</h2><p>在这里reference可以表示为引用的意思。在reference里面<code>&amp;</code>不带比较地址。<strong>一个reference天生就是const。也就是说，一旦将一个reference绑定到一个对象，就无法再将它重新绑定到另一个不同的对象。在声 明一个reference之后没有写法可以将它重新绑定到另外一个对象</strong></p><ul><li><strong>A reference to const means you can’t modify the object using the reference</strong></li><li><strong>The object is still able to be modified, just not through this reference</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span>&amp; ref = i;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ref &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">i++; <span class="comment">// This is fine</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ref &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">ref++; <span class="comment">// This is not</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span>&amp; jref = j; <span class="comment">// this is allowed</span></span><br><span class="line"><span class="keyword">auto</span>&amp; ref = j; <span class="comment">// not allowed</span></span><br></pre></td></tr></table></figure><h1 id="cpp-functions"><a href="#cpp-functions" class="headerlink" title="cpp functions"></a>cpp functions</h1><p>c++function有两种放回形式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">auto square(int const x) -&gt; int &#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">square</span><span class="params">(<span class="keyword">int</span> <span class="keyword">const</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Overload：</strong></p><p><strong>指函数名相同，但是它的参数表列个数或顺序，类型不同</strong>。<em>但是不能靠返回类型来判断。</em><br>（1）相同的范围（在同一个作用域中） ；<br>（2）函数名字相同；<br>（3）参数不同；<br>（4）virtual 关键字可有可无。<br>（5）返回值可以不同；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">auto square(int const x) -&gt; int &#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">auto square(double const x) -&gt; double &#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>突然发现了一个很有意思的东西：<code>const int * = int const *</code></strong></p><h2 id="Overload-Resolution"><a href="#Overload-Resolution" class="headerlink" title="Overload Resolution"></a>Overload Resolution</h2><p>这个过程简称方程匹配（function matching）</p><ol><li>Find function name</li><li>Select viable ones: Same number arguments + each argument convertible</li><li>Best match：Type much better in at least one argument</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auto g() -&gt; void;</span><br><span class="line">auto f(int) -&gt; void;</span><br><span class="line">auto f(int, int) -&gt; void;</span><br><span class="line">auto f(double, double = 3.14) -&gt; void;</span><br><span class="line">f(<span class="number">5.6</span>); <span class="comment">// calls f(double, double)</span></span><br></pre></td></tr></table></figure><p>尽量少的overload，或者不用，因为不容易分辨。</p><h2 id="Functions-pass-by-reference"><a href="#Functions-pass-by-reference" class="headerlink" title="Functions: pass by reference"></a>Functions: pass by reference</h2><ul><li>The formal parameter merely acts as an alias for the actual parameter</li><li>Anytime the method/function uses the formal parameter (for reading or writing), it is actually using the actual parameter</li><li>Pass by reference is useful when:<ul><li><strong>The argument has no copy operation</strong></li><li><strong>The argument is large</strong></li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">auto swap(int&amp; x, int&amp; y) -&gt; void &#123;</span><br><span class="line">  <span class="keyword">auto</span> <span class="keyword">const</span> tmp = x;</span><br><span class="line">  x = y;</span><br><span class="line">  y = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">auto main() -&gt; int &#123;</span><br><span class="line">  <span class="keyword">auto</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">auto</span> j = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">' '</span> &lt;&lt; j &lt;&lt; <span class="string">'\n'</span>; <span class="comment">// 1 2</span></span><br><span class="line">  swap(i, j);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">' '</span> &lt;&lt; j &lt;&lt; <span class="string">'\n'</span>; <span class="comment">// 2 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>reference可以让function的执行速度变快。</p><h1 id="structures"><a href="#structures" class="headerlink" title="structures"></a>structures</h1><p>和c语言的structure差不多的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">scientist</span> &#123;</span></span><br><span class="line">    <span class="built_in">string</span> family_name;</span><br><span class="line">    <span class="built_in">string</span> given_name;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; files;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">auto main() -&gt; int &#123;</span><br><span class="line">    scientist s = scientist &#123;</span><br><span class="line">        .family_name = <span class="string">"Li"</span>,</span><br><span class="line">        .given_name = <span class="string">"Shunyang"</span>,</span><br><span class="line">        .files = &#123;</span><br><span class="line">                <span class="string">"c++"</span>,</span><br><span class="line">                <span class="string">"python"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s.family_name  &lt;&lt; <span class="string">" "</span> &lt;&lt; s.given_name &lt;&lt; s.files[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Declarations-vs-Definitions"><a href="#Declarations-vs-Definitions" class="headerlink" title="Declarations vs Definitions"></a>Declarations vs Definitions</h1><ol><li>A declaration makes known the type and the name of a variable</li><li>A definition is a declaration, but also does extra things<ol><li>A variable definition allocates storage for, and constructs a variable</li><li>A class definition allows you to create variables of the class’ type</li><li>You can call functions with only a declaration, but must provide a definition later</li></ol></li><li>Everything must have precisely one definition</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">declared_fn</span><span class="params">(<span class="keyword">int</span> arg)</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">declared_type</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This class is defined, but not all the methods are.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">defined_type</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">declared_member_fn</span><span class="params">(<span class="keyword">double</span>)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">defined_member_fn</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123; <span class="keyword">return</span> arg; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// These are all defined.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">defined_fn</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">auto</span> vd = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;&#123;&#125;;</span><br></pre></td></tr></table></figure><p><strong>In c++, the global will not 0 without initialization，in function it will be null without initialization both are defination</strong></p><h1 id="Program-error"><a href="#Program-error" class="headerlink" title="Program error"></a>Program error</h1><ol><li>Compile-time</li><li>Link-time</li><li>Run-time</li><li>Logic</li></ol><p>这些错误循序渐进。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto main() -&gt; int &#123;</span><br><span class="line">  a = <span class="number">5</span>; <span class="comment">// Compile-time error: type not specified</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为没有返回任何数据，在编译的过程中就可以发现的错误。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"catch2/catch.hpp"</span></span></span><br><span class="line"></span><br><span class="line">auto is_cs6771() -&gt; bool;</span><br><span class="line"></span><br><span class="line">TEST_CASE(<span class="string">"This is all the code"</span>)</span><br><span class="line">  CHECK(is_cs6771()); <span class="comment">// Link-time error: is_cs6771 not defined.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到function相对应的文件和声明。（can not find library）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// attempting to open a file...</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">auto</span> file = <span class="built_in">std</span>::ifstream(<span class="string">"hello.txt"</span>); <span class="keyword">not</span> file) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"Error: file not found.\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行时候出错，不能找到相对应的资源。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> empty = <span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">""</span>);</span><br><span class="line">CHECK(empty[<span class="number">0</span>] == <span class="string">'C'</span>); <span class="comment">// Logic error: bad character access</span></span><br></pre></td></tr></table></figure><p>逻辑上的错误，属于操作失误，比如说out index range，这些都是操作的失误。</p><h1 id="Test-Case"><a href="#Test-Case" class="headerlink" title="Test Case"></a>Test Case</h1><p>在cpp test case里面，CHECK和REQUIRED的区别：REQUIRE会导致test立马fail，但是CHECK不会，只会导致一个fail，test case还能继续。</p><h1 id="Week-2-lecture-notes"><a href="#Week-2-lecture-notes" class="headerlink" title="Week 2 lecture notes"></a>Week 2 lecture notes</h1><p>Why do we want to use libraries:</p><ul><li>well documented</li><li>well tested</li><li>well reviewed</li><li>many feedback</li></ul><p>What we use:</p><ul><li>c++ stl</li><li>abseil</li><li>catch2 (testing)</li><li>{fmt} string format</li><li>gsl-lite</li><li>range-v3 (iterators)</li></ul><p><strong>Algorithms and Conatiners and Ranges combined to Iterators.</strong></p><p><code>std::vecotr</code> is always the defalut container</p><p>Sequence containers:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::vecotr</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">array</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">deque</span></span><br><span class="line"><span class="built_in">std</span>::forward_list</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">list</span></span><br></pre></td></tr></table></figure><p>Unordered associate container:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a collection of unique keys</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">unordered_map</span></span><br><span class="line">absl::flat_hash_map</span><br><span class="line"></span><br><span class="line"><span class="comment">// a unique key with a values</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">unordered_set</span></span><br><span class="line">absl::flat_hash_set</span><br></pre></td></tr></table></figure><h2 id="String-in-cpp"><a href="#String-in-cpp" class="headerlink" title="String in cpp"></a>String in cpp</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> gretting = <span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">"hello world"</span>);</span><br></pre></td></tr></table></figure><p>可以在一个区域内使用<code>using namespaces</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>::string_literals;</span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> str = <span class="string">"hello world"</span>s;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼接字符串</span></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> str = absl::StrCat(<span class="string">"hello"</span>, <span class="string">"word"</span>);</span><br></pre></td></tr></table></figure><p>formatting string</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fmt/format.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有点类似python的写法，参考python的写法</span></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> str = fmt::format(<span class="string">"Hello: &#123;&#125;"</span>, <span class="string">"world"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// name parameters, 这个参数可以多次使用</span></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> str = fmt::format(<span class="string">"&#123;key&#125;: &#123;value&#125;, &#123;value&#125;"</span>, fmt::arg(<span class="string">"key"</span>, <span class="number">1</span>),</span><br><span class="line">                            fmt::arg(<span class="string">"value"</span>, <span class="number">12</span>));</span><br></pre></td></tr></table></figure><h2 id="vector-in-cpp"><a href="#vector-in-cpp" class="headerlink" title="vector in cpp"></a>vector in cpp</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> vec = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">// 删除末尾的元素</span></span><br><span class="line">vec.pop_back();</span><br><span class="line">REQUIRE(ranges::distance(vec) == <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// erase 的作用也是删除元素，不过可以删除任意位置的元素</span></span><br><span class="line"><span class="comment">// index 从0开始的</span></span><br><span class="line"><span class="built_in">std</span>::erase(vec, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空list</span></span><br><span class="line">vec.clear();)</span><br></pre></td></tr></table></figure><p>初始化数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化数组长度为5，且每一个元素为0</span></span><br><span class="line"><span class="keyword">auto</span> vec = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">5</span>);</span><br><span class="line">REQUIRE(ranges::distance(vec) == <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">CHECK(vec[<span class="number">0</span>] == <span class="number">0</span>);</span><br><span class="line">CHECK(vec[<span class="number">1</span>] == <span class="number">0</span>);</span><br><span class="line">CHECK(vec[<span class="number">2</span>] == <span class="number">0</span>);</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以指定初始化内容</span></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> str = <span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">"hello world"</span>);</span><br><span class="line"><span class="keyword">auto</span> all = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="number">2</span>, str);</span><br><span class="line"></span><br><span class="line">CHECK(all[<span class="number">0</span>] == str);</span><br><span class="line">CHECK(all[<span class="number">1</span>] == str);</span><br></pre></td></tr></table></figure><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p>可以直接根据reference来写。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#inlcude <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// stack 是先进后出的数据结构</span></span><br><span class="line"><span class="keyword">auto</span> <span class="built_in">stack</span> = <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;card&gt;();</span><br><span class="line">REQUIRE(<span class="built_in">stack</span>.empty());</span><br></pre></td></tr></table></figure><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><p>可以直接根据reference来写。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#inlcude <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 先进先出</span></span><br><span class="line"><span class="keyword">auto</span> <span class="built_in">queue</span> = <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&#123;&#125;;</span><br><span class="line"><span class="built_in">queue</span>.push(<span class="string">"x"</span>);</span><br><span class="line"><span class="built_in">queue</span>.pop();</span><br></pre></td></tr></table></figure><p>记得插图</p><h2 id="some-algorithm-in-iterators"><a href="#some-algorithm-in-iterators" class="headerlink" title="some algorithm in iterators"></a>some algorithm in iterators</h2><p>有毒，直接卡死了。。。但是别的因该是可以的，在使用<code>ranges::swap()</code>的时候速度很快。<br>但是感觉和<code>std::swap</code>没什么区别。。。稍微快了那么一点。。。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#inlcude <span class="meta-string">&lt;range/v3/algorithm.hpp&gt;</span></span></span><br><span class="line"><span class="comment">// count numbers</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> num = ranges::count(<span class="built_in">vector</span>, <span class="string">"x"</span>);</span><br><span class="line"><span class="keyword">auto</span> node = ranges::find(<span class="built_in">vector</span>, <span class="string">"x"</span>);</span><br><span class="line"><span class="comment">// node != vector.end() 才算是找到了，和普通的find效果是一样的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ranges::adjacent_find 的做用就是找到两个相邻的一样的数据，并且直接返回该数据</span></span><br><span class="line"><span class="comment">// a, b, c, a ranges::adjacent_find(xxx, a)会返回最后一个a</span></span><br><span class="line"><span class="keyword">auto</span> node = ranges::adjacent_find(<span class="built_in">vector</span>, <span class="string">"x"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ranges::next(xx), 下一个， iterator的形式</span></span><br><span class="line"><span class="keyword">auto</span> node = ranges::next(<span class="built_in">vector</span>);</span><br></pre></td></tr></table></figure><h2 id="Lambda-expressions"><a href="#Lambda-expressions" class="headerlink" title="Lambda expressions"></a>Lambda expressions</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;range/v3/algorithm.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> vec = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>&#125;;</span><br><span class="line"><span class="comment">// 使用lambda表达式来计算a的数量</span></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> numbers = ranges::count_if(vec, [](<span class="keyword">auto</span> <span class="keyword">const</span>&amp; x) &#123;</span><br><span class="line">    <span class="keyword">return</span> x == <span class="string">'a'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以指定返回格式，一般都是bool</span></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> numbers = ranges::count_if(vec, [](<span class="keyword">auto</span> <span class="keyword">const</span>&amp; x)-&gt;<span class="keyword">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x == <span class="string">'a'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">CHECK(numbers == <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>Surprise binary search</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;range/v3/algorithm.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">auto</span> nums = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&#123;<span class="string">'1'</span>,<span class="string">'3'</span>,<span class="string">'2'</span>, <span class="string">'1'</span>, <span class="string">'1'</span>&#125;;</span><br><span class="line"><span class="comment">// 排序，这两种方法都可以排序，但是ranges快一点。。</span></span><br><span class="line">ranges::sort(nums);</span><br><span class="line"><span class="built_in">std</span>::sort(nums);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"range/v3/algorithm/is_sorted.hpp"</span></span></span><br><span class="line"><span class="comment">// 检查是否排序</span></span><br><span class="line">ranges::is_sorted(nums);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取某一个区间, 这个区间内都是这个element</span></span><br><span class="line"><span class="keyword">auto</span> [first, last] = ranges::equal_range(nums, <span class="string">'1'</span>);</span><br><span class="line"><span class="comment">// first = 3, last = 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用[temp] 需要声明temp</span></span><br><span class="line"><span class="keyword">auto</span> temp = <span class="string">"1"</span>;</span><br><span class="line">ranges::all_of(first, last, [temp](<span class="keyword">auto</span> <span class="keyword">const</span>&amp; x) &#123;<span class="keyword">return</span> x == temp&#125;);</span><br></pre></td></tr></table></figure><h1 id="Week-2-part-2"><a href="#Week-2-part-2" class="headerlink" title="Week 2 part 2"></a>Week 2 part 2</h1><p>the difference between <code>ranges::distance</code> and <code>vector::size</code><br>下面三种方法都是为了使用auto，来遍历数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// E.g. 1</span></span><br><span class="line"><span class="keyword">auto</span> v = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(other.size());</span><br><span class="line"></span><br><span class="line"><span class="comment">// E.g. 2 (yuck, but best option till you get more experience)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0</span>; i &lt; ranges::distance(v); ++i) &#123;</span><br><span class="line">    <span class="keyword">using</span> size_type = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::size_type; <span class="comment">// C++ typedef</span></span><br><span class="line">    v[gsl_lite::narrow_cast&lt;size_type&gt;(i)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// E.g. 3 i should not leave the scope of the loop</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::size_type&#123;<span class="number">0</span>&#125;; i &lt; v.size(); ++i) &#123;</span><br><span class="line">    v[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类型转换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> doubles = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;&#123;<span class="number">0.0</span>,<span class="number">1.0</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> ints = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;doubles.begin(), doubles.end()&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所以这时候ints就是</span></span><br><span class="line"><span class="comment">// 2 个0</span></span><br><span class="line">CHECK(ints = <span class="built_in">std</span>::<span class="built_in">vector</span>(<span class="number">2</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>genreate a sequence of integers on deman<br>生成一个序列</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#inlcude <span class="meta-string">&lt;range/v3/numberic.hpp&gt;</span></span></span><br><span class="line"><span class="comment">// 初始化大小为10的vector</span></span><br><span class="line"><span class="keyword">auto</span> vec = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// iota的作用就是生成一个从0到vec长度的数字存到vec里面</span></span><br><span class="line"><span class="comment">// 0..ranges::distance(vec)</span></span><br><span class="line">ranges::iota(vec, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><strong>使用piping</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;range/v3/range.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;range/v3/view.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 老师ppt上写错了</span></span><br><span class="line"><span class="comment">// 生成的结果好像是array，但是没办法检查type，我也不知道了</span></span><br><span class="line"><span class="comment">// 生成结果是iota_view 不是array </span></span><br><span class="line"><span class="comment">// 输出结果 [0,1,2,3,4,5,6,7,8,9]</span></span><br><span class="line"><span class="keyword">auto</span> numbers = ranges::views::iota(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过使用pipling的方法转换</span></span><br><span class="line"><span class="keyword">auto</span> vec = numbers | ranges::to&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&gt;;</span><br></pre></td></tr></table></figure><p><strong>Filters(keep if)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;range/v3/range.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;range/v3/view.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> view = ranges::views;</span><br><span class="line"><span class="keyword">auto</span> is_blue = [] (card <span class="keyword">const</span> c) &#123;<span class="keyword">return</span> c.lolor == color::blue&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> all_blue = hand | views::filter(is_blue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 都可以check是不是有这个元素</span></span><br><span class="line">ranges::find();</span><br><span class="line"><span class="comment">// 也可以使用lambda表达式</span></span><br><span class="line">ranges::any_of();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除某个元素，都可以使用lambda的表达式</span></span><br><span class="line"><span class="keyword">auto</span> no_blue = hand | views::remove_if(is_blue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在使用find的时候差别</span></span><br><span class="line"><span class="built_in">std</span>::find(vec.begin(), vec.end(), x);</span><br><span class="line">ranges::find(vec, x);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// reversing, 反转链表</span></span><br><span class="line"><span class="keyword">auto</span> res = hand | views::reverse;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还有一个find_if, 但是返回的是指针, 需要*得到内容</span></span><br><span class="line"><span class="keyword">auto</span> res = ranges::find_if (hand, is_blue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种用法</span></span><br><span class="line">ranges::to&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&gt;(views::reverse(hand));</span><br></pre></td></tr></table></figure><p>transform<br>通过一种形式来转换吧，可以理解为替换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> res = hand | views::transform([]()&#123;&#125;);</span><br></pre></td></tr></table></figure><p>split</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">views::split(<span class="string">' '</span>) | views::transform([]()&#123;&#125;) | ranges::to&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;;</span><br></pre></td></tr></table></figure><p>join</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> words = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&#123;<span class="string">"hello"</span>, <span class="string">"word"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> res = words | views::join(<span class="string">' '</span>) | ranges::to&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;;</span><br></pre></td></tr></table></figure><p>concatenating ranges (结合ranges)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> str1 = <span class="string">"hello "</span>;</span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> str2 = <span class="string">"word"</span>;</span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> str3 = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&#123;<span class="string">" ni"</span>, <span class="string">" hao"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并字符串</span></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> str = views::concat(str1, str2, str3 | views::join(<span class="string">' '</span>)) | ranges:to&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;;</span><br></pre></td></tr></table></figure><p>use only the first n elements</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> vec = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">// 取前两个</span></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> n = vec | views::take(<span class="number">2</span>) | ranges::to&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取后几个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> n = vec | views::take_last(<span class="number">2</span>) | ranges::to&lt;<span class="built_in">vector</span>&gt;;</span><br></pre></td></tr></table></figure><h1 id="week3"><a href="#week3" class="headerlink" title="week3"></a>week3</h1><h2 id="Explicit-type-conversions"><a href="#Explicit-type-conversions" class="headerlink" title="Explicit type conversions"></a>Explicit type conversions</h2><ol><li>A constructor for a class has only 1 parameter, the compiler will create an<br>implicit type conversion from the parameter to the class</li><li>This may be the behaviour you want(but usually not)<ul><li>You have to opt-out of this implicit type conversion with the explicit keyword</li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当加了explicit关键字以后就不能使用 auto a3 = 20这种写法了</span></span><br><span class="line"><span class="comment">// 因为explicit是为了避免这种隐式调用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">age</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> age_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    age(<span class="keyword">int</span> age)</span><br><span class="line">    : age_&#123;age&#125; &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">auto main() -&gt; int &#123;</span><br><span class="line">    age a3 = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">auto</span> a2 = age&#123;<span class="number">20</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常情况下是不建议使用的，因为为了保持代码整洁<code>explicit</code>通常不会添加到construcotr里面的。<br>但是貌似在vlab里面还是要加，保持代码稳定</p><p><strong>explicit是为了避免隐式调用。隐式调用通常发生在只有一个参数的时候。。</strong></p><p>比如在不使用explicit的时候这样的写法是可以通过编译的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Point(<span class="keyword">int</span> x = <span class="number">1</span>, <span class="keyword">int</span> y = <span class="number">2</span>) : x_&#123;x&#125;, y_&#123;y&#125; &#123;&#125;;</span><br><span class="line">    auto get_x() const -&gt; int &#123;return x_;&#125;;</span><br><span class="line">    auto get_y() const -&gt; int &#123;return y_;&#125;;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> x_;</span><br><span class="line">    <span class="keyword">int</span> y_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">displayPoint</span><span class="params">(<span class="keyword">const</span> Point&amp; p)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; p.get_x() &lt;&lt; <span class="string">","</span></span><br><span class="line">         &lt;&lt; p.get_y() &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">auto main() -&gt; int &#123;</span><br><span class="line">    Point p = <span class="number">2</span>;</span><br><span class="line">    displayPoint(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (2,2)</span></span><br></pre></td></tr></table></figure><p>虽然<code>displayPoint</code>要求的是一个Point类型，但是我们传过去一个2也能成功编译的。就是因为这隐式调用. 另外说一句, 在对象刚刚定义时, 即使你使用的是赋值操作符<code>=</code>, 也是会调用构造函数, 而不是重载的<code>operator=</code>运算符.</p><p>但是当我们声明了<code>explicit</code>的时候就不可以隐式调用了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by lsy on 2020/6/25.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    explicit Point(int x = 1, int y = 2) : x_&#123;x&#125;, y_&#123;y&#125; &#123;&#125;;</span><br><span class="line">    auto get_x() const -&gt; int &#123;return x_;&#125;;</span><br><span class="line">    auto get_y() const -&gt; int &#123;return y_;&#125;;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> x_;</span><br><span class="line">    <span class="keyword">int</span> y_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">displayPoint</span><span class="params">(<span class="keyword">const</span> Point&amp; p)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; p.get_x() &lt;&lt; <span class="string">","</span></span><br><span class="line">         &lt;&lt; p.get_y() &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// error </span></span><br><span class="line">auto main() -&gt; int &#123;</span><br><span class="line">    Point p = <span class="number">2</span>;</span><br><span class="line">    displayPoint(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候main函数里面这些都会报错的。</p><h2 id="Const-objects"><a href="#Const-objects" class="headerlink" title="Const objects"></a>Const objects</h2><p>Member functions are by default only be possible on non-const objects</p><ul><li>You <strong>can declare a const member function</strong> which is valid on const objects</li><li>A const member function may only modify mutable members<ul><li>A mutable member should mean that the state of the member can change without the state of the object changing</li><li>Good uses of mutable members are rare</li><li>Mutable is not something you should set lightly</li><li>One example where it might be useful is a cache</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">mutable</span> <span class="built_in">std</span>::<span class="built_in">string</span> name_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">person</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> <span class="keyword">const</span>&amp; name)</span></span></span><br><span class="line">    : name_&#123;name&#125; &#123;&#125;</span><br><span class="line"></span><br><span class="line">    auto set_name(std::string const&amp; name) const -&gt; void &#123;</span><br><span class="line">        name_ = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    auto get_name() const -&gt; std::string const&amp; &#123;</span><br><span class="line">        <span class="keyword">return</span> name_;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">auto main() -&gt; int &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> <span class="keyword">const</span> p1 = person&#123;<span class="string">"charles"</span>&#125;;</span><br><span class="line">    p1.set_name(<span class="string">"charles li"</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; p1.get_name() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// const object</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一个const的object只能调用const的function</span></span><br><span class="line"><span class="comment">     * 需要先定义function是const的才呢给你调用</span></span><br><span class="line"><span class="comment">     * 一般只能调用没什么作用的function，不能进行赋值</span></span><br><span class="line"><span class="comment">     * 可以随意定义function是const但是不做任何事情</span></span><br><span class="line"><span class="comment">     * const object 不能修改内部变量的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 在 const object里面可以使用mutable来修改相对行的变量， 但是调用的function也必须是const的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="this-function"><a href="#this-function" class="headerlink" title="this function"></a>this function</h2><ul><li>A member function has an extra implicit parameter, named this<ul><li>This is a pointer to the object on behalf of which the function is called</li><li>A member function does not explicitly define it, but may explicitly use it</li><li>The compiler treats an unqualified reference to a class member as being made through the this pointer.</li></ul></li><li>For the next few slides, we’ll be taking a look at the BookSale example in the course repo</li></ul><p>在使用class的时候也可以只用<code>this</code>的方法<br><strong>还有就是在定义的时候可以考虑使用这个， 因为如果变量不使用下划线<code>age_</code>，这样不容易分辨出到底使用的是什么变量可能是gobal或者别的<br>所以一般会采用this。</strong><br>其实就是识情况而定</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">age</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> age_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    age(<span class="keyword">int</span> age)</span><br><span class="line">    : age_&#123;age&#125; &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    auto get_age() -&gt; int &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;age_;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    auto set_age(const int age) -&gt; void &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age_ = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="static-members"><a href="#static-members" class="headerlink" title="static members"></a>static members</h2><ul><li>Static functions and members belong to the class (i.e. every object), as opposed to a particular object.</li><li>These are essentially globals defined inside the scope of the class<ul><li>Use static members when something is associated with a class, but not a particular instance</li><li><strong>Static data has global lifetime (program start to program end)</strong></li></ul></li></ul><p><code>static</code>可以被全局调用，并且从开始到结束都能存活。<br><code>static</code>的function可以被直接调用，可以不通过object来调用，object没办法调用static function。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> name_;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    user(<span class="built_in">std</span>::<span class="built_in">string</span> <span class="keyword">const</span>&amp; name)</span><br><span class="line">    : name_&#123;name&#125; &#123;&#125;</span><br><span class="line"></span><br><span class="line">    static auto valid_name(std::string const&amp; name) -&gt; bool &#123;</span><br><span class="line">        <span class="keyword">return</span> name.length() &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">auto main() -&gt; int &#123;</span><br><span class="line">    <span class="keyword">auto</span> name = <span class="built_in">std</span>::<span class="built_in">string</span>&#123;<span class="string">"Charles li"</span>&#125;;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; user::valid_name(name) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>static</code> 也可以用正变量里面，但是必须在public里面，不然没办法调用。<br><strong>但是在使用变量的时候必须声明是const，不然会报错，但是可以在前面加inline。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> <span class="keyword">const</span> MAX=<span class="number">123</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// inline表示只能在一个文件里面，只定义一次。。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX=<span class="number">123</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h2><p>当使用<code>default</code>的时候表示没有参数，只是为了让编译器安静，没什么用。。。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">intvec</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    intvec() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">intvec</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::size_type length)</span></span></span><br><span class="line">    : vec_(length, 0) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec_;</span><br><span class="line">&#125;;</span><br><span class="line">auto main() -&gt; int &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> a = intvec&#123;&#125;;</span><br><span class="line">    <span class="keyword">auto</span> b = intvec&#123;<span class="number">2</span>&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="week3-part2"><a href="#week3-part2" class="headerlink" title="week3 part2"></a>week3 part2</h1><p><strong><code>nodiscard</code>指的是当返回值被抛弃时，编译器给出警告</strong><br>*<em>friend 友元，别人是你的朋友，他可以访问我的东西。（但不是我可以访问他的东西: *</em></p><ul><li><p>类的友元函数是定义在类外部，但有权访问类的所有私有（private）成员和保护（protected）成员。尽管友元函数的原型有在类的定义中出现过，但是友元函数并不是成员函数。</p></li><li><p>友元可以是一个函数，该函数被称为友元函数；友元也可以是一个类，该类被称为友元类，在这种情况下，整个类及其所有成员都是友元。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">INTEGER</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">const</span> INTEGER&amp; obj)</span></span>;<span class="comment">//声明友元函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请注意：print() 不是任何类的成员函数，函数名前不加类声明符</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">const</span> INTEGER&amp; obj）</span></span></span><br><span class="line"><span class="function"><span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="comment">//函数体</span></span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">void</span> main()</span></span></span><br><span class="line"><span class="function"><span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    INTEGER obj;</span></span></span><br><span class="line"><span class="function"><span class="params">    Print(obj);<span class="comment">//直接调用</span></span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span></span></span><br></pre></td></tr></table></figure><p>}<br>特点:<br>友元关系不能被继承；<br>友元关系是单向的，不具有交换性。若类 B 是类 A 的友元，类 A 不一定是类 B 的友元，要看在类中是否有相应的声明；<br>友元关系不具有传递性。若类 B 是类 A 的友元，类 C 是 B 的友元，类 C 不一定是类 A 的友元，同样要看类中是否有相应的申明；<br><strong>友元函数并不是类的成员函数，因此在类外定义的时候不能加上 class::function name；</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by lsy on 2020/6/21.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">point</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> x_;</span><br><span class="line">    <span class="keyword">int</span> y_;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    point(<span class="keyword">int</span> <span class="keyword">const</span>&amp; x, <span class="keyword">int</span> <span class="keyword">const</span>&amp; y) : x_&#123;x&#125;, y_&#123;y&#125; &#123;&#125;</span><br><span class="line"></span><br><span class="line">    [[nodiscard]] auto x() const -&gt; int &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;x_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [[nodiscard]] auto y() const -&gt; int &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;y_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对operator进行重定义，但是只作用在这个class里面</span></span><br><span class="line">    <span class="keyword">friend</span> point <span class="keyword">operator</span>+(point <span class="keyword">const</span>&amp; p1, point <span class="keyword">const</span>&amp; p2);</span><br><span class="line">    <span class="keyword">friend</span> <span class="built_in">std</span>::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="built_in">std</span>::ostream&amp; os, point <span class="keyword">const</span>&amp; p);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// friend function可以访问内部class变量，但是class不可以访问friend（关系不够好啊，哈哈哈）</span></span><br><span class="line"><span class="comment">// 而且friend可以访问class的private的变量</span></span><br><span class="line"><span class="comment">// 和普通的定义方法不一样，因为不是类的函数，所以不需要申明class::function name</span></span><br><span class="line">point <span class="keyword">operator</span>+(point <span class="keyword">const</span>&amp; p1, point <span class="keyword">const</span>&amp; p2) &#123;</span><br><span class="line">    <span class="keyword">return</span> point&#123;p1.x() + p2.x(), p1.y() + p2.y()&#125;;</span><br><span class="line">&#125;</span><br><span class="line">point <span class="keyword">operator</span>+(point <span class="keyword">const</span>&amp; p1, point <span class="keyword">const</span>&amp; p2) &#123;</span><br><span class="line">    <span class="keyword">return</span> point&#123;p1.x_ + p2.x_, p1.y_ + p2.y_&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当与overloadding一个function</span></span><br><span class="line"><span class="built_in">std</span>::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="built_in">std</span>::ostream&amp; os, point <span class="keyword">const</span>&amp; p) &#123;</span><br><span class="line">    os &lt;&lt; <span class="string">"("</span> &lt;&lt; p.x() &lt;&lt; <span class="string">", "</span> &lt;&lt; p.y() &lt;&lt; <span class="string">")\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">auto main() -&gt; int &#123;</span><br><span class="line">    <span class="keyword">auto</span> p1 = point&#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="keyword">auto</span> p2 = point(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; p1 + p2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一般把friend的function放在class的定义里面</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">point</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> x_;</span><br><span class="line">    <span class="keyword">int</span> y_;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    point(<span class="keyword">int</span> <span class="keyword">const</span>&amp; x, <span class="keyword">int</span> <span class="keyword">const</span>&amp; y) : x_&#123;x&#125;, y_&#123;y&#125; &#123;&#125;</span><br><span class="line"></span><br><span class="line">    [[nodiscard]] auto x() const -&gt; int &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;x_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [[nodiscard]] auto y() const -&gt; int &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;y_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对operator进行重定义，但是只作用在这个class里面</span></span><br><span class="line">    <span class="keyword">friend</span> point <span class="keyword">operator</span>+(point <span class="keyword">const</span>&amp; p1, point <span class="keyword">const</span>&amp; p2)&#123;</span><br><span class="line">        <span class="keyword">return</span> point&#123;p1.x() + p2.x(), p1.y() + p2.y()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="built_in">std</span>::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="built_in">std</span>::ostream&amp; os, point <span class="keyword">const</span>&amp; p) &#123;</span><br><span class="line">        os &lt;&lt; <span class="string">"("</span> &lt;&lt; p.x() &lt;&lt; <span class="string">", "</span> &lt;&lt; p.y() &lt;&lt; <span class="string">")\n"</span>;</span><br><span class="line">        <span class="keyword">return</span> os;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="operator-overloadding"><a href="#operator-overloadding" class="headerlink" title="operator overloadding"></a>operator overloadding</h2><p>就是对一些操作字符的重构。。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">operator</span>+(<span class="keyword">int</span> <span class="keyword">const</span>&amp; a, <span class="keyword">int</span> <span class="keyword">const</span>&amp; b) &#123;<span class="keyword">return</span> a + b;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;COMP6771 lecture note. COMP6771学习笔记&lt;/p&gt;
&lt;h1 id=&quot;cpp&quot;&gt;&lt;a href=&quot;#cpp&quot; class=&quot;headerlink&quot; title=&quot;cpp&quot;&gt;&lt;/a&gt;cpp&lt;/h1&gt;&lt;figure class=&quot;highlight c
      
    
    </summary>
    
    
    
      <category term="cpp" scheme="https://shunyangli.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>leetcode</title>
    <link href="https://shunyangli.github.io/post/374e/"/>
    <id>https://shunyangli.github.io/post/374e/</id>
    <published>2020-05-26T05:37:21.000Z</published>
    <updated>2022-05-03T05:31:45.434Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>刷题更让我们对一门语言有更加深入的理解，也可以增进对数据结构的理解，百里无一害。</p><h1 id="Two-Sum"><a href="#Two-Sum" class="headerlink" title="Two Sum"></a>Two Sum</h1><p><a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="noopener">Two Sum</a></p><p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.</p><p>You may assume that each input would have <strong>exactly</strong> one solution, and you may not use the <em>same</em> element twice.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [2, 7, 11, 15], target = 9,</span><br><span class="line"></span><br><span class="line">Because nums[0] + nums[1] = 2 + 7 = 9,</span><br><span class="line">return [0, 1].</span><br></pre></td></tr></table></figure><p>这也是我处女面试的第一个算法，当时想的方法是最暴力的方法，直接两个循环完事，但是时间复杂度是$O(n^{2})$，那是相当的高o(╥﹏╥)o。后来想了一下找到了一个简单的方法，当时由于太紧张写的不太好。当时的问题方法也稍微有点不同，<em>当时要求的是找到相对应的数字，不是index</em>。 先回顾一下当时的算法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] another(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">int</span> head = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> tail = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sort it</span></span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> value = nums[head] + nums[tail];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (value == target) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (value &gt; target) tail -= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> head += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (head == tail) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (head != tail) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;nums[head], nums[tail]&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当时想到的是两头同时遍历的方法，但是有个前提要求就是list必须是排过序的，当<code>nums</code>无限大时排序所消耗的时间可以忽略的，这个方法有点类似于<strong>binary search</strong>。我当时也想过用<code>HashMap</code>，好像处于什么原因被面试官否定了，whatever不重要的。不闲扯了，我们开始看这题的比较优化的算法，时间复杂度是<code>O(n)</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i ++) &#123;</span><br><span class="line">        <span class="keyword">int</span> minus = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(minus)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;map.get(minus), i&#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>算法思路：</p><ol><li>因为是用的<code>HashMap</code>所以在检测key是否contain的话使用的是hash的方法，所以复杂度是$O(1)$</li><li>第7-11行，是来判断这个HashMap是否包含这个num，如果这个num不包含在HashMap里面，然后把该num存到HashMap里面，num当做key，index当做value。这样就相当于把访问过的num和num的index存到HashMap里面，然后再遍历nums的时候得对每个数可以得到一个差值，然后判断这个差值是否存在HashMap里面，如果存在就代表得到这个结果了，如果不存在就把这个<code>nums[i]</code>存到HashMap。</li></ol><h1 id="Add-Two-Numbers"><a href="#Add-Two-Numbers" class="headerlink" title="Add Two Numbers"></a>Add Two Numbers</h1><p><a href="https://leetcode.com/problems/add-two-numbers/" target="_blank" rel="noopener">Add Two Numbers</a></p><p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong> and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">Output: 7 -&gt; 0 -&gt; 8</span><br><span class="line">Explanation: 342 + 465 = 807.</span><br></pre></td></tr></table></figure><p>算法思想：</p><p><strong>主要应该考虑一下边界情况：</strong></p><ol><li>当sum&gt;=10 </li><li>两个链表不一样长</li><li>在最后一个数字相加的时候sum&gt;=10</li></ol><p>第6行的while语句就是为了两条链表不一样长度。第7-8行判断如果该链表不为null就取该val，不然的话就为0（为了不影响下面的计算）。<code>int overflow = 0</code>是为了解决和超过10的情况，第9行把溢出的数字和v1，v2相加，然后把该结果取余就是结果。然后把<code>overflow = sum/10</code> 得到进位数。每次生成新的数字之后生成一个新的node没然后链接起来。<strong>主要是考虑不同的边界情况。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> overflow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l1 == <span class="keyword">null</span> &amp;&amp; l2 == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    ListNode new_node = <span class="keyword">new</span> ListNode();</span><br><span class="line">    ListNode head = new_node;</span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="keyword">null</span> || l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> v1 = (l1 != <span class="keyword">null</span>) ? l1.val : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> v2 = (l2 != <span class="keyword">null</span>) ? l2.val : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = v1+v2 + overflow;</span><br><span class="line">        overflow = sum / <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (l1 != <span class="keyword">null</span>) l1 = l1.next;</span><br><span class="line">        <span class="keyword">if</span> (l2 != <span class="keyword">null</span>) l2 = l2.next;</span><br><span class="line">        new_node.val = sum % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (l1 != <span class="keyword">null</span> || l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            new_node.next = <span class="keyword">new</span> ListNode();</span><br><span class="line">            new_node = new_node.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (overflow &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        new_node.next = <span class="keyword">new</span> ListNode(overflow % <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Longest-Substring-Without-Repeating-Characters"><a href="#Longest-Substring-Without-Repeating-Characters" class="headerlink" title="Longest Substring Without Repeating Characters"></a>Longest Substring Without Repeating Characters</h1><p>Given a string, find the length of the <strong>longest substring</strong> without repeating characters.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;abcabcbb&quot;</span><br><span class="line">Output: 3 </span><br><span class="line">Explanation: The answer is &quot;abc&quot;, with the length of 3.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;bbbbb&quot;</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: The answer is &quot;b&quot;, with the length of 1.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;pwwkew&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The answer is &quot;wke&quot;, with the length of 3. </span><br><span class="line">             Note that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.</span><br></pre></td></tr></table></figure><p>解题方法&amp;思路：</p><p>首先说下题意，我刚开始是没理解题意来得（暴露了自己的无知╮(╯▽╰)╭），题意就是匹配到最长的子字符串，并且不能重复。比如<code>pwwkew</code> 可以匹配到<code>wke</code> 最后一个w不可以被匹配到，因为该子字符串已经包含了一个w。</p><p>算法解析：<del>我们可以使用暴力解法：双循环（但是不推荐)</del>。我们可以使用HashMap来解决该问题，因为HashMap查询的时候只需要$O(1)$的时间复杂度。</p><ol><li>首先对该字符串进行遍历，如果该字符不在HashMap里面，则把该字符添加到HashMap，取max（HashMap length, ans）</li><li>如果该字符已经出现在HashMap里面，从HashMap里面去除一个字符，然后current index保持不变（会对该index进行再次遍历）</li><li>循环</li></ol><p>有点类似于：当一个字符不在该HashMap，push进去，如果已经在了，pop出来。然后在push之后计算最大的长度是多少。（进去一个如果已经存在就pop出来一个，<strong>因为重点是长度，所以不需要关心到底是哪些字符</strong>）。</p><p>Python伪代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LongSubString</span><span class="params">(s)</span>:</span></span><br><span class="line">4<span class="keyword">while</span> i &lt; len(s):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s[i] <span class="keyword">in</span> hashmap:</span><br><span class="line">      hashmap[s[i]] = <span class="number">0</span></span><br><span class="line">      ans = max(len(hashmap), ans)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">del</span> hashmap[s[d]]</span><br><span class="line">      d += <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>Java解决方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongestSubstring</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> remove = <span class="number">0</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length();) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(s.charAt(i))) &#123;</span><br><span class="line">                map.put(s.charAt(i), <span class="number">0</span>);</span><br><span class="line">                ans = Math.max(map.size(), ans);</span><br><span class="line">                i ++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.remove(s.charAt(remove));</span><br><span class="line">                remove += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LongestSubstring lon = <span class="keyword">new</span> LongestSubstring();</span><br><span class="line">        System.out.println(lon.lengthOfLongestSubstring(<span class="string">"abcabcbb"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Valid-Parentheses"><a href="#Valid-Parentheses" class="headerlink" title="Valid Parentheses"></a>Valid Parentheses</h1><p><a href="https://leetcode.com/problems/valid-parentheses/" target="_blank" rel="noopener">valid parentheses</a></p><p>Given a string containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p><p>An input string is valid if:</p><ol><li>Open brackets must be closed by the same type of brackets.</li><li>Open brackets must be closed in the correct order.</li></ol><p>Note that an empty string is also considered valid.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;()&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;(]&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p><strong>Example 4:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;([)]&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p><strong>Example 5:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;&#123;[]&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p>解题思路：</p><p>这个题我使用了stack（栈）的方法来解决这个问题。stack是一种先进后出的数据结构，所以更加适合这种问题。</p><ol><li>我们先来初始化一个HashMap来存相对应的括号</li><li>先判断该HashMap是否存在该左括号，如果存在就把左括号push到stack里面，</li><li>如果不存在先判断stack是否有数据（因为不存在的情况只有该字符是右括号的情况）</li><li>然后根据stack pop出来的结果在HashMap找到相对应的右括号，然后判断该字符和HashMap里面的右括号是否匹配。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;Character&gt;();</span><br><span class="line">    Map&lt;Character, Character&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">'['</span>, <span class="string">']'</span>);</span><br><span class="line">    map.put(<span class="string">'('</span>, <span class="string">')'</span>);</span><br><span class="line">    map.put(<span class="string">'&#123;'</span>, <span class="string">'&#125;'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(s.charAt(i))) &#123;</span><br><span class="line">            stack.push(s.charAt(i));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (stack.isEmpty()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (!map.get(stack.pop()).equals(s.charAt(i))) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Reverse-Integer"><a href="#Reverse-Integer" class="headerlink" title="Reverse Integer"></a>Reverse Integer</h1><p><a href="https://leetcode.com/problems/reverse-integer/" target="_blank" rel="noopener">reverse integer</a></p><p>Given a 32-bit signed integer, reverse digits of an integer.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 123</span><br><span class="line">Output: 321</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: -123</span><br><span class="line">Output: -321</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 120</span><br><span class="line">Output: 21</span><br></pre></td></tr></table></figure><p>本来以为这个题很简单，使用了最简单的算法，但是呢，出现了一个整型溢出的问题o(╥﹏╥)o。</p><p>先解析一下思路吧：</p><ol><li>首先我们可以用<code>x%10</code>来得到最后一个数字（因为数字不可能大于10）</li><li><code>x/10</code>是把最后一位数去掉</li><li><code>reverse*10</code>是为了整体向左移一位，比如(44, 44*10 = 440)多出一个空位，然后加上<code>x%10</code>的数字</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> reverse = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> last_digit = x % <span class="number">10</span>;</span><br><span class="line">        reverse = reverse * <span class="number">10</span> + last_digit;</span><br><span class="line">        x = x / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> reverse ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样如果数字区间在$[−2^{31}, 2^{31} − 1]$的话那么就会出现溢出的问题了，大家可以使用<code>1534236469</code>来尝试一下。</p><p>所以这时候我们就需要来做些判断了：</p><p>当<code>reverse &gt; intMAX/10</code>的时候我们基本上就可以确定他会溢出了，比如说<code>intMAX = 2147483647</code>，假设我们的<code>reverse = 214748365</code> 这时候<code>intMAX/10 =214748364</code>，<code>reverse &gt; intMAX</code>。这时候如果<code>reverse * 10</code>我们不管最后一个数字是什么了，<code>reverse</code>已经超出了int取值范围。</p><p>正确代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> reverse = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> last_digit = x % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (reverse &gt; Integer.MAX_VALUE / <span class="number">10</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (reverse &lt; Integer.MIN_VALUE / <span class="number">10</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        reverse = reverse * <span class="number">10</span> + last_digit;</span><br><span class="line">        x = x / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> reverse ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Palindrome-Number"><a href="#Palindrome-Number" class="headerlink" title="Palindrome Number"></a>Palindrome Number</h1><p><a href="https://leetcode.com/problems/palindrome-number/" target="_blank" rel="noopener">palindrome number</a></p><p>Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 121</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: -121</span><br><span class="line">Output: false</span><br><span class="line">Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: 10</span><br><span class="line">Output: false</span><br><span class="line">Explanation: Reads 01 from right to left. Therefore it is not a palindrome.</span><br></pre></td></tr></table></figure><p>回文数也就是说该数字等于翻转后的数字，<code>num = reverse(num)</code>。首先我们可以确定如果该数字是负数直接false就好了。我们可以使用上一题的思路，把数字翻转然后看是否相等。<strong>也可以把边界情况考虑进行。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> reverse = <span class="number">0</span>, temp = x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> last_digit = temp % <span class="number">10</span>;</span><br><span class="line">        reverse = reverse * <span class="number">10</span> + last_digit;</span><br><span class="line">        temp = temp / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> reverse == x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Longest-Common-Prefix"><a href="#Longest-Common-Prefix" class="headerlink" title="Longest Common Prefix"></a>Longest Common Prefix</h1><p>Write a function to find the longest common prefix string amongst an array of strings.</p><p>If there is no common prefix, return an empty string <code>&quot;&quot;</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">Output: &quot;fl&quot;</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">Output: &quot;&quot;</span><br><span class="line">Explanation: There is no common prefix among the input strings.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><p>All given inputs are in lowercase letters <code>a-z</code>.</p><p>集体思路：</p><p>采用了垂直对比法。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">s1 = &apos;flower&apos;</span><br><span class="line"></span><br><span class="line">s2 = &apos;flow&apos;</span><br><span class="line">s3 = &apos;flight&apos;</span><br><span class="line"></span><br><span class="line">我们第一层循环是表示当前string的index, i = 0;</span><br><span class="line">然后得到第一个string的第i个char</span><br><span class="line">第二个循环式为了和剩余的string比对，</span><br><span class="line">如果i的大小等于当前string的长度也就意味着遇到了结束点，比如当i=3的时候，i = s2.length，也就意味着有结束点了。</span><br><span class="line"></span><br><span class="line">c != strs[j].charAt(i) 这就语句是为了判断当前string的第i个char是否和第一个相等，如果不想当也就意味着可以返回i之前的数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">最后一行意味着strs[0]是最短的字符串，而且strs[0]是comm prefix</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs[<span class="number">0</span>].length(); i ++ ) &#123;</span><br><span class="line">        <span class="keyword">char</span> c = strs[<span class="number">0</span>].charAt(i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; strs.length; j ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == strs[j].length() || c != strs[j].charAt(i))</span><br><span class="line">                <span class="keyword">return</span> strs[<span class="number">0</span>].substring(<span class="number">0</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以试着得到最短的string，然后进行循环，思路差不多：</p><p>这种情况其实没什么必要，因为可能没循环结束就return了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get the shortest string length</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.length; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (strs[i].length() &lt; min) &#123;</span><br><span class="line">            min = strs[i].length();</span><br><span class="line">            index = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i  = <span class="number">0</span>; i &lt; min; i ++) &#123;</span><br><span class="line">        <span class="keyword">char</span> c = strs[<span class="number">0</span>].charAt(i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c != str.charAt(i)) <span class="keyword">return</span> str.substring(<span class="number">0</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> strs[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Merge-Two-Sorted-Lists"><a href="#Merge-Two-Sorted-Lists" class="headerlink" title="Merge Two Sorted Lists"></a>Merge Two Sorted Lists</h1><p><a href="https://leetcode.com/problems/merge-two-sorted-lists/" target="_blank" rel="noopener">Merge two sorted lists</a></p><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure><p>这个好像没什么说的，就直接对比大小然后merge在一起就行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    ListNode head = <span class="keyword">new</span> ListNode();</span><br><span class="line">    ListNode temp = head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        temp.next = <span class="keyword">new</span> ListNode();</span><br><span class="line">        temp = temp.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (l1.val &lt;= l2.val) &#123;</span><br><span class="line">            temp.val = l1.val;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            temp.val = l2.val;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l1 != <span class="keyword">null</span>) temp.next = l1;</span><br><span class="line">    <span class="keyword">if</span> (l2 != <span class="keyword">null</span>) temp.next = l2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Remove-Duplicates-from-Sorted-Array"><a href="#Remove-Duplicates-from-Sorted-Array" class="headerlink" title="Remove Duplicates from Sorted Array"></a>Remove Duplicates from Sorted Array</h1><p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener">Remove Duplicates from Sorted Array</a></p><p>Given a sorted array <em>nums</em>, remove the duplicates <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener"><strong>in-place</strong></a> such that each element appear only <em>once</em> and return the new length.</p><p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener">in-place</a></strong> with O(1) extra memory.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [1,1,2],</span><br><span class="line"></span><br><span class="line">Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.</span><br><span class="line"></span><br><span class="line">It doesn&apos;t matter what you leave beyond the returned length.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line"></span><br><span class="line">Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.</span><br><span class="line"></span><br><span class="line">It doesn&apos;t matter what values are set beyond the returned length.</span><br></pre></td></tr></table></figure><p>最获取长度的同时需要对array内部数据进行修改：</p><p>通过每次记录num，如果不相同的话，对数组的其实位置开始修改，然后curr是正在修改的index。（也会随着i增加而增加，如果所有数字都不一样）只不过是重新赋值了一次而已。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> dup = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> curr = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dup != nums[i]) &#123;</span><br><span class="line">            dup = nums[i];</span><br><span class="line">            nums[curr++] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> curr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Roman-to-Integer"><a href="#Roman-to-Integer" class="headerlink" title="Roman to Integer"></a>Roman to Integer</h1><p><a href="https://leetcode.com/problems/roman-to-integer/" target="_blank" rel="noopener">Roman to Integer</a></p><p>Roman numerals are represented by seven different symbols: <code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Symbol       Value</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure><p>For example, two is written as <code>II</code> in Roman numeral, just two one’s added together. Twelve is written as, <code>XII</code>, which is simply <code>X</code> + <code>II</code>. The number twenty seven is written as <code>XXVII</code>, which is <code>XX</code> + <code>V</code> + <code>II</code>.</p><p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p><ul><li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9. </li><li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90. </li><li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li></ul><p>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;III&quot;</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;IV&quot;</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;IX&quot;</span><br><span class="line">Output: 9</span><br></pre></td></tr></table></figure><p><strong>Example 4:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;LVIII&quot;</span><br><span class="line">Output: 58</span><br><span class="line">Explanation: L = 50, V= 5, III = 3.</span><br></pre></td></tr></table></figure><p><strong>Example 5:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;MCMXCIV&quot;</span><br><span class="line">Output: 1994</span><br><span class="line">Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.</span><br></pre></td></tr></table></figure><p>好像没什么好说的就是简单的字符串操作而已：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">'I'</span>, <span class="number">1</span>);</span><br><span class="line">    map.put(<span class="string">'V'</span>, <span class="number">5</span>);</span><br><span class="line">    map.put(<span class="string">'X'</span>, <span class="number">10</span>);</span><br><span class="line">    map.put(<span class="string">'L'</span>, <span class="number">50</span>);</span><br><span class="line">    map.put(<span class="string">'C'</span>, <span class="number">100</span>);</span><br><span class="line">    map.put(<span class="string">'D'</span>, <span class="number">500</span>);</span><br><span class="line">    map.put(<span class="string">'M'</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i ++) &#123;</span><br><span class="line">        <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'V'</span> || c == <span class="string">'X'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i-<span class="number">1</span>) == <span class="string">'I'</span>) res += map.get(c) - <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">else</span> res += map.get(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> res += map.get(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'L'</span> || c == <span class="string">'C'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i-<span class="number">1</span>) == <span class="string">'X'</span>) res += map.get(c) - <span class="number">20</span>;</span><br><span class="line">                <span class="keyword">else</span> res += map.get(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> res += map.get(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'D'</span> || c == <span class="string">'M'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i-<span class="number">1</span>) == <span class="string">'C'</span>) res += map.get(c) - <span class="number">200</span>;</span><br><span class="line">                <span class="keyword">else</span> res += map.get(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> res += map.get(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res += map.get(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Remove-Element"><a href="#Remove-Element" class="headerlink" title="Remove Element"></a>Remove Element</h1><p><a href="https://leetcode.com/problems/remove-element/" target="_blank" rel="noopener">Remove Element</a></p><p>Given an array <em>nums</em> and a value <em>val</em>, remove all instances of that value <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener"><strong>in-place</strong></a> and return the new length.</p><p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener">in-place</a></strong> with O(1) extra memory.</p><p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [3,2,2,3], val = 3,</span><br><span class="line"></span><br><span class="line">Your function should return length = 2, with the first two elements of nums being 2.</span><br><span class="line"></span><br><span class="line">It doesn&apos;t matter what you leave beyond the returned length.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [0,1,2,2,3,0,4,2], val = 2,</span><br><span class="line"></span><br><span class="line">Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.</span><br><span class="line"></span><br><span class="line">Note that the order of those five elements can be arbitrary.</span><br><span class="line"></span><br><span class="line">It doesn&apos;t matter what values are set beyond the returned length.</span><br></pre></td></tr></table></figure><p>这个和前面那个remove duplicate number是一个思路：</p><p>这个算法很简单，但是效率贼高。其实很好理解，就是当这个数字不等于val的时候，会用之前的curr（非重复的数字坐标）来替换当前的val。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">3, 2, 2, 3 &amp; val = 2</span><br><span class="line">curr = 0</span><br><span class="line"></span><br><span class="line">when i = 0, val != nums[i] num[curr++] = nums[i] -&gt; nums[0] = nums[0] and curr = 1 now</span><br><span class="line">when i = 1, val == nums[i] continue</span><br><span class="line">when i = 2, val == nums[i] continue</span><br><span class="line">when i = 3, val != nums[i] num[curr++] = nums[i] -&gt; nums[1] = nums[3] and curr = 2 now</span><br><span class="line"></span><br><span class="line">so nums = 3, 3, 2, 3 and curr = 2, we do not care index &gt; 1 values,</span><br><span class="line">so we done</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> curr = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (val != nums[i]) &#123;</span><br><span class="line">            nums[curr++] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> curr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Implement-strStr"><a href="#Implement-strStr" class="headerlink" title="Implement strStr()"></a>Implement strStr()</h1><p><a href="https://leetcode.com/problems/implement-strstr/" target="_blank" rel="noopener">Implement strStr()</a></p><p>Return the index of the first occurrence of needle in haystack, or <strong>-1</strong> if needle is not part of haystack.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: haystack = &quot;hello&quot;, needle = &quot;ll&quot;</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot;</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure><p><strong>返回要求的是index，我还以为是长度一度迷茫为啥不对o(╥﹏╥)o</strong>，一个for就能解决的问题，我们先去<code>needle</code>的第一个字符，然后在循环<code>haystack</code>的时候如果里面有字符和<code>needle</code>的第一个字符匹配了就用<code>substring</code>来接取相对应的长度，然后判断是否和<code>needle</code>相等（需要判断index的长度是不是超过了<code>haystack</code>的长度）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span><span class="params">(String haystack, String needle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (needle.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = needle.charAt(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; haystack.length(); i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (haystack.charAt(i) == c) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + needle.length() &gt; haystack.length()) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (haystack.substring(i, i+needle.length()).equals(needle)) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Search-insert-position"><a href="#Search-insert-position" class="headerlink" title="Search insert position"></a>Search insert position</h1><p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p><p>You may assume no duplicates in the array.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,3,5,6], 5</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,3,5,6], 2</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p>就是找到合适的位置，然后返回相对应的index，没什么难度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt;= target) <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nums.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Median-of-two-sorted-array"><a href="#Median-of-two-sorted-array" class="headerlink" title="Median of two sorted array"></a>Median of two sorted array</h1><p>There are two sorted arrays <strong>nums1</strong> and <strong>nums2</strong> of size m and n respectively.</p><p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p><p>You may assume <strong>nums1</strong> and <strong>nums2</strong> cannot be both empty.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nums1 = [1, 3]</span><br><span class="line">nums2 = [2]</span><br><span class="line"></span><br><span class="line">The median is 2.0</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nums1 = [1, 2]</span><br><span class="line">nums2 = [3, 4]</span><br><span class="line"></span><br><span class="line">The median is (2 + 3)/2 = 2.5</span><br></pre></td></tr></table></figure><p>没办法太菜了找不到合适的方法来写了，有想过分开循环，但是这样需要有很多的判断条件，晚会会再尝试的，目前就快的方法就是合并array了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> l1 = <span class="number">0</span>, l2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (l1 &lt; nums1.length &amp;&amp; l2 &lt; nums2.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1[l1] &lt; nums2[l2]) &#123;</span><br><span class="line">            list.add(nums1[l1]);</span><br><span class="line">            l1 += <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            list.add(nums2[l2]);</span><br><span class="line">            l2 += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add n2</span></span><br><span class="line">    <span class="keyword">if</span> (l1 &gt;= nums1.length) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l2; i &lt; nums2.length; i ++) list.add(nums2[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l1; i &lt; nums1.length; i ++) list.add(nums1[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = list.size();</span><br><span class="line">    <span class="keyword">if</span> (len % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> list.get(len/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">double</span>) (list.get(len/<span class="number">2</span>) + list.get(len/<span class="number">2</span>-<span class="number">1</span>)) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="String-to-Integer-atoi"><a href="#String-to-Integer-atoi" class="headerlink" title="String to Integer (atoi)"></a>String to Integer (atoi)</h1><p><a href="https://leetcode.com/problems/string-to-integer-atoi/" target="_blank" rel="noopener">String to Integer (atoi)</a></p><p>Implement <code>atoi</code> which converts a string to an integer.</p><p>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p><p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p><p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p><p>If no valid conversion could be performed, a zero value is returned.</p><p><strong>Note:</strong></p><ul><li>Only the space character <code>&#39; &#39;</code> is considered as whitespace character.</li><li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. If the numerical value is out of the range of representable values, INT_MAX (231 − 1) or INT_MIN (−231) is returned.</li></ul><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;42&quot;</span><br><span class="line">Output: 42</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;   -42&quot;</span><br><span class="line">Output: -42</span><br><span class="line">Explanation: The first non-whitespace character is &apos;-&apos;, which is the minus sign.</span><br><span class="line">             Then take as many numerical digits as possible, which gets 42.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;4193 with words&quot;</span><br><span class="line">Output: 4193</span><br><span class="line">Explanation: Conversion stops at digit &apos;3&apos; as the next character is not a numerical digit.</span><br></pre></td></tr></table></figure><p><strong>Example 4:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;words and 987&quot;</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: The first non-whitespace character is &apos;w&apos;, which is not a numerical </span><br><span class="line">             digit or a +/- sign. Therefore no valid conversion could be performed.</span><br></pre></td></tr></table></figure><p><strong>Example 5:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;-91283472332&quot;</span><br><span class="line">Output: -2147483648</span><br><span class="line">Explanation: The number &quot;-91283472332&quot; is out of the range of a 32-bit signed integer.</span><br><span class="line">             Thefore INT_MIN (−231) is returned.</span><br></pre></td></tr></table></figure><p>这是我写LeetCode以来submit最多的次数╮(╯▽╰)╭，里面条件的限制和符号的判定太烦了。给大家写一下判断条件：</p><ol><li>空格只能出现在最前面，一旦出现了-+0-9这些符号，之后再遇到空格就要break</li><li>-+符号考虑到符号的问题</li><li>只能以数字开头的才能提取数字，如果不是就return 0</li><li>考虑到整型溢出的问题</li></ol><p>就是判断条件有点麻烦，其他的还好，我写的有点乱七八糟的，讲究看下。。。如果有好的idea可以写在comment里面，我会修改的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// + or -</span></span><br><span class="line">    <span class="keyword">int</span> operation = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (str.equals(<span class="string">""</span>))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> whitespace = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">boolean</span> sign = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i ++) &#123;</span><br><span class="line">        <span class="keyword">char</span> c = str.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (whitespace &amp;&amp; c == <span class="string">' '</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (!whitespace &amp;&amp; c == <span class="string">' '</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> ((c == <span class="string">'-'</span> || c == <span class="string">'+'</span>) &amp;&amp; sign) &#123;</span><br><span class="line">            operation = (c == <span class="string">'-'</span>)?-<span class="number">1</span>:<span class="number">1</span>;</span><br><span class="line">            sign = <span class="keyword">false</span>;</span><br><span class="line">            whitespace=<span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) <span class="keyword">break</span>;</span><br><span class="line">        whitespace = <span class="keyword">false</span>;</span><br><span class="line">        sign=<span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (res*operation &gt; Integer.MAX_VALUE/<span class="number">10</span> || res*operation &lt; Integer.MIN_VALUE/<span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (operation &gt; <span class="number">0</span>) <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (res*operation == Integer.MAX_VALUE/<span class="number">10</span>) <span class="keyword">if</span> ((<span class="keyword">int</span>)c-<span class="number">48</span> &gt;= Integer.MAX_VALUE %<span class="number">10</span>) <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">if</span> (res*operation == Integer.MIN_VALUE/<span class="number">10</span>) <span class="keyword">if</span> ((<span class="keyword">int</span>)(c-<span class="number">48</span>) * -<span class="number">1</span> &lt;= Integer.MIN_VALUE % <span class="number">10</span>) <span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line">        res = res * <span class="number">10</span> + (<span class="keyword">int</span>) c - <span class="number">48</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res *= operation;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Container-With-Most-Water"><a href="#Container-With-Most-Water" class="headerlink" title="Container With Most Water"></a>Container With Most Water</h1><p><a href="https://leetcode.com/problems/container-with-most-water/" target="_blank" rel="noopener">Container With Most Water</a></p><p><img src="/post/374e/1.png" alt></p><p>本来觉得是要用动态规划，可是看了大佬的代码和idea瞬间觉得自己的思路是错的。这个题其实就是变相的求最大面积，我们可以知道长方体的面积是长*高，在遍历这个list的时候长度是一直在减小的，如果长度变小我们只有找到更大的高度才能使面积最大。那么我们可以从两头同时开始遍历，如果<code>left &lt; right</code> 那么left向左移，因为我们要找到higher height，如果<code>left &gt;= right</code> right向左移就行了。这样就会找到最大的area。</p><p>ps：不想想太复杂，试着从最基本的信息去推断，比如这个面积，如果一个变量变下，那另一个变量只有变大才能找到最大的。（😁学习到了）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = height.length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        max = Math.max(max, Math.min(height[l], height[r]) * Math.abs(r - l));</span><br><span class="line">        <span class="keyword">if</span> (height[l] &lt; height[r]) l ++;</span><br><span class="line">        <span class="keyword">else</span> r --;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Merge-Sorted-Array"><a href="#Merge-Sorted-Array" class="headerlink" title="Merge Sorted Array"></a>Merge Sorted Array</h1><p><a href="https://leetcode.com/problems/merge-sorted-array/" target="_blank" rel="noopener">Merge Sorted Array</a></p><p>Given two sorted integer arrays <em>nums1</em> and <em>nums2</em>, merge <em>nums2</em> into <em>nums1</em> as one sorted array.</p><p><strong>Note:</strong></p><ul><li>The number of elements initialized in <em>nums1</em> and <em>nums2</em> are <em>m</em> and <em>n</em> respectively.</li><li>You may assume that <em>nums1</em> has enough space (size that is greater or equal to <em>m</em> + <em>n</em>) to hold additional elements from <em>nums2</em>.</li></ul><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">nums1 = [1,2,3,0,0,0], m = 3</span><br><span class="line">nums2 = [2,5,6],       n = 3</span><br><span class="line"></span><br><span class="line">Output: [1,2,2,3,5,6]</span><br></pre></td></tr></table></figure><p>这是我今天逛<a href="https://www.nowcoder.com/" target="_blank" rel="noopener">牛客</a>的时候发现的一道题，然后想了一下，按照我现在的思想好像只知道直接merge然后sort。还有一种就是正序插入，但是每个element都需要后移一位，但是这样的效率太低了，看了网上的大神的idea之后就发现了新大陆。因为这个list是拍过序的，那么我们就知道了最后一个元素肯定是最大。那么我们为什么不从后面往前面循环呢，这样不需要元素以为，只需要直接赋值就好了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// the last position of array</span></span><br><span class="line">    <span class="keyword">int</span> last = nums1.length - <span class="number">1</span>;</span><br><span class="line">    m--; n--;</span><br><span class="line">    <span class="keyword">while</span> (m &gt; <span class="number">0</span> &amp;&amp; n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1[m] &gt; nums2[n]) nums1[last--] = nums1[m--];</span><br><span class="line">        <span class="keyword">else</span> nums1[last--] = nums2[n--];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m &gt; <span class="number">0</span>) nums1[last--] = nums1[m--];</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) nums1[last--] = nums2[n--];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Single-Number"><a href="#Single-Number" class="headerlink" title="Single Number"></a>Single Number</h1><p>Given a <strong>non-empty</strong> array of integers, every element appears <em>twice</em> except for one. Find that single one.</p><p><strong>Note:</strong></p><p>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,2,1]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [4,1,2,1,2]</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure><p>庆幸一下终于可以独立思考出来一些简单的算法了。这个题其实算是还OK的，可以使用HashMap解决，因为HashMap监测key的时候的时间复杂度是$O(1)$，所以整体时间是$O(n)$。在loop里面去判断该数字是否存在HashMap里面，如果不存在就push进去，如果已经存在就删除。那么最后剩下的那个元素肯定是single（<del>单身狗</del>）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span> <span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> value : A) &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(value)) &#123;</span><br><span class="line">            map.remove(value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(value, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(map.keySet().toArray()[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ps: 在discuss里面看到了一个特别骚的操作。。。真的骚操作。。。</p><p>使用了异或（exclusive OR简称xor）这个来判断的，异或的话空间复杂度只有$O(1)$。</p><blockquote><p>$1\oplus0=1$</p><p>$1\oplus1=1$</p><p>$0\oplus0=0$</p><p>$0\oplus1=1$</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        res ^= nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行吧。。。牛逼。。</p><h1 id="Remove-Nth-Node-From-End-of-List"><a href="#Remove-Nth-Node-From-End-of-List" class="headerlink" title="Remove Nth Node From End of List"></a>Remove Nth Node From End of List</h1><p><a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="noopener">Remove Nth Node From End of List</a></p><p>Given a linked list, remove the <em>n</em>-th node from the end of list and return its head.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.</span><br><span class="line"></span><br><span class="line">After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><p>Given <em>n</em> will always be valid.</p><p><strong>Follow up:</strong></p><p>Could you do this in one pass?</p><p>解析：</p><p>题意就是删除倒数第N的节点。这个可以使用一个快慢指针的方法来解决，先让快的指针移动n个node，然后慢的指针开始移动。这样当快的指针为null的时候，慢的指针刚好就是要删除的节点。</p><p><img src="/post/374e/2.png" alt></p><p>其实可以当<code>fast.next == null</code>的时候就停止。这样<code>slow.next = slow.next.next</code>是一样的，因为我的代码用了<code>curr</code>来判断是否为null（删除的元素是不是head）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> val;</span><br><span class="line">     ListNode next;</span><br><span class="line">     ListNode() &#123;&#125;</span><br><span class="line">     ListNode(<span class="keyword">int</span> val) &#123; <span class="keyword">this</span>.val = val; &#125;</span><br><span class="line">     ListNode(<span class="keyword">int</span> val, ListNode next) &#123; <span class="keyword">this</span>.val = val; <span class="keyword">this</span>.next = next; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    ListNode curr = <span class="keyword">null</span>;</span><br><span class="line">    ListNode slow = head;</span><br><span class="line">    ListNode fast = head;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            curr = slow;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        n --;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// means at the head</span></span><br><span class="line">    <span class="keyword">if</span>(curr == <span class="keyword">null</span>) head = head.next;</span><br><span class="line">    <span class="keyword">if</span> (curr != <span class="keyword">null</span>) curr.next = slow.next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Maximum-Subarray"><a href="#Maximum-Subarray" class="headerlink" title="Maximum Subarray"></a>Maximum Subarray</h1><p><a href="https://leetcode.com/problems/maximum-subarray/" target="_blank" rel="noopener">Maximum Subarray</a></p><p>Given an integer array <code>nums</code>, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [-2,1,-3,4,-1,2,1,-5,4],</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: [4,-1,2,1] has the largest sum = 6.</span><br></pre></td></tr></table></figure><p><strong>Follow up:</strong></p><p>If you have figured out the O(<em>n</em>) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p><p>题意解析：找到和最大的子序列。</p><p>算法解析：</p><p>可以使用动态规划来做。初始化一个数组长度和原数组一样，如果<code>i-1</code>的数字小于零就表示这就不用需要进行加和，因为加负数就是在减小，然后把<code>i</code>就行赋值。在每次循环的时候找到最大的值就行（<code>max</code>,<code>dp[i]</code>取最大的）。<code>dp[i]</code>存的结果：如果<code>dp[i-1]</code>小于零那就是本身，不然就是<code>dp[i-1] + num[i]</code>加上当前数字。</p><p><img src="/post/374e/3.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">    dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[i-<span class="number">1</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            dp[i] = nums[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dp[i] = dp[i-<span class="number">1</span>] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        max = Math.max(dp[i], max);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了大佬的思路之后发现了新天地，可以节省一些内存空间，降低空间复杂度：</p><p>只需要两个空间的位置就行了，因为我们只需要<code>i</code>和<code>i-1</code>这两个参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    temp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp[(i - <span class="number">1</span>) % <span class="number">2</span>] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            temp[i % <span class="number">2</span>] = temp[(i-<span class="number">1</span>) % <span class="number">2</span>] + nums[i];</span><br><span class="line">            max = Math.max(temp[i%<span class="number">2</span>], max);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            temp[i % <span class="number">2</span>] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Climbing-Stairs"><a href="#Climbing-Stairs" class="headerlink" title="Climbing Stairs"></a>Climbing Stairs</h1><p><a href="https://leetcode.com/problems/climbing-stairs/" target="_blank" rel="noopener">Climbing Stairs</a></p><p>You are climbing a stair case. It takes <em>n</em> steps to reach to the top.</p><p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p><p><strong>Note:</strong> Given <em>n</em> will be a positive integer.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: 2</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: There are two ways to climb to the top.</span><br><span class="line">1. 1 step + 1 step</span><br><span class="line">2. 2 steps</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: There are three ways to climb to the top.</span><br><span class="line">1. 1 step + 1 step + 1 step</span><br><span class="line">2. 1 step + 2 steps</span><br><span class="line">3. 2 steps + 1 step</span><br></pre></td></tr></table></figure><p>这是一个很经典的动态规划的问题。一次可以走一阶楼梯或者两阶楼梯。在第一层的时候肯定只能上一阶，第二层的时候可以是1+1（连续走两个一阶）或者2（直接两阶）所以是两种方法，第三层的时候可以是1+1+1, 1+2, 2+1三种方法。所以可以看出$f(n)=f(n-1)+f(n-2)$的算法。</p><p><img src="/post/374e/4.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    array[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    array[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i ++ )&#123;</span><br><span class="line">        array[i] = array[i-<span class="number">1</span>] + array[i-<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> array[n-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Best-Time-to-Buy-and-Sell-Stock"><a href="#Best-Time-to-Buy-and-Sell-Stock" class="headerlink" title="Best Time to Buy and Sell Stock"></a>Best Time to Buy and Sell Stock</h1><p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">Best Time to Buy and Sell Stock</a></p><p>Say you have an array for which the <em>i</em>th element is the price of a given stock on day <em>i</em>.</p><p>If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p><p>Note that you cannot sell a stock before you buy one.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [7,1,5,3,6,4]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.</span><br><span class="line">             Not 7-1 = 6, as selling price needs to be larger than buying price.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [7,6,4,3,1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: In this case, no transaction is done, i.e. max profit = 0.</span><br></pre></td></tr></table></figure><p>这个题的思路稍微简单一点，可以使用动态规划来找到最小的买入价格，然后我们就可以根绝在买入价格最低的日期之后，找到卖出价格最高的点，这样收益就是最大的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (prices.length &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>, stock = prices[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> price : prices) &#123;</span><br><span class="line">        <span class="keyword">int</span> receive = price - stock;</span><br><span class="line">      <span class="comment">// 找到最大收入</span></span><br><span class="line">        <span class="keyword">if</span> (receive &gt;= <span class="number">0</span>) max = Math.max(max, price-stock);</span><br><span class="line">4444<span class="comment">// 找到最新的收入</span></span><br><span class="line">        stock = Math.min(stock, price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Linked-List-Cycle"><a href="#Linked-List-Cycle" class="headerlink" title="Linked List Cycle"></a>Linked List Cycle</h1><p>Given a linked list, determine if it has a cycle in it.</p><p>To represent a cycle in the given linked list, we use an integer <code>pos</code> which represents the position (0-indexed) in the linked list where tail connects to. If <code>pos</code> is <code>-1</code>, then there is no cycle in the linked list.</p><p><img src="/post/374e/5.png" alt></p><p>算法思路：</p><p>一开始想到的是用HashMap的方式来解决这个问题，但是这样的话空间复杂度就高了很多就是$O(n)$了，然后看了一下大神们的解法，就是利用快慢指针的方法，两种我都试了一下：</p><ol><li>HashMap的方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    Map&lt;ListNode, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    ListNode curr = head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(curr)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span> map.put(curr, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        curr = curr.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>快慢指针的方法</p><p>这样效率高，内存占用少</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    ListNode slow = head;</span><br><span class="line">    ListNode fast = head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (slow == fast) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Find-First-and-Last-Position-of-Element-in-Sorted-Array"><a href="#Find-First-and-Last-Position-of-Element-in-Sorted-Array" class="headerlink" title="Find First and Last Position of Element in Sorted Array"></a>Find First and Last Position of Element in Sorted Array</h1><p><a href="https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/" target="_blank" rel="noopener"> Find First and Last Position of Element in Sorted Array</a></p><p>Given an array of integers <code>nums</code> sorted in ascending order, find the starting and ending position of a given <code>target</code> value.</p><p>Your algorithm’s runtime complexity must be in the order of <em>O</em>(log <em>n</em>).</p><p>If the target is not found in the array, return <code>[-1, -1]</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [5,7,7,8,8,10], target = 8</span><br><span class="line">Output: [3,4]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [5,7,7,8,8,10], target = 6</span><br><span class="line">Output: [-1,-1]</span><br></pre></td></tr></table></figure><p>使用了一个<del>二分查找法</del>，头尾遍历法，不过貌似时间复杂度有点高。。没有别人那么快，花了1ms才通过。一会准备去看看大神的思路，看看有没有好的idea。第23-28行的主要作用是考虑到起始位置和结束位置在同一个地方，当其中有任何一个数字不是-1的时候，代表已经找到这个数字了，但是<code>head==tail</code>的时候就会结束循环了，所以会进行一个判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] searchRange(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">1</span>)<span class="keyword">return</span>  (nums[<span class="number">0</span>] == target) ? <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">0</span>, <span class="number">0</span>&#125;: <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> head = <span class="number">0</span>, tail = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>[] range = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (head &lt;= tail) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[head] == target) &#123;</span><br><span class="line">            range[<span class="number">0</span>] = head;</span><br><span class="line">            <span class="keyword">if</span> (range[<span class="number">1</span>] != -<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nums[tail] == target) &#123;</span><br><span class="line">            range[<span class="number">1</span>] = tail;</span><br><span class="line">            <span class="keyword">if</span> (range[<span class="number">0</span>] != -<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nums[head] &lt; target) head ++;</span><br><span class="line">        <span class="keyword">if</span> (nums[tail] &gt; target) tail --;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (head == tail) &#123;</span><br><span class="line">        <span class="keyword">if</span> (range[<span class="number">0</span>] == -<span class="number">1</span> || range[<span class="number">1</span>] == -<span class="number">1</span>) &#123;</span><br><span class="line">            range[<span class="number">0</span>] = Math.max(range[<span class="number">0</span>], range[<span class="number">1</span>]);</span><br><span class="line">            range[<span class="number">1</span>] = Math.max(range[<span class="number">0</span>], range[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> range;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刚去看了一下discussion里面，然后发现自己写的二分查找不叫二分查找，只能算是一个两头遍历的循环。然后根据二分查找的方法写了一份：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] searchRange(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> head = <span class="number">0</span>, tail = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>[] range = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (head &lt;= tail) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (head + tail) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            tail = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            head = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// make a loop from head to tail and tail to end</span></span><br><span class="line">            <span class="keyword">while</span> (head &lt;= mid) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[head] == target) &#123;</span><br><span class="line">                    range[<span class="number">0</span>] = head;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                head ++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (tail &gt;= mid) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[tail] == target) &#123;</span><br><span class="line">                    range[<span class="number">1</span>] = tail;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                tail --;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> range;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Pow-x-n"><a href="#Pow-x-n" class="headerlink" title="Pow(x, n)"></a>Pow(x, n)</h1><p><a href="https://leetcode.com/problems/powx-n/" target="_blank" rel="noopener"> Pow(x, n)</a></p><p>Implement <a href="http://www.cplusplus.com/reference/valarray/pow/" target="_blank" rel="noopener">pow(<em>x</em>, <em>n</em>)</a>, which calculates <em>x</em> raised to the power <em>n</em> (xn).</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 2.00000, 10</span><br><span class="line">Output: 1024.00000</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 2.10000, 3</span><br><span class="line">Output: 9.26100</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: 2.00000, -2</span><br><span class="line">Output: 0.25000</span><br><span class="line">Explanation: 2-2 = 1/22 = 1/4 = 0.25</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li>-100.0 &lt; <em>x</em> &lt; 100.0</li><li><em>n</em> is a 32-bit signed integer, within the range [−231, 231 − 1]</li></ul><p>这个就是简单的求一下平方，然后给保留5位小数就行了，用Python简单的写了一波</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myPow</span><span class="params">(self, x, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type x: float</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: float</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        x = x**n</span><br><span class="line">        </span><br><span class="line">        x = <span class="number">2</span>**<span class="number">32</span><span class="number">-1</span> <span class="keyword">if</span> x &gt;= <span class="number">2</span>**<span class="number">32</span><span class="number">-1</span> <span class="keyword">else</span> x</span><br><span class="line">        x = <span class="number">-2</span>**<span class="number">32</span> <span class="keyword">if</span> x &lt;= <span class="number">-2</span>**<span class="number">32</span> <span class="keyword">else</span> x</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> round(x, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h1 id="Intersection-of-Two-Linked-Lists"><a href="#Intersection-of-Two-Linked-Lists" class="headerlink" title="Intersection of Two Linked Lists"></a>Intersection of Two Linked Lists</h1><p><a href="https://leetcode.com/problems/intersection-of-two-linked-lists/" target="_blank" rel="noopener">Intersection of Two Linked Lists</a></p><p><img src="/post/374e/6.png" alt></p><p>也算是我第一次面试的第一道题。当时想的是暴力解决，double循环哈哈哈。这次写的时候想到了一个新的方法就是使用HashMap来解决，最坏的情况是$O(n+m)$，不过也比$O(n^2)$好。先把一个LinkList全部放到HashMap里面，然后循环第二个链表，看是不是有一样的node，如果有就直接return当前的node，如果直到循环结束还没有就<code>return null</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">    ListNode head = <span class="keyword">null</span>;</span><br><span class="line">    ListNode curr = headA;</span><br><span class="line">    Map&lt;ListNode, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="keyword">null</span>) &#123;</span><br><span class="line">        map.put(curr, curr.val);</span><br><span class="line">        curr = curr.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    curr = headB;</span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(curr)) &#123;</span><br><span class="line">            head = curr;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curr = curr.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在面试的时候面试官也给我说了另一种解法，就是假设已知两条链表的长度，然后先把两条链表截取到一样的长度，然后一个循环就能找到相对应的结果。这个我觉得时间复杂度比我的要高，就没写。</p><h1 id="Majority-Element"><a href="#Majority-Element" class="headerlink" title="Majority Element"></a>Majority Element</h1><p><a href="https://leetcode.com/problems/majority-element/" target="_blank" rel="noopener">Majority Element</a></p><p>Given an array of size <em>n</em>, find the majority element. The majority element is the element that appears <strong>more than</strong> <code>⌊ n/2 ⌋</code> times.</p><p>You may assume that the array is non-empty and the majority element always exist in the array.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [3,2,3]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,2,1,1,1,2,2]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><p>看到这一类的题，最先想到的就是使用HashMap来解决这个计数的问题，当计数的结果<code>&gt; nums.leng/2</code>的时候可以直接return就好了，准没错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length &lt;= <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> len = nums.length - <span class="number">1</span>;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(nums[i])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.get(nums[i]) + <span class="number">1</span> &gt;= nums.length/<span class="number">2</span>) <span class="keyword">return</span> nums[i];</span><br><span class="line">            map.put(nums[i], map.get(nums[i]) + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(nums[i], <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后看了一下官方的解法，就是先sort一下，如果该数字的个数大于总array长度的一般也就意味着sort完之后取中间那个数字准没错。。。那么简单的方法咋就没想到呢o(╥﹏╥)o</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">return</span> nums[nums.length/<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Min-Stack"><a href="#Min-Stack" class="headerlink" title="Min Stack"></a>Min Stack</h1><p><a href>Min Stack</a>(<a href="https://leetcode.com/problems/min-stack/" target="_blank" rel="noopener">https://leetcode.com/problems/min-stack/</a>)</p><p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p><ul><li>push(x) – Push element x onto stack.</li><li>pop() – Removes the element on top of the stack.</li><li>top() – Get the top element.</li><li>getMin() – Retrieve the minimum element in the stack.</li></ul><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Input</span><br><span class="line">[&quot;MinStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;getMin&quot;,&quot;pop&quot;,&quot;top&quot;,&quot;getMin&quot;]</span><br><span class="line">[[],[-2],[0],[-3],[],[],[],[]]</span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line">[null,null,null,null,-3,null,0,-2]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">MinStack minStack = new MinStack();</span><br><span class="line">minStack.push(-2);</span><br><span class="line">minStack.push(0);</span><br><span class="line">minStack.push(-3);</span><br><span class="line">minStack.getMin(); // return -3</span><br><span class="line">minStack.pop();</span><br><span class="line">minStack.top();    // return 0</span><br><span class="line">minStack.getMin(); // return -2</span><br></pre></td></tr></table></figure><p>这个只需要知道stack是先进后出的原则就行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; list;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> lens;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.lens = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list.add(x);</span><br><span class="line">        <span class="keyword">this</span>.lens ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.lens --;</span><br><span class="line">            <span class="keyword">this</span>.list.remove(<span class="keyword">this</span>.lens);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.list.get(<span class="keyword">this</span>.lens - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.min(<span class="keyword">this</span>.list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MinStack m = <span class="keyword">new</span> MinStack();</span><br><span class="line">        m.push(-<span class="number">2</span>);</span><br><span class="line">        m.push(<span class="number">0</span>);</span><br><span class="line">        m.push(-<span class="number">3</span>);</span><br><span class="line">        System.out.println(m.getMin());</span><br><span class="line">        m.pop();</span><br><span class="line">        System.out.println(m.top());   <span class="comment">// return 0</span></span><br><span class="line">        System.out.println(m.getMin()); <span class="comment">// return -2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Reverse-Linked-List"><a href="#Reverse-Linked-List" class="headerlink" title="Reverse Linked List"></a>Reverse Linked List</h1><p>Reverse a singly linked list.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">Output: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure><p>翻转链表可以循环实现，也可以用递归实现。</p><p><img src="/post/374e/8.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      ListNode curr = head;</span><br><span class="line">      ListNode next = head.next;</span><br><span class="line">      ListNode temp = <span class="keyword">null</span>;</span><br><span class="line">      curr.next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (next != <span class="keyword">null</span>) &#123;</span><br><span class="line">          temp = next.next;</span><br><span class="line">          next.next = curr;</span><br><span class="line">          curr = next;</span><br><span class="line">          next = temp;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> curr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后递归的话就刚开始看可能不是特别好理解的。总感觉遇到递归就有点懵逼的感觉。。。</p><p><img src="/post/374e/9.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">    ListNode last = reverseList(head.next);</span><br><span class="line"></span><br><span class="line">    head.next.next = head;</span><br><span class="line">    head.next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Palindrome-Linked-List"><a href="#Palindrome-Linked-List" class="headerlink" title="Palindrome Linked List"></a>Palindrome Linked List</h1><p><a href="https://leetcode.com/problems/palindrome-linked-list/" target="_blank" rel="noopener">Palindrome Linked List</a></p><p>Given a singly linked list, determine if it is a palindrome.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;2-&gt;1</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Follow up:</strong><br>Could you do it in O(n) time and O(1) space?</p><p>思路：</p><p>本来想的是用递归的方法算一下和，如果是回文的话结果应该是一样的，想法很美好，现实很残酷。。。LeetCode官方应该也考虑到这个问题了，如果算sum的话会导致整型溢出的问题。。。。不过也算是一个思路吧。o(╥﹏╥)o</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">long</span> [] nums = <span class="keyword">new</span> <span class="keyword">long</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    recur(head,nums);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nums[<span class="number">0</span>] == nums[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recur</span><span class="params">(ListNode curr, <span class="keyword">long</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (curr == <span class="keyword">null</span>) <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">    nums[<span class="number">0</span>] = nums[<span class="number">0</span>]*<span class="number">10</span> + curr.val;</span><br><span class="line">    recur(curr.next, nums);</span><br><span class="line">    nums[<span class="number">1</span>] = nums[<span class="number">1</span>]*<span class="number">10</span> + curr.val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最近遇到的题不是递归就是动态规划。。。看来这块有点薄弱，有时间要多练习一下。。看了discussion里面，有个大神写的也是递归的方法，类似于先把第一个指针走到结尾，第二个指针指向head，然后对比是不是一样。感觉很牛逼。。不过递归貌似花费时间有点久。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    recur(head, head);</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">recur</span><span class="params">(ListNode p1, ListNode p2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p1 == <span class="keyword">null</span>) <span class="keyword">return</span> p2;</span><br><span class="line">    ListNode node = recur(p1.next, p2);</span><br><span class="line">    <span class="keyword">if</span> (node.val != p1.val) flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> node.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ps: 还有一种快慢指针的方法。。就是走到中间，然后把两条链表分开对比就行了，但是感觉有点麻烦，还是不写了。。。</p><h1 id="Move-Zeroes"><a href="#Move-Zeroes" class="headerlink" title="Move Zeroes"></a>Move Zeroes</h1><p><a href="https://leetcode.com/problems/move-zeroes/" target="_blank" rel="noopener">Move Zeroes</a></p><p>Given an array <code>nums</code>, write a function to move all <code>0</code>‘s to the end of it while maintaining the relative order of the non-zero elements.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [0,1,0,3,12]</span><br><span class="line">Output: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><p><strong>Note</strong>:</p><ol><li>You must do this <strong>in-place</strong> without making a copy of the array.</li><li>Minimize the total number of operations.</li></ol><p>一开始看到这个想了一下双指针，一个从头开始一个从尾部开始，这样虽然可以把0都放到后面，但是这样就不是顺序来的了。。。看了一下大佬思路，也是双指针（方法思路没错对吧），只不过这个双指针都是从头开始的。先设置一个0的指针<code>zero=-1</code>因为我们一开始不知道0的位置在那，然后开始循环，如果该数字为0可以对<code>zero</code>进行赋值了（<code>zero == -1</code>），当<code>zero != -1</code>说明之前已经有了0的数字。然后如果该数字不等于0的时候表示可以对之前的zero的index进行替换，前提是<code>zero != -1</code>，然后判断zero和i的位置，如果i是zero的next说明是只有一个zero，不然的话就代表zero后面还是一个0的数字，所以这时候<code>zero++</code>就行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> zero = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (zero == -<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            nums[zero] = nums[i];</span><br><span class="line">            nums[i] = <span class="number">0</span>;</span><br><span class="line">            zero = (zero == i + <span class="number">1</span>) ? i : zero+<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (zero != -<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            zero = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Find-All-Numbers-Disappeared-in-an-Array"><a href="#Find-All-Numbers-Disappeared-in-an-Array" class="headerlink" title="Find All Numbers Disappeared in an Array"></a>Find All Numbers Disappeared in an Array</h1><p><a href="https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/" target="_blank" rel="noopener">Find All Numbers Disappeared in an Array</a></p><p>Given an array of integers where 1 ≤ a[i] ≤ <em>n</em> (<em>n</em> = size of array), some elements appear twice and others appear once.</p><p>Find all the elements of [1, <em>n</em>] inclusive that do not appear in this array.</p><p>Could you do it without extra space and in O(<em>n</em>) runtime? You may assume the returned list does not count as extra space.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[4,3,2,7,8,2,3,1]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[5,6]</span><br></pre></td></tr></table></figure><p>题解：数组长度1-n，要判断数组里面出现的数字是不是在1-n之间，如果少了哪个数字就给补上。</p><p>比如：<code>[2,2]</code>数组长度<code>1-2</code>，那么改数组少了1。</p><p>solution 1：</p><p>刚开始考虑的是先sort一下，然后判断index在0，末尾和中间的情况进行补全，但是貌似有点浪费时间了。。所以时间复杂度有点高$O(nlog_{n} + n)$。不过也算是一种方法对吧。。。o(╥﹏╥)o</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findDisappearedNumbers</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; dis = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> dis;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">while</span> (num &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        num --;</span><br><span class="line">        dis.add(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    num = nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i ++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (num + <span class="number">1</span> != nums[i] &amp;&amp; num != nums[i]) &#123;</span><br><span class="line">            num++;</span><br><span class="line">            dis.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        num = nums[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    num = nums[nums.length-<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (num != nums.length) &#123;</span><br><span class="line">        num++;</span><br><span class="line">        dis.add(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>solution 2：</p><p>看了一下discussion感觉他们写的方法屌爆了。。。因为数组里面的数字是在数组长度<code>1-n</code>之内的，所以这个时候我们可以做一个指示器的格式，把数组里面每个数字所对应的坐标变成负数，然后再寻找一个array里面哪些是负数。很欢喜。。</p><p><img src="/post/374e/10.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findDisappearedNumbers</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; dis = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> dis;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i ++) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = Math.abs(nums[i]) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[index] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            nums[index] = -nums[index];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i ++) <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) dis.add(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Word-Ladder"><a href="#Word-Ladder" class="headerlink" title="Word Ladder"></a>Word Ladder</h1><p>126 题</p><p>Given two words (<em>beginWord</em> and <em>endWord</em>), and a dictionary’s word list, find the length of shortest transformation sequence from <em>beginWord</em> to <em>endWord</em>, such that:</p><ol><li>Only one letter can be changed at a time.</li><li>Each transformed word must exist in the word list.</li></ol><p><strong>Note:</strong></p><ul><li>Return 0 if there is no such transformation sequence.</li><li>All words have the same length.</li><li>All words contain only lowercase alphabetic characters.</li><li>You may assume no duplicates in the word list.</li><li>You may assume <em>beginWord</em> and <em>endWord</em> are non-empty and are not the same.</li></ul><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">beginWord = &quot;hit&quot;,</span><br><span class="line">endWord = &quot;cog&quot;,</span><br><span class="line">wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]</span><br><span class="line"></span><br><span class="line">Output: 5</span><br><span class="line"></span><br><span class="line">Explanation: As one shortest transformation is &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot;,</span><br><span class="line">return its length 5.</span><br></pre></td></tr></table></figure><p>词语接龙，一个老外很喜欢的游戏，我觉得他们的test有问题。。。这个数量就很奇怪，不过我还是按照我的方法来，我不觉得我写错了，使用了一个bfs的算法，因为每次改变一个单词其中的一个字符，然后判断新生成的字符是否在wordList之间，然后再判断是不是已经visited过的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordLadder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ladderLength</span><span class="params">(String beginWord, String endWord, List&lt;String&gt; wordList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!wordList.contains(endWord)) <span class="keyword">return</span> step;</span><br><span class="line">        Queue&lt;String&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(beginWord);</span><br><span class="line">        Set&lt;String&gt; visited = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            ++step;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; queue.size(); x ++) &#123;</span><br><span class="line">                String str = queue.poll();</span><br><span class="line">                visited.add(str);</span><br><span class="line">                <span class="keyword">if</span> (str.equals(endWord)) <span class="keyword">return</span> step;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i ++) &#123;</span><br><span class="line">                    <span class="keyword">char</span>[] temp = str.toCharArray();</span><br><span class="line">                    <span class="keyword">char</span> ch = temp[i];</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">char</span> c = <span class="string">'a'</span>; c &lt;= <span class="string">'z'</span>; c ++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (c == ch) <span class="keyword">continue</span>;</span><br><span class="line">                        temp[i] = c;</span><br><span class="line">                        String t = <span class="keyword">new</span> String(temp);</span><br><span class="line">                        <span class="keyword">if</span> (!wordList.contains(t)) <span class="keyword">continue</span>;</span><br><span class="line">                        <span class="keyword">if</span> (visited.contains(t)) <span class="keyword">continue</span>;</span><br><span class="line">                        queue.offer(t);</span><br><span class="line">                        visited.add(t);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> step;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WordLadder w = <span class="keyword">new</span> WordLadder();</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(</span><br><span class="line">                Arrays.asList(<span class="string">"hot"</span>,<span class="string">"dot"</span>,<span class="string">"dog"</span>,<span class="string">"lot"</span>,<span class="string">"log"</span>,<span class="string">"cog"</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res = w.ladderLength(<span class="string">"hit"</span>, <span class="string">"cog"</span>, list);</span><br><span class="line"></span><br><span class="line">        System.out.println(res);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Letter-Combinations-of-a-Phone-Number"><a href="#Letter-Combinations-of-a-Phone-Number" class="headerlink" title="Letter Combinations of a Phone Number"></a>Letter Combinations of a Phone Number</h1><p><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/" target="_blank" rel="noopener">Letter Combinations of a Phone Number</a></p><p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent.</p><p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p><p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" alt="img"></p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;23&quot;</span><br><span class="line">Output: [&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].</span><br></pre></td></tr></table></figure><p>思路1：</p><p>每个数字代表几个相对应的数据，把这些代表的数据进行排列组合。这个第一个想到的就是loop，逐层递进，因为如果是三个数字的话，就是只组合成三个字母的string，可以先把1，2组合得到的结果去和3组合。这样就行了，还有别的算法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LetterCombinationsofaPhoneNumber</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">letterCombinations</span><span class="params">(String digits)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        HashMap&lt;Character, String&gt; maps = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        maps.put(<span class="string">'2'</span>, <span class="string">"abc"</span>);</span><br><span class="line">        maps.put(<span class="string">'3'</span>, <span class="string">"def"</span>);</span><br><span class="line">        maps.put(<span class="string">'4'</span>, <span class="string">"ghi"</span>);</span><br><span class="line">        maps.put(<span class="string">'5'</span>, <span class="string">"jkl"</span>);</span><br><span class="line">        maps.put(<span class="string">'6'</span>, <span class="string">"mno"</span>);</span><br><span class="line">        maps.put(<span class="string">'7'</span>, <span class="string">"pqrs"</span>);</span><br><span class="line">        maps.put(<span class="string">'8'</span>, <span class="string">"tuv"</span>);</span><br><span class="line">        maps.put(<span class="string">'9'</span>, <span class="string">"wyxz"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先实验一下相乘的办法，因为还有很多好的办法，一会慢慢看</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digits.length(); i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!maps.containsKey(digits.charAt(i))) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            String str = maps.get(digits.charAt(i));</span><br><span class="line">            result = mul(result, <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(str.split(<span class="string">""</span>))));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">mul</span><span class="params">(List&lt;String&gt; s1, List&lt;String&gt; s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s1.size() == <span class="number">0</span> &amp;&amp; s2.size() != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s1.size() != <span class="number">0</span> &amp;&amp; s2.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String value : s1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String s : s2) &#123;</span><br><span class="line">                result.add(value + s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LetterCombinationsofaPhoneNumber l = <span class="keyword">new</span> LetterCombinationsofaPhoneNumber();</span><br><span class="line">        String str = <span class="string">"23"</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; res = l.letterCombinations(str);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : res) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路2：</p><p>想学习一下dfs的算法。。。学习使用dfs和递归的方法，这个算法的思路就是直接访问到最底层的str，然后遍历最底层的list，遍历完之后返回到上一层，然后对上一层进行遍历，同时还会使用到最底层的元素。。。递归有点绕。。</p><p><img src="/post/374e/11.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">letterCombinations</span><span class="params">(String digits)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (digits == <span class="keyword">null</span> || digits.length() == <span class="number">0</span>) <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    HashMap&lt;Character, String&gt; maps = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    maps.put(<span class="string">'2'</span>, <span class="string">"abc"</span>);</span><br><span class="line">    maps.put(<span class="string">'3'</span>, <span class="string">"def"</span>);</span><br><span class="line">    maps.put(<span class="string">'4'</span>, <span class="string">"ghi"</span>);</span><br><span class="line">    maps.put(<span class="string">'5'</span>, <span class="string">"jkl"</span>);</span><br><span class="line">    maps.put(<span class="string">'6'</span>, <span class="string">"mno"</span>);</span><br><span class="line">    maps.put(<span class="string">'7'</span>, <span class="string">"pqrs"</span>);</span><br><span class="line">    maps.put(<span class="string">'8'</span>, <span class="string">"tuv"</span>);</span><br><span class="line">    maps.put(<span class="string">'9'</span>, <span class="string">"wyxz"</span>);</span><br><span class="line"></span><br><span class="line">    dfs(digits, <span class="number">0</span>, <span class="string">""</span>, result, maps);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(String digits, <span class="keyword">int</span> index, String temp, List&lt;String&gt; res, HashMap&lt;Character, String&gt; maps)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index == digits.length()) &#123;</span><br><span class="line">        res.add(temp);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String t = maps.get(digits.charAt(index));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.length(); i ++) &#123;</span><br><span class="line">        dfs(digits, index + <span class="number">1</span>, temp + t.charAt(i), res, maps);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3Sum"><a href="#3Sum" class="headerlink" title="3Sum"></a>3Sum</h1><p>Given an array <code>nums</code> of <em>n</em> integers, are there elements <em>a</em>, <em>b</em>, <em>c</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> = 0? Find all unique triplets in the array which gives the sum of zero.</p><p><strong>Note:</strong></p><p>The solution set must not contain duplicate triplets.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Given array nums = [-1, 0, 1, 2, -1, -4],</span><br><span class="line"></span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [-1, 0, 1],</span><br><span class="line">  [-1, -1, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>找到三个数字和为0，这个题也是我之前就在写的一个，但是因为一些原因没做出来，然后今天下午写了一种方法，能运行，但是运行到最后一个的时候超时了，因为加了过多的sort和if的条件语句，在discussion看了一个大佬的方法之后醍醐灌顶，意识到自己少加个条件的问题。。。首先需要sort一下，然后循环遍历，在第一层循环的时候可以用<code>sum = - num</code>这样就只需要在剩余的numbers里面进行一个二分查找，找到相对应的和为<code>-num</code>的数据，当找到之后仍然需要接着二分查找，因为可能还有别的数字和为<code>-num</code>，但是我们需要考虑的一个最重要的因素就是<strong>数字不能重复</strong>，因为同一个数字只能找到那么多和为0的list。如果大家有更好的解决方法可以给我留言。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (nums.length &lt; <span class="number">3</span>) <span class="keyword">return</span> list;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assume the list is sorted</span></span><br><span class="line">    <span class="comment">// then just make a loop</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i ++) &#123;</span><br><span class="line">      <span class="comment">// 避免重复循环的问题，因为每个数字只有那么几个相对应的list</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> num = -nums[i];</span><br><span class="line">      <span class="comment">// 不需要重复的数据，所以从i+1开始</span></span><br><span class="line">        <span class="keyword">int</span> left = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (left == right) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (left == i) &#123;</span><br><span class="line">                left++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (right == i) &#123;</span><br><span class="line">                right --;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] + nums[right] == num) &#123;</span><br><span class="line">                <span class="comment">// then add numbers to the list</span></span><br><span class="line">                List&lt;Integer&gt; temp = <span class="keyword">new</span> LinkedList&lt;Integer&gt;(</span><br><span class="line">                        Arrays.asList(nums[i], nums[left], nums[right])</span><br><span class="line">                );</span><br><span class="line">                list.add(temp);</span><br><span class="line">              <span class="comment">// 因为后面还有可能存在类似的list，同时要主要不能重复</span></span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left+<span class="number">1</span>]) left ++;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right-<span class="number">1</span>]) right--;</span><br><span class="line">                left ++;</span><br><span class="line">                right --;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[left] + nums[right] &lt; num) &#123;</span><br><span class="line">                left ++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right --;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Swap-Nodes-in-Pairs"><a href="#Swap-Nodes-in-Pairs" class="headerlink" title="Swap Nodes in Pairs"></a>Swap Nodes in Pairs</h1><p>Given a linked list, swap every two adjacent nodes and return its head.</p><p>You may <strong>not</strong> modify the values in the list’s nodes, only nodes itself may be changed.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.</span><br></pre></td></tr></table></figure><p>交换node的位置，两两交换，要考虑的问题有两个，list长度为odd的时候怎么办，怎么去进行loop。</p><p><img src="/post/374e/12.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">    ListNode curr = head;</span><br><span class="line">    head = curr.next;</span><br><span class="line">    ListNode last = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="keyword">null</span> &amp;&amp; curr.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ListNode next = curr.next;</span><br><span class="line">        ListNode temp = next.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (last != <span class="keyword">null</span>) &#123;</span><br><span class="line">            last.next = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        next.next = curr;</span><br><span class="line">        curr.next = <span class="keyword">null</span>;</span><br><span class="line">        last = curr;</span><br><span class="line"></span><br><span class="line">        curr = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (curr != <span class="keyword">null</span> &amp;&amp; curr.next == <span class="keyword">null</span>) last.next = curr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Generate-Parentheses"><a href="#Generate-Parentheses" class="headerlink" title="Generate Parentheses"></a>Generate Parentheses</h1><p><a href="https://leetcode.com/problems/generate-parentheses/" target="_blank" rel="noopener">Generate Parentheses</a></p><p>Given <em>n</em> pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p><p>For example, given <em>n</em> = 3, a solution set is:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &quot;((()))&quot;,</span><br><span class="line">  &quot;(()())&quot;,</span><br><span class="line">  &quot;(())()&quot;,</span><br><span class="line">  &quot;()(())&quot;,</span><br><span class="line">  &quot;()()()&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这个题主要是使用了递归的方法，首先一直添加<code>(</code>，直到最深度<code>n</code>，如果超过n肯定不合法了，因为左右括号是相对应的。当左括号达到最深度的时候，开始递归右括号，同时右括号的数量应该小于左括号。伪代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(left, right, depth, str, res)</span>:</span></span><br><span class="line">4<span class="keyword">if</span> str length == depth * <span class="number">2</span>:</span><br><span class="line">44res.add(str)</span><br><span class="line">4</span><br><span class="line">4<span class="keyword">if</span> left &lt; depth:</span><br><span class="line">44find(left+<span class="number">1</span>, right, depth, str+<span class="string">'('</span> , res)</span><br><span class="line">4</span><br><span class="line">4<span class="keyword">if</span> right &lt; left:</span><br><span class="line">44find(left, right+<span class="number">1</span>, depth, str+<span class="string">')'</span>, res)</span><br></pre></td></tr></table></figure><p>Java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenerateParentheses</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">        dfs(<span class="number">0</span>,<span class="number">0</span>,n,list, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> close, <span class="keyword">int</span> open, <span class="keyword">int</span> depth, List&lt;String&gt; res, String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str.length() == depth * <span class="number">2</span>) &#123;</span><br><span class="line">            res.add(str);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (open &lt; depth) &#123;</span><br><span class="line">            dfs(close, open + <span class="number">1</span>, depth, res , str + <span class="string">"("</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (close &lt; open) &#123;</span><br><span class="line">            dfs(close + <span class="number">1</span>, open, depth, res, str + <span class="string">")"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GenerateParentheses ge = <span class="keyword">new</span> GenerateParentheses();</span><br><span class="line">        List&lt;String&gt; res = ge.generateParenthesis(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String str : res) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Rotate-Array"><a href="#Rotate-Array" class="headerlink" title="Rotate Array"></a>Rotate Array</h1><p><a href="https://leetcode.com/problems/rotate-array/" target="_blank" rel="noopener">Rotate Array</a></p><p>Given an array, rotate the array to the right by <em>k</em> steps, where <em>k</em> is non-negative.</p><p><strong>Follow up:</strong></p><ul><li>Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.</li><li>Could you do it in-place with O(1) extra space?</li></ul><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,3,4,5,6,7], k = 3</span><br><span class="line">Output: [5,6,7,1,2,3,4]</span><br><span class="line">Explanation:</span><br><span class="line">rotate 1 steps to the right: [7,1,2,3,4,5,6]</span><br><span class="line">rotate 2 steps to the right: [6,7,1,2,3,4,5]</span><br><span class="line">rotate 3 steps to the right: [5,6,7,1,2,3,4]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [-1,-100,3,99], k = 2</span><br><span class="line">Output: [3,99,-1,-100]</span><br><span class="line">Explanation: </span><br><span class="line">rotate 1 steps to the right: [99,-1,-100,3]</span><br><span class="line">rotate 2 steps to the right: [3,99,-1,-100]</span><br></pre></td></tr></table></figure><p>就是根据k的个数，每个element向后移动k位，超出array的话在array的开头继续。</p><p>刚开始试了好几种方法，但是都不是特别理想，看了一下discussion，学到了。这个翻转链表实际是有规律的，先把整个array reverse一下，然后再把<code>0-k</code>reverse，然后把<code>k-end</code>reverse一下就可以得到最终的结果。。。很神奇的规律。。。</p><p><img src="/post/374e/13.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个想法是在leetcode那边看到的，其工作原理就是先reverse一下</span></span><br><span class="line"><span class="comment"> * 然后在对前k个进行reverse，然后对k-len再reverse</span></span><br><span class="line"><span class="comment"> * 这样就能得到结果了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RotateArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length &lt; <span class="number">2</span> || k &lt; <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 整体反转</span></span><br><span class="line">        reverse(<span class="number">0</span>, nums.length - <span class="number">1</span>, nums);</span><br><span class="line"></span><br><span class="line">        reverse(<span class="number">0</span>, k % nums.length - <span class="number">1</span>, nums);</span><br><span class="line">        reverse(k % nums.length, nums.length - <span class="number">1</span>, nums);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = nums[left];</span><br><span class="line">            nums[left] = nums[right];</span><br><span class="line">            nums[right] = temp;</span><br><span class="line">            left ++;</span><br><span class="line">            right --;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RotateArray re = <span class="keyword">new</span> RotateArray();</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        re.rotate(nums, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(nums));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Plus-One"><a href="#Plus-One" class="headerlink" title="Plus One"></a>Plus One</h1><p>Given a <strong>non-empty</strong> array of digits representing a non-negative integer, plus one to the integer.</p><p>The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.</p><p>You may assume the integer does not contain any leading zero, except the number 0 itself.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3]</span><br><span class="line">Output: [1,2,4]</span><br><span class="line">Explanation: The array represents the integer 123.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [4,3,2,1]</span><br><span class="line">Output: [4,3,2,2]</span><br><span class="line">Explanation: The array represents the integer 4321.</span><br></pre></td></tr></table></figure><p>一个数学的问题，在最后面加1，然后如果大于10，那么前面的数字就需要加一。可以直接不用分类来讨论，我们可以设置一个循环<code>index &lt;= 0</code> ，<code>index = nums.length - 1</code>这样我们从最后面开始加1，<code>overflow</code>是用来判断是否溢出，在循环里面如果没有溢出，就表示前面数字加一的结果不大于10，所以可以直接break。还有一种如果循环结束了依然溢出了，这时候我们需要在array里面多加一个数字在最前面。</p><p><img src="/post/374e/14.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlusOne</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] plusOne(<span class="keyword">int</span>[] digits) &#123;</span><br><span class="line">        <span class="keyword">int</span> lens = digits.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] nums = digits.clone();</span><br><span class="line">        <span class="keyword">int</span> overflow = <span class="number">0</span>;</span><br><span class="line">        nums[lens] += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (lens != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// every time plus one</span></span><br><span class="line">            nums[lens] += overflow;</span><br><span class="line">            overflow = nums[lens] / <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[lens] &gt; <span class="number">9</span>) nums[lens] %= <span class="number">10</span>;</span><br><span class="line">            lens --;</span><br><span class="line">            <span class="comment">// 当不溢出的时候就可以break了，因为不会进位了</span></span><br><span class="line">            <span class="keyword">if</span> (overflow == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果循环结束还溢出，说明还需要多开辟一个内存位置。</span></span><br><span class="line">        <span class="keyword">if</span> (overflow != <span class="number">0</span>) &#123;</span><br><span class="line">            nums = IntStream.concat(Arrays.stream(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>&#125;), Arrays.stream(nums)).toArray();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        PlusOne p = <span class="keyword">new</span> PlusOne();</span><br><span class="line">        <span class="keyword">int</span>[] res = p.plusOne(nums);</span><br><span class="line">        System.out.println(Arrays.toString(res));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Intersection-of-Two-Arrays-II"><a href="#Intersection-of-Two-Arrays-II" class="headerlink" title="Intersection of Two Arrays II"></a>Intersection of Two Arrays II</h1><p><a href="https://leetcode.com/problems/intersection-of-two-arrays-ii/" target="_blank" rel="noopener">Intersection of Two Arrays II</a></p><p>Given two arrays, write a function to compute their intersection.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums1 = [1,2,2,1], nums2 = [2,2]</span><br><span class="line">Output: [2,2]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]</span><br><span class="line">Output: [4,9]</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li>Each element in the result should appear as many times as it shows in both arrays.</li><li>The result can be in any order.</li></ul><p>这个题就稍微简单一点了，可以用HashMap来记录<code>num1</code>的元素，value来存数字出现的次数。这样在遍历<code>num2</code>的时候就可以直接判断了。。。刚开始想到过array的用法，但是因为key是单一的，默默被我放弃了（我就是傻逼。。。），看了一下discussion恍然大悟。。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Input: nums1 = [1,2,2,1], nums2 = [2,2]</span></span><br><span class="line"><span class="comment"> * Output: [2,2]</span></span><br><span class="line"><span class="comment"> * 没啥思路， 傻逼了，想着可以用hashmap但是，想到hashmap的key只能存一个value</span></span><br><span class="line"><span class="comment"> * 但是value可以表示数量啊</span></span><br><span class="line"><span class="comment"> * 傻逼</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Intersection</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersect(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; maps = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Integer num : nums1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (maps.containsKey(num)) &#123;</span><br><span class="line">                maps.put(num, maps.get(num) + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                maps.put(num, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Integer num : nums2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (maps.containsKey(num)) &#123;</span><br><span class="line">                res.add(num);</span><br><span class="line">                <span class="keyword">if</span> (maps.get(num) == <span class="number">1</span>) maps.remove(num);</span><br><span class="line">                <span class="keyword">else</span> maps.put(num, maps.get(num) - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[res.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.size(); i ++) result[i] = res.get(i);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] num1 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] num2 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">2</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        Intersection i = <span class="keyword">new</span> Intersection();</span><br><span class="line">        <span class="keyword">int</span>[] res = i.intersect(num1, num2);</span><br><span class="line">        System.out.println(Arrays.toString(res));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Happy-Number"><a href="#Happy-Number" class="headerlink" title="Happy Number"></a>Happy Number</h1><p><a href="https://leetcode.com/problems/happy-number/" target="_blank" rel="noopener">Happy Number</a></p><p>Write an algorithm to determine if a number <code>n</code> is “happy”.</p><p>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it <strong>loops endlessly in a cycle</strong> which does not include 1. Those numbers for which this process <strong>ends in 1</strong> are happy numbers.</p><p>Return True if <code>n</code> is a happy number, and False if not.</p><p><strong>Example:</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: 19</span><br><span class="line">Output: true</span><br><span class="line">Explanation: </span><br><span class="line">12 + 92 = 82</span><br><span class="line">82 + 22 = 68</span><br><span class="line">62 + 82 = 100</span><br><span class="line">12 + 02 + 02 = 1</span><br></pre></td></tr></table></figure><p>输入一个数字，然后把数字分开，然后平方相加。比如<code>19 = 1^2 + 9^2</code>得出的数字再继续进行一样的操作，一直简化到该数字到个位数，如果该数字等于1或者7的时候，就可以return true，否则的话就return false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HappyNumber</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = n;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            list = split(sum);</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (Integer i : list) &#123;</span><br><span class="line">                sum += Math.pow(i, <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sum == <span class="number">1</span> || sum == <span class="number">7</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sum &lt; <span class="number">10</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">split</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            list.add(n % <span class="number">10</span>);</span><br><span class="line">            n = n / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HappyNumber hp = <span class="keyword">new</span> HappyNumber();</span><br><span class="line">        System.out.println(hp.isHappy(<span class="number">19</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Contains-Duplicate"><a href="#Contains-Duplicate" class="headerlink" title="Contains Duplicate"></a>Contains Duplicate</h1><p><a href="https://leetcode.com/problems/contains-duplicate/" target="_blank" rel="noopener">Contains Duplicate</a></p><p>Given an array of integers, find if the array contains any duplicates.</p><p>Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3,1]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3,4]</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,1,1,3,3,4,3,2,4,2]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p>这个题用简单的HashMap做就行，或者用hashset，我这用的是hashset。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainsDuplicate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;Integer&gt; hashSet = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            hashSet.add(num);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nums.length != hashSet.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        ContainsDuplicate cd = <span class="keyword">new</span> ContainsDuplicate();</span><br><span class="line">        System.out.println(cd.containsDuplicate(nums));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Group-Anagrams"><a href="#Group-Anagrams" class="headerlink" title="Group Anagrams"></a>Group Anagrams</h1><p><a href="https://leetcode.com/problems/group-anagrams/" target="_blank" rel="noopener">Group Anagrams</a></p><p>Given an array of strings, group anagrams together.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;],</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],</span><br><span class="line">  [&quot;nat&quot;,&quot;tan&quot;],</span><br><span class="line">  [&quot;bat&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li>All inputs will be in lowercase.</li><li>The order of your output does not matter.</li></ul><p>把使用同一个字符构成的string放到一起。首先确定是使用HashMap，在遍历数组的时候对每一个string先进行sort一下（或者用hash的方法，我下面有写），排过序的string当做key，如果还有相同的数据就接着添加，如果没有该key就初始化一个数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupAnagrams</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        HashMap&lt;String, List&lt;String&gt;&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">            hash(str);</span><br><span class="line">            <span class="keyword">char</span>[] temp_char = str.toCharArray();</span><br><span class="line">            Arrays.sort(temp_char);</span><br><span class="line">            String key = Arrays.toString(temp_char).toString();</span><br><span class="line">            <span class="keyword">if</span> (hashMap.containsKey(key)) &#123;</span><br><span class="line">                hashMap.get(key).add(str);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                List&lt;String&gt; temp = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">                temp.add(str);</span><br><span class="line">                hashMap.put(key, temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String key : hashMap.keySet()) &#123;</span><br><span class="line">            list.add(hashMap.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hash</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> hash = <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i ++) &#123;</span><br><span class="line">            hash += str.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(hash);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] strs = <span class="keyword">new</span> String[] &#123;<span class="string">"duy"</span>,<span class="string">"ill"</span>&#125;;</span><br><span class="line">        GroupAnagrams ga = <span class="keyword">new</span> GroupAnagrams();</span><br><span class="line">        ga.groupAnagrams(strs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Search-in-Rotated-Sorted-Array"><a href="#Search-in-Rotated-Sorted-Array" class="headerlink" title="Search in Rotated Sorted Array"></a>Search in Rotated Sorted Array</h1><p><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/" target="_blank" rel="noopener">Search in Rotated Sorted Array</a></p><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p><p>(i.e., <code>[0,1,2,4,5,6,7]</code> might become <code>[4,5,6,7,0,1,2]</code>).</p><p>You are given a target value to search. If found in the array return its index, otherwise return <code>-1</code>.</p><p>You may assume no duplicate exists in the array.</p><p>Your algorithm’s runtime complexity must be in the order of <em>O</em>(log <em>n</em>).</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [4,5,6,7,0,1,2], target = 0</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [4,5,6,7,0,1,2], target = 3</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure><p>思路，先把分割点找到，就是从哪个地方来做的rotated，比如<code>[4,5,6,7,0,1,2]</code>那么分割点就是<code>index = 3</code>的时候，因为是一个递增的过程，所以想找到分割点就很简单。再根据分割点做一个binary search，先分析前半段，如果能找到结果就return，如果找不到就找后半段的内容。</p><p><img src="/post/374e/15.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchRotatedArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> num = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> mid = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num &lt;= nums[i]) num = nums[i];</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                mid = i - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mid == -<span class="number">1</span>) mid = nums.length - <span class="number">1</span>;</span><br><span class="line">        right = mid;</span><br><span class="line">        <span class="keyword">int</span> res = binary_search(left, right, nums, target);</span><br><span class="line">        <span class="keyword">if</span> (res == -<span class="number">1</span>) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>; right = nums.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> binary_search(left, right, nums, target);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binary_search</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp_mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[temp_mid] == target) <span class="keyword">return</span> temp_mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[temp_mid] &gt; target) &#123;</span><br><span class="line">                right = temp_mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = temp_mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        SearchRotatedArray s = <span class="keyword">new</span> SearchRotatedArray();</span><br><span class="line">        <span class="keyword">int</span> x = s.search(nums, <span class="number">0</span>);</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="344-Reverse-String"><a href="#344-Reverse-String" class="headerlink" title="344. Reverse String"></a>344. Reverse String</h1><p>Write a function that reverses a string. The input string is given as an array of characters <code>char[]</code>.</p><p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener">in-place</a></strong> with O(1) extra memory.</p><p>You may assume all the characters consist of <a href="https://en.wikipedia.org/wiki/ASCII#Printable_characters" target="_blank" rel="noopener">printable ascii characters</a>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span><br><span class="line">Output: [&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]</span><br><span class="line">Output: [&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</span><br></pre></td></tr></table></figure><p>感觉没有什么技术含量，就直接reverse就行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReverseString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="keyword">char</span>[] s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = s.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">char</span> temp = s[left];</span><br><span class="line">            s[left] = s[right];</span><br><span class="line">            s[right] = temp;</span><br><span class="line">            left ++;</span><br><span class="line">            right --;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ReverseString re = <span class="keyword">new</span> ReverseString();</span><br><span class="line">        <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[] &#123;<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>&#125;;</span><br><span class="line">        re.reverseString(chars);</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(chars));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="83-Remove-Duplicates-from-Sorted-List"><a href="#83-Remove-Duplicates-from-Sorted-List" class="headerlink" title="83. Remove Duplicates from Sorted List"></a>83. Remove Duplicates from Sorted List</h1><p>Given a sorted linked list, delete all duplicates such that each element appear only <em>once</em>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;1-&gt;2</span><br><span class="line">Output: 1-&gt;2</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;1-&gt;2-&gt;3-&gt;3</span><br><span class="line">Output: 1-&gt;2-&gt;3</span><br></pre></td></tr></table></figure><p>在已经sorted的链表里面去除重复的值，可以使用连个指针来完成，curr来前进，temp来链接不一样的值。当<code>temp.val != curr.val</code>的时候代表中间已经省略了同类项，所以直接设置<code>temp.next = curr</code>然后把curr赋值给temp（<code>temp = curr</code>）。</p><p><img src="/post/374e/16.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoveDuplicatesfromSortedList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        ListNode next;</span><br><span class="line">        ListNode() &#123;&#125;</span><br><span class="line">        ListNode(<span class="keyword">int</span> val) &#123; <span class="keyword">this</span>.val = val; &#125;</span><br><span class="line">        ListNode(<span class="keyword">int</span> val, ListNode next) &#123; <span class="keyword">this</span>.val = val; <span class="keyword">this</span>.next = next; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        ListNode curr = head.next;</span><br><span class="line">        ListNode temp = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp.val != curr.val) &#123;</span><br><span class="line">                temp.next = curr;</span><br><span class="line">                temp = curr;</span><br><span class="line">            &#125;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode l1 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        ListNode l2 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        ListNode l3 = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        l1.next = l2;</span><br><span class="line">        l2.next = l3;</span><br><span class="line">        l3.next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        RemoveDuplicatesfromSortedList re = <span class="keyword">new</span> RemoveDuplicatesfromSortedList();</span><br><span class="line">        ListNode head = re.deleteDuplicates(l1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(head.val);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="58-Length-of-Last-Word"><a href="#58-Length-of-Last-Word" class="headerlink" title="58. Length of Last Word"></a>58. Length of Last Word</h1><p>Given a string <em>s</em> consists of upper/lower-case alphabets and empty space characters <code>&#39; &#39;</code>, return the length of last word (last word means the last appearing word if we loop from left to right) in the string.</p><p>If the last word does not exist, return 0.</p><p><strong>Note:</strong> A word is defined as a <strong>maximal substring</strong> consisting of non-space characters only.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;Hello World&quot;</span><br><span class="line">Output: 5</span><br></pre></td></tr></table></figure><p> 直接split然后取最后一个，然后直接计算length</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LengthofLastWord</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLastWord</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.equals(<span class="string">""</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        String[] res = s.split(<span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (res.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> res[res.length - <span class="number">1</span>].length();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String r = <span class="string">"Hello world"</span>;</span><br><span class="line"></span><br><span class="line">        LengthofLastWord l = <span class="keyword">new</span> LengthofLastWord();</span><br><span class="line">        System.out.println(l.lengthOfLastWord(r));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="387-First-Unique-Character-in-a-String"><a href="#387-First-Unique-Character-in-a-String" class="headerlink" title="387. First Unique Character in a String"></a>387. First Unique Character in a String</h1><p>Given a string, find the first non-repeating character in it and return it’s index. If it doesn’t exist, return -1.</p><p><strong>Examples:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;leetcode&quot;</span><br><span class="line">return 0.</span><br><span class="line"></span><br><span class="line">s = &quot;loveleetcode&quot;,</span><br><span class="line">return 2.</span><br></pre></td></tr></table></figure><p> 使用了HashMap的方法，当字符只出现一次就设置key为当前char，value设置为index，如果出现超过一次，就标记value是MAX。筛选HashMap里面value不是MAX，并且返回就行了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstUnique</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstUniqChar</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i ++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(c)) &#123;</span><br><span class="line">                map.put(c, Integer.MAX_VALUE);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(c, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> position = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (Character c : map.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.get(c) != Integer.MAX_VALUE) &#123;</span><br><span class="line">                <span class="keyword">if</span> (map.get(c) &lt; position) position = map.get(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (position == Integer.MAX_VALUE) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> position;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FirstUnique f = <span class="keyword">new</span> FirstUnique();</span><br><span class="line">        String str = <span class="string">"loveleetcode"</span>;</span><br><span class="line">        System.out.println(f.firstUniqChar(str));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="61-Rotate-List"><a href="#61-Rotate-List" class="headerlink" title="61. Rotate List"></a>61. Rotate List</h1><p>Given a linked list, rotate the list to the right by <em>k</em> places, where <em>k</em> is non-negative.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k = 2</span><br><span class="line">Output: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</span><br><span class="line">Explanation:</span><br><span class="line">rotate 1 steps to the right: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL</span><br><span class="line">rotate 2 steps to the right: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: 0-&gt;1-&gt;2-&gt;NULL, k = 4</span><br><span class="line">Output: 2-&gt;0-&gt;1-&gt;NULL</span><br><span class="line">Explanation:</span><br><span class="line">rotate 1 steps to the right: 2-&gt;0-&gt;1-&gt;NULL</span><br><span class="line">rotate 2 steps to the right: 1-&gt;2-&gt;0-&gt;NULL</span><br><span class="line">rotate 3 steps to the right: 0-&gt;1-&gt;2-&gt;NULL</span><br><span class="line">rotate 4 steps to the right: 2-&gt;0-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure><p>做法稍微蠢了一点，我是通过先计算链表的长度，然后把<code>k = k % length</code>这样就可以得到相对链表来说的第几位。然后遍历链表，当节点的index等于k的时候开始把k之后的node放到链表的起始位置。这样就完成了rotate list。</p><p><img src="/post/374e/17.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RotateList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        ListNode next;</span><br><span class="line">        ListNode() &#123;&#125;</span><br><span class="line">        ListNode(<span class="keyword">int</span> val) &#123; <span class="keyword">this</span>.val = val; &#125;</span><br><span class="line">        ListNode(<span class="keyword">int</span> val, ListNode next) &#123; <span class="keyword">this</span>.val = val; <span class="keyword">this</span>.next = next; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">rotateRight</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span> || k == <span class="number">0</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode curr = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> length = length(curr);</span><br><span class="line">        k = length - (k % length);</span><br><span class="line">        <span class="keyword">if</span>(k == length) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        ListNode rota = find_rota(curr, k);</span><br><span class="line">        ListNode temp = rota;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.next = head;</span><br><span class="line">        head = rota;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">find_rota</span><span class="params">(ListNode curr, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">            k --;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode node = curr.next;</span><br><span class="line">        curr.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">(ListNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">            length ++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode l1 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        ListNode l2 = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        ListNode l3 = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//        ListNode l4 = new ListNode(4);</span></span><br><span class="line"><span class="comment">//        ListNode l5 = new ListNode(5);</span></span><br><span class="line"></span><br><span class="line">        l1.next = l2;</span><br><span class="line">        l2.next = l3;</span><br><span class="line"><span class="comment">//        l3.next = l4;</span></span><br><span class="line"><span class="comment">//        l4.next = l5;</span></span><br><span class="line"></span><br><span class="line">        RotateList r = <span class="keyword">new</span> RotateList();</span><br><span class="line">        r.rotateRight(l1, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="82-Remove-Duplicates-from-Sorted-List-II"><a href="#82-Remove-Duplicates-from-Sorted-List-II" class="headerlink" title="82. Remove Duplicates from Sorted List II"></a>82. Remove Duplicates from Sorted List II</h1><p>Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only <em>distinct</em> numbers from the original list.</p><p>Return the linked list sorted as well.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5</span><br><span class="line">Output: 1-&gt;2-&gt;5</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;1-&gt;1-&gt;2-&gt;3</span><br><span class="line">Output: 2-&gt;3</span><br></pre></td></tr></table></figure><p>这个第<a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/" target="_blank" rel="noopener">83</a>的进阶版。只要是有重复的node都需要删除掉。我们需要有一个node（last）来记录上一个访问的node，一个node（curr）来循环。如果<code>curr.val == curr.next.val</code>就代表着有重复的node了，这时候找到所有重复的node，然后得到最后一个重复node的next，然后使用last链接就行，但是last需要判断是否是null，如果是null的话需要考虑到head的情况。</p><p><img src="/post/374e/17.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoveDuplicatesfromSortedListII</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        ListNode next;</span><br><span class="line">        ListNode() &#123;&#125;</span><br><span class="line">        ListNode(<span class="keyword">int</span> val) &#123; <span class="keyword">this</span>.val = val; &#125;</span><br><span class="line">        ListNode(<span class="keyword">int</span> val, ListNode next) &#123; <span class="keyword">this</span>.val = val; <span class="keyword">this</span>.next = next; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        ListNode last = <span class="keyword">null</span>;</span><br><span class="line">        ListNode curr = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (curr.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (curr.val == curr.next.val) &#123;</span><br><span class="line">                ListNode node = different(curr);</span><br><span class="line">                <span class="keyword">if</span> (last == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    head = node;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    last.next = node;</span><br><span class="line">                &#125;</span><br><span class="line">                curr = node;</span><br><span class="line">                <span class="keyword">if</span> (curr == <span class="keyword">null</span>) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                last = curr;</span><br><span class="line">            &#125;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">different</span><span class="params">(ListNode node)</span> </span>&#123;</span><br><span class="line">        ListNode last = node;</span><br><span class="line">        <span class="keyword">while</span> (node.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.val != node.next.val) &#123;</span><br><span class="line">                <span class="keyword">return</span> node.next;</span><br><span class="line">            &#125;</span><br><span class="line">            last = node;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 因为是node.next != null 所以需要判断最后一个node是不是和前面的相等</span></span><br><span class="line">        <span class="keyword">if</span> (last.val == node.val) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode l1 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        ListNode l2 = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        ListNode l3 = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        ListNode l4 = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//        ListNode l5 = new ListNode(5);</span></span><br><span class="line"></span><br><span class="line">        l1.next = l2;</span><br><span class="line">        l2.next = l3;</span><br><span class="line">        l3.next = l4;</span><br><span class="line"><span class="comment">//        l4.next = l5;</span></span><br><span class="line"></span><br><span class="line">        RemoveDuplicatesfromSortedListII r = <span class="keyword">new</span> RemoveDuplicatesfromSortedListII();</span><br><span class="line">        r.deleteDuplicates(l1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="48-Rotate-Image"><a href="#48-Rotate-Image" class="headerlink" title="48. Rotate Image"></a>48. Rotate Image</h1><p>You are given an <em>n</em> x <em>n</em> 2D matrix representing an image.</p><p>Rotate the image by 90 degrees (clockwise).</p><p><strong>Note:</strong></p><p>You have to rotate the image <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener"><strong>in-place</strong></a>, which means you have to modify the input 2D matrix directly. <strong>DO NOT</strong> allocate another 2D matrix and do the rotation.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Given input matrix = </span><br><span class="line">[</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [4,5,6],</span><br><span class="line">  [7,8,9]</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">rotate the input matrix in-place such that it becomes:</span><br><span class="line">[</span><br><span class="line">  [7,4,1],</span><br><span class="line">  [8,5,2],</span><br><span class="line">  [9,6,3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>emmm这个题我使用了另一个double array应该是不咋对</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RotateImage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] res = <span class="keyword">new</span> <span class="keyword">int</span>[matrix.length][matrix[<span class="number">0</span>].length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrix[<span class="number">0</span>].length; i ++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = matrix.length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j --) &#123;</span><br><span class="line">                res[i][index++] = matrix[j][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.length; i ++) &#123;</span><br><span class="line">            matrix[i] = res[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] m = <span class="keyword">new</span> <span class="keyword">int</span>[][] &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</span><br><span class="line">        RotateImage ri = <span class="keyword">new</span> RotateImage();</span><br><span class="line">        ri.rotate(m);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : m) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(ints));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="92-Reverse-Linked-List-II"><a href="#92-Reverse-Linked-List-II" class="headerlink" title="92. Reverse Linked List II"></a>92. Reverse Linked List II</h1><p>Reverse a linked list from position <em>m</em> to <em>n</em>. Do it in one-pass.</p><p><strong>Note:</strong> 1 ≤ <em>m</em> ≤ <em>n</em> ≤ length of list.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m = 2, n = 4</span><br><span class="line">Output: 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</span><br></pre></td></tr></table></figure><p>从起始点到结束点进行reverse。首先根据<code>curr</code>的index遍历到<code>m</code>的时候记录一下该node <code>start</code>，然后同时记录start前面的一个node <code>pre</code>因为reverse结束还要把链表链接起来。当index遍历到<code>n</code>的时候记录该node <code>end</code>。然后使用递归进行reverse。</p><p><img src="/post/374e/19.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReverseLinkedListII</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        ListNode next;</span><br><span class="line">        ListNode() &#123;&#125;</span><br><span class="line">        ListNode(<span class="keyword">int</span> val) &#123; <span class="keyword">this</span>.val = val; &#125;</span><br><span class="line">        ListNode(<span class="keyword">int</span> val, ListNode next) &#123; <span class="keyword">this</span>.val = val; <span class="keyword">this</span>.next = next; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseBetween</span><span class="params">(ListNode head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m &gt;= n || head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">        ListNode curr = head;</span><br><span class="line">        ListNode start = <span class="keyword">null</span>;</span><br><span class="line">        ListNode end = <span class="keyword">null</span>;</span><br><span class="line">        ListNode pre = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (index == m) start = curr;</span><br><span class="line">            <span class="keyword">if</span> (index == n) end = curr;</span><br><span class="line">            <span class="keyword">if</span> (start == <span class="keyword">null</span>) pre = curr;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">            ++index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (end == <span class="keyword">null</span> || start == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        ListNode rest = end.next;</span><br><span class="line">        end.next = <span class="keyword">null</span>;</span><br><span class="line">        reverse(start, start.next);</span><br><span class="line">        <span class="comment">// 现在endu应该是head</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pre == <span class="keyword">null</span>) head = end;</span><br><span class="line">        <span class="keyword">else</span> pre.next = end;</span><br><span class="line"></span><br><span class="line">        start.next = rest;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(ListNode curr, ListNode next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        reverse(next, next.next);</span><br><span class="line">        next.next = curr;</span><br><span class="line">        curr.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode l1 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        ListNode l2 = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        ListNode l3 = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        ListNode l4 = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        l1.next = l2;</span><br><span class="line">        l2.next = l3;</span><br><span class="line">        l3.next = l4;</span><br><span class="line"></span><br><span class="line">        ReverseLinkedListII r = <span class="keyword">new</span> ReverseLinkedListII();</span><br><span class="line">        r.reverseBetween(l1, <span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="142-Linked-List-Cycle-II"><a href="#142-Linked-List-Cycle-II" class="headerlink" title="142. Linked List Cycle II"></a>142. Linked List Cycle II</h1><p>Given a linked list, return the node where the cycle begins. If there is no cycle, return <code>null</code>.</p><p>To represent a cycle in the given linked list, we use an integer <code>pos</code> which represents the position (0-indexed) in the linked list where tail connects to. If <code>pos</code> is <code>-1</code>, then there is no cycle in the linked list.</p><p><strong>Note:</strong> Do not modify the linked list.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: head = [3,2,0,-4], pos = 1</span><br><span class="line">Output: tail connects to node index 1</span><br><span class="line">Explanation: There is a cycle in the linked list, where tail connects to the second node.</span><br></pre></td></tr></table></figure><p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png" alt></p><p>首先想到的就是HashMap哈哈哈哈，然后他要求说不用额外的空间，在不实用额外的空间的情况下想到了递归+循环的方法，但是时间复杂度比较高。在循环的过程中每个node都进行一个检查环的操作，并且判断在环里面是不是等于该数字，如果不等于的话就代表不是环的一个node，当出现第一个node并且是在环里面的node就代表是环的第一个节点。感觉牺牲了时间换来了空间的优化。。。。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListCycleII</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        ListNode next;</span><br><span class="line">        ListNode() &#123;&#125;</span><br><span class="line">        ListNode(<span class="keyword">int</span> val) &#123; <span class="keyword">this</span>.val = val; &#125;</span><br><span class="line">        ListNode(<span class="keyword">int</span> val, ListNode next) &#123; <span class="keyword">this</span>.val = val; <span class="keyword">this</span>.next = next; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// hashmap的解决方法</span></span><br><span class="line"><span class="comment">//    public ListNode detectCycle(ListNode head) &#123;</span></span><br><span class="line"><span class="comment">//        HashMap&lt;ListNode, Integer&gt; map = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        ListNode curr = head;</span></span><br><span class="line"><span class="comment">//        while (curr != null) &#123;</span></span><br><span class="line"><span class="comment">//            if (map.containsKey(curr)) &#123;</span></span><br><span class="line"><span class="comment">//                return curr;</span></span><br><span class="line"><span class="comment">//            &#125; else &#123;</span></span><br><span class="line"><span class="comment">//                map.put(curr, 1);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            curr = curr.next;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        return null;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        ListNode curr = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (curr.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ListNode temp = loop(curr.next, curr.next.next, curr);</span><br><span class="line">            <span class="keyword">if</span> (temp != <span class="keyword">null</span>) <span class="keyword">return</span> curr;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">loop</span><span class="params">(ListNode slow, ListNode fast, ListNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (slow == <span class="keyword">null</span> || fast == <span class="keyword">null</span> || slow.next == <span class="keyword">null</span> || fast.next == <span class="keyword">null</span></span><br><span class="line">                || fast.next.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (slow == fast &amp;&amp; slow == node) <span class="keyword">return</span> slow;</span><br><span class="line">        <span class="keyword">if</span> (slow == fast) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> loop(slow.next, fast.next.next, node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode l1 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        ListNode l2 = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        ListNode l3 = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        ListNode l4 = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        l1.next = l2;</span><br><span class="line">        l2.next = l3;</span><br><span class="line">        l3.next = l4;</span><br><span class="line"><span class="comment">//        l4.next = l2;</span></span><br><span class="line"></span><br><span class="line">        LinkedListCycleII l = <span class="keyword">new</span> LinkedListCycleII();</span><br><span class="line">        l.detectCycle(l1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="219-Contains-Duplicate-II"><a href="#219-Contains-Duplicate-II" class="headerlink" title="219. Contains Duplicate II"></a>219. Contains Duplicate II</h1><p>Given an array of integers and an integer <em>k</em>, find out whether there are two distinct indices <em>i</em> and <em>j</em> in the array such that <strong>nums[i] = nums[j]</strong> and the <strong>absolute</strong> difference between <em>i</em> and <em>j</em> is at most <em>k</em>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,3,1], k = 3</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,0,1,1], k = 1</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,3,1,2,3], k = 2</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p>本来想的是直接用for循环，根据当前数字然后向后走k位，看k位以内有没有和<code>nums[i]</code>相同的数字，但是貌似bug有点多，放弃了。。改用HashMap了，key存<code>nums[i]</code>，value存相对应的index。如果HashMap已经有该key则可以计算HashMap里面存的index和当前i的差值，如果小于等于K就可以直接返回了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainsDuplicateII</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 放弃了我使用hashmap来写好吧。。。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsNearbyDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(nums[i])) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i - map.get(nums[i]) &lt;= k) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ContainsDuplicateII c = <span class="keyword">new</span> ContainsDuplicateII();</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(c.containsNearbyDuplicate(nums, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="347-Top-K-Frequent-Elements"><a href="#347-Top-K-Frequent-Elements" class="headerlink" title="347. Top K Frequent Elements"></a>347. Top K Frequent Elements</h1><p>Given a non-empty array of integers, return the <em>k</em> most frequent elements.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,1,1,2,2,3], k = 2</span><br><span class="line">Output: [1,2]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1], k = 1</span><br><span class="line">Output: [1]</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li>You may assume <em>k</em> is always valid, 1 ≤ <em>k</em> ≤ number of unique elements.</li><li>Your algorithm’s time complexity <strong>must be</strong> better than O(<em>n</em> log <em>n</em>), where <em>n</em> is the array’s size.</li><li>It’s guaranteed that the answer is unique, in other words the set of the top k frequent elements is unique.</li><li>You can return the answer in any order.</li></ul><p>用HashMap可以解决，但是因为Java对HashMap有点点不太友善，我改成Python了，因为可以自定义sort 字典，这样可以根据结果排序了。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">topKFrequent</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">        frequence = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> value <span class="keyword">in</span> frequence:</span><br><span class="line">                frequence[value] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                frequence[value] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        frequence = sorted(frequence.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        res = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> frequence:</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">            res.append(t[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> index == k:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="111-Minimum-Depth-of-Binary-Tree"><a href="#111-Minimum-Depth-of-Binary-Tree" class="headerlink" title="111. Minimum Depth of Binary Tree"></a>111. Minimum Depth of Binary Tree</h1><p>Given a binary tree, find its minimum depth.</p><p>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p><p><strong>Note:</strong> A leaf is a node with no children.</p><p><strong>Example:</strong></p><p>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><p>return its minimum depth = 2.</p><p>关于tree的算法可以去看我另一篇文章<a href="https://shunyangli.github.io/2020/05/03/Algorithm/#more">https://shunyangli.github.io/2020/05/03/Algorithm/#more</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinimumDepthofBinaryTree</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left = minDepth(root.left);</span><br><span class="line">        <span class="keyword">int</span> right = minDepth(root.right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">1</span> + right;</span><br><span class="line">        <span class="keyword">if</span> (root.right == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">1</span> + left;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Math.min(left, right) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="112-Path-Sum"><a href="#112-Path-Sum" class="headerlink" title="112. Path Sum"></a>112. Path Sum</h1><p>Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.</p><p><strong>Note:</strong> A leaf is a node with no children.</p><p><strong>Example:</strong></p><p>Given the below binary tree and <code>sum = 22</code>,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">      5</span><br><span class="line">     / \</span><br><span class="line">    4   8</span><br><span class="line">   /   / \</span><br><span class="line">  11  13  4</span><br><span class="line"> /  \      \</span><br><span class="line">7    2      1</span><br></pre></td></tr></table></figure><p>return true, as there exist a root-to-leaf path <code>5-&gt;4-&gt;11-&gt;2</code> which sum is 22.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathSum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) <span class="keyword">return</span> root.val == sum;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> left = hasPathSum(root.left, sum - root.val);</span><br><span class="line">        <span class="keyword">boolean</span> right = hasPathSum(root.right, sum - root.val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> left | right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="100-Same-Tree"><a href="#100-Same-Tree" class="headerlink" title="100. Same Tree"></a>100. Same Tree</h1><p>Given two binary trees, write a function to check if they are the same or not.</p><p>Two binary trees are considered the same if they are structurally identical and the nodes have the same value.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input:     1         1</span><br><span class="line">          / \       / \</span><br><span class="line">         2   3     2   3</span><br><span class="line"></span><br><span class="line">        [1,2,3],   [1,2,3]</span><br><span class="line"></span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input:     1         1</span><br><span class="line">          /           \</span><br><span class="line">         2             2</span><br><span class="line"></span><br><span class="line">        [1,2],     [1,null,2]</span><br><span class="line"></span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input:     1         1</span><br><span class="line">          / \       / \</span><br><span class="line">         2   1     1   2</span><br><span class="line"></span><br><span class="line">        [1,2,1],   [1,1,2]</span><br><span class="line"></span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p>思路就是左右两边的node都一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SameTree</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> &amp;&amp; q == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> || q == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> left = isSameTree(p.left, q.left);</span><br><span class="line">        <span class="keyword">boolean</span> right = isSameTree(p.right, q.right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> p.val == q.val &amp;&amp; (left &amp;&amp; right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="101-Symmetric-Tree"><a href="#101-Symmetric-Tree" class="headerlink" title="101. Symmetric Tree"></a>101. Symmetric Tree</h1><p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).</p><p>For example, this binary tree <code>[1,2,2,3,4,4,3]</code> is symmetric:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   2</span><br><span class="line"> / \ / \</span><br><span class="line">3  4 4  3</span><br></pre></td></tr></table></figure><p>But the following <code>[1,2,2,null,3,null,3]</code> is not:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  1</span><br><span class="line"> / \</span><br><span class="line">2   2</span><br><span class="line"> \   \</span><br><span class="line"> 3    3</span><br></pre></td></tr></table></figure><p>其实是和上面那道题一个相反的思路，上面是左右相等，这个是left = right, right = left。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SymmetricTree</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> mirror(root.left, root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断左右是否一样</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">mirror</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> &amp;&amp; q == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> || q == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> left = mirror(p.left, q.right);</span><br><span class="line">        <span class="keyword">boolean</span> right = mirror(p.right, q.left);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> p.val == q.val &amp;&amp; (left &amp;&amp; right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="144-Binary-Tree-Preorder-Traversal"><a href="#144-Binary-Tree-Preorder-Traversal" class="headerlink" title="144. Binary Tree Preorder Traversal"></a>144. Binary Tree Preorder Traversal</h1><p>Given a binary tree, return the <em>preorder</em> traversal of its nodes’ values.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">Output: [1,2,3]</span><br></pre></td></tr></table></figure><p><strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?</p><p>就是一个前序的遍历：根左右</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTreePreorderTraversal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        traversal(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traversal</span><span class="params">(TreeNode root, List&lt;Integer&gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        res.add(root.val);</span><br><span class="line">        traversal(root.left, res);</span><br><span class="line">        traversal(root.right, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="162-Find-Peak-Element"><a href="#162-Find-Peak-Element" class="headerlink" title="162. Find Peak Element"></a>162. Find Peak Element</h1><p>A peak element is an element that is greater than its neighbors.</p><p>Given an input array <code>nums</code>, where <code>nums[i] ≠ nums[i+1]</code>, find a peak element and return its index.</p><p>The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.</p><p>You may imagine that <code>nums[-1] = nums[n] = -∞</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,3,1]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: 3 is a peak element and your function should return the index number 2.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,1,3,5,6,4]</span><br><span class="line">Output: 1 or 5 </span><br><span class="line">Explanation: Your function can return either index number 1 where the peak element is 2, </span><br><span class="line">             or index number 5 where the peak element is 6.</span><br></pre></td></tr></table></figure><p><strong>Follow up:</strong> Your solution should be in logarithmic complexity.</p><p>可以采用一个二分查找的方法来处理这个问题，因为已知peak number是 <code>nums[i] &gt; nums[i+1]</code>也就是说如果在array里面出现一个降序就代表着是peak number。这样的话可以使用二分查找，如果<code>nums[mid] &gt; nums[mid+1]</code>就代表该数字就是peak number，但是之前的可以还有相对应的peak number，所以就是<code>search(nums, left, mid)</code>。</p><p>ps: 也有一种O(n)的方法来查找。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindPeakElement</span> </span>&#123;</span><br><span class="line"><span class="comment">//    public int findPeakElement(int[] nums) &#123;</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; nums.length - 1; i ++) &#123;</span></span><br><span class="line"><span class="comment">//            if (nums[i] &gt; nums[i+1]) return i;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        return nums.length-1;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findPeakElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> search(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right) <span class="keyword">return</span> left;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt; nums[mid+<span class="number">1</span>]) <span class="keyword">return</span> search(nums, left, mid);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> search(nums, mid+<span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="39-Combination-Sum"><a href="#39-Combination-Sum" class="headerlink" title="39. Combination Sum"></a>39. Combination Sum</h1><p>Given a <strong>set</strong> of candidate numbers (<code>candidates</code>) <strong>(without duplicates)</strong> and a target number (<code>target</code>), find all unique combinations in <code>candidates</code> where the candidate numbers sums to <code>target</code>.</p><p>The <strong>same</strong> repeated number may be chosen from <code>candidates</code> unlimited number of times.</p><p><strong>Note:</strong></p><ul><li>All numbers (including <code>target</code>) will be positive integers.</li><li>The solution set must not contain duplicate combinations.</li></ul><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: candidates = [2,3,6,7], target = 7,</span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [7],</span><br><span class="line">  [2,2,3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: candidates = [2,3,5], target = 8,</span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [2,2,2,2],</span><br><span class="line">  [2,3,3],</span><br><span class="line">  [3,5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这个可以使用到回溯算法的思想，从<code>i - nums.length</code>，每个都会重复，比如当<code>i=0</code>的时候：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2,2,2,2</span><br><span class="line">2,2,2,3</span><br><span class="line">2,2,2,6</span><br><span class="line">2,2,2,7</span><br><span class="line">2,2,3</span><br><span class="line">2,2,6</span><br><span class="line">2,2,7</span><br><span class="line">2,2</span><br><span class="line">2,3</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>这样的一个规律。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CombinationSum</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        back_tracking(res, <span class="keyword">new</span> ArrayList&lt;&gt;(), target, candidates, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回溯算法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">back_tracking</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; temp, <span class="keyword">int</span> target, <span class="keyword">int</span>[] nums, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (target == <span class="number">0</span>) res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(temp));</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; nums.length; i ++) &#123;</span><br><span class="line">                temp.add(nums[i]);</span><br><span class="line">                back_tracking(res, temp, target - nums[i], nums, i);</span><br><span class="line">                temp.remove(temp.size() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CombinationSum cs = <span class="keyword">new</span> CombinationSum();</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = cs.combinationSum(nums, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; l : res) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(l.toArray()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="46-Permutations"><a href="#46-Permutations" class="headerlink" title="46. Permutations"></a>46. Permutations</h1><p>Given a collection of <strong>distinct</strong> integers, return all possible permutations.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [2,3,1],</span><br><span class="line">  [3,1,2],</span><br><span class="line">  [3,2,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>也是一个回溯算法，需要加一个额外的条件，不能重复，不过也是回溯算法的一个套路。伪代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">result = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(path, select_list)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> condition:</span><br><span class="line">        result.add(path)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> list <span class="keyword">in</span> select_list:</span><br><span class="line">        make a select</span><br><span class="line">        backtrack(path, select_list)</span><br><span class="line">        drawback select</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Permutations</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        back_track(res, <span class="keyword">new</span> ArrayList&lt;&gt;(), nums);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">back_track</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; temp, <span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (temp.size() == nums.length) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(temp));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i ++) &#123;</span><br><span class="line">            <span class="comment">// 避免重复项</span></span><br><span class="line">            <span class="keyword">if</span> (temp.contains(nums[i])) <span class="keyword">continue</span>;</span><br><span class="line">            temp.add(nums[i]);</span><br><span class="line">            back_track(res, temp, nums);</span><br><span class="line">            temp.remove(temp.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Permutations p = <span class="keyword">new</span> Permutations();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = p.permute(nums);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; l : res) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(l.toArray()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="704-Binary-Search"><a href="#704-Binary-Search" class="headerlink" title="704. Binary Search"></a>704. Binary Search</h1><p>Given a <strong>sorted</strong> (in ascending order) integer array <code>nums</code> of <code>n</code> elements and a <code>target</code> value, write a function to search <code>target</code> in <code>nums</code>. If <code>target</code> exists, then return its index, otherwise return <code>-1</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [-1,0,3,5,9,12], target = 9</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: 9 exists in nums and its index is 4</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [-1,0,3,5,9,12], target = 2</span><br><span class="line">Output: -1</span><br><span class="line">Explanation: 2 does not exist in nums so return -1</span><br></pre></td></tr></table></figure><p>标准的二分查找法（只能用在排过序的list里面）。有一个算法讲解：</p><iframe width="807" height="605" src="https://www.youtube.com/embed/4S5dSTNYafU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinarySearch</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) right = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;-<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">12</span>&#125;;</span><br><span class="line">        BinarySearch bs = <span class="keyword">new</span> BinarySearch();</span><br><span class="line">        <span class="keyword">int</span> res = bs.search(nums, <span class="number">9</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;刷题更让我们对一门语言有更加深入的理解，也可以增进对数据结构的理解，百里无一害。&lt;/p&gt;
&lt;h1 id=&quot;Two-Sum&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://shunyangli.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://shunyangli.github.io/tags/leetcode/"/>
    
      <category term="algorithm" scheme="https://shunyangli.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Network</title>
    <link href="https://shunyangli.github.io/post/1c59/"/>
    <id>https://shunyangli.github.io/post/1c59/</id>
    <published>2020-05-12T05:08:40.000Z</published>
    <updated>2022-05-03T05:31:45.413Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OSI-七层模型"><a href="#OSI-七层模型" class="headerlink" title="OSI 七层模型"></a>OSI 七层模型</h1><ol><li>物理层<ul><li>主要作用就是传输比特流（1，0转化成电流强弱来进行传输），通过电缆，光缆等传输。</li></ul></li><li>数据链路层<ul><li>定义了如何让格式化数据以进行传输。而且还会提供错误检测和纠正，以确保数据的可靠传输。（如需要改正错误，由运输层的TCP完成）</li></ul></li><li>网络层<ul><li>使用无连接的网际协议IP和许多种路由选择协议。<strong>分组传输，路由选择。</strong></li></ul></li><li>运输层<ul><li>向两个主机进程之间的通信提供服务。一个主机可以有多个进程，所以运输层有<strong>复用和分用的功能</strong>。<strong>复用就是多个应用层进程可以同时使用下面运输层的服务。分用则是运输层把收到的信息分别交付给上面的应用层中相对应的进程。</strong> 运输层的主要两种协议：<strong>TCP, UDP</strong></li></ul></li><li>会话层<ul><li>通过传输层建立数据传输的通路。主要是在系统之间发起会话或者接受会话请求。（设备之间要相互认知可以是IP或者MAC地址等）。</li></ul></li><li>表示层<ul><li>可确保一个系统的应用层所发送的信息可以被另一个系统的应用层读取。</li></ul></li><li>应用层<ul><li>直接为用户的应用场景提供服务，比如HTTP协议，FTP协议等。</li></ul></li></ol><h1 id="TCP-IP-四层协议"><a href="#TCP-IP-四层协议" class="headerlink" title="TCP/IP 四层协议"></a>TCP/IP 四层协议</h1><p><img src="/post/1c59/tcp.png" alt></p><ol><li>网络接口层</li><li>网际IP层</li><li>运输层</li><li>应用层</li></ol><h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><p>Domain name service（域名系统）。可以将域名和IP地址相互映射的一个分布式数据库。主要是将域名翻译成电脑理解的IP地址，整个过程叫DNS域名解析。</p><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><p>URL由以下内容组成：<code>protocol://hostname:port/path/[parameters]#fragment</code>。</p><p>分别是：协议，域名，端口，路径，参数，分页。</p><p>有关HTTP的经典题目。</p><p>HTTP支持的方法：<code>GET, POST, HEAD, OPTIONS, PUT, DELETE, TRACE, CONNECT</code></p><p><strong>经典面试题：</strong></p><ol><li>浏览器输入URL到返回页面的全过程？<ol><li>根据域名进行DNS解析，得到IP地址</li><li>根据IP地址建立TCP连接</li><li>发送HTTP请求</li><li>服务器处理请求</li><li>返回响应结果</li><li>关闭TCP连接</li><li>浏览器解析HTML</li><li>浏览器渲染</li></ol></li><li>一个浏览器和在与服务器建立一个TCP连接后是否会在一个HTTP请求完成后断开？<ul><li>在HTTP1.0 的时代在HTTP响应之后会断开TCP链接。但是每次重新建立和断开TCP代价过大（时间，CPU）。某些服务器对Connection: keep-alive 的header进行了支持。就是在完成HTTP请求之后TCP不会断开连接，这样可以重复使用。避免了SSL的开销</li><li>所以在HTTP1.1的时候就把connection header写进标准里面，并默认开启持久连接，除非请求中说明connection: close，否则浏览器和服务器直接会维持一段时间的TCP连接。</li></ul></li><li>一个TCP连接可以对应几个HTTP请求？<ul><li>当TCP是持久连接的时候可以发送多个HTTP请求。</li></ul></li><li>一个TCP连接中HTTP请求可以一起发送么（比如一起发三个请求，然后三个响应一起接受）？<ul><li>在HTTP1.1中，单个TCP连接在同一时刻只能处理一个请求。也就是说两个请求的生命周期不能重叠，任意两个HTTP请求从开始到结束的时间在同一个TCP连接里不能重叠。比如在请求<code>GET /index?q=x1</code> and <code>GET /index?q=x2</code>，服务器返回两个结果，但是浏览器没办法判断响应对应的请求</li><li>HTTP1.0试图使用Pipelining解决这个问题（按照顺序来响应请求），但是会出现一些问题：<ul><li>服务器不能正常处理HTTP pipelining</li><li>正确的流水线实现是复杂的</li><li><strong>Head-of-line Blocking连接头阻塞</strong>：假设服务器可以连续处理几个请求，<strong>按照标准服务器应该按照顺序来返回请求</strong>，假如某个请求会消耗大量时间，那么后面所有的请求都需要等着该请求处理完才可以响应</li></ul></li></ul></li><li>为什么有的时候刷新页面不需要重新建立SSL？<ul><li>因为TCP连接会维持一段时间，所以SSL可以复用</li></ul></li><li>浏览器对同一个Host建立TCP连接数量有没有限制？<ul><li>有，比如chrome最多允许6个TCP连接</li><li>如果收到HTML包含很多的图片标签，这些照片该怎么处理？<ul><li>如果图片都在HTTPS的连接并且在同一域名下，那么在SSL握手之后会和服务器协商使用HTTP2.0， 请求使用<strong>Multiplexing（多路复用）</strong>功能在这个连接上进行多路传输。（<strong>多路复用允许同时通过但一的HTTP2.0连接发起多重请求-响应</strong>）</li><li>如果不能使用HTTP2.0，那只能建立多个TCP连接了。</li></ul></li></ul></li><li>GET和POST的区别？<ul><li>首先GET和POST方法没有实质区别。只是报文格式不同。POST的报文：<code>POST /uri HTTP/1.1 \r\n</code>，GET的报文：<code>GET /uri HTTP/1.1 \r\n</code>。</li><li>GET的参数是在URL或者Cookie传参，POST则是在body，但是这个只是默认的通用的格式，并不是协议的限制。POST也可以使用URL传参，GET也可以用body传参。只是一个用法约定而一</li><li><strong>GET的数据长度会有一定限制</strong>，因为GET的参数普遍在URL中，浏览器会对URL的长度有一定限制，所以参数长度有一定限制。POST没有限制</li><li>GET的请求更适用于请求一些普遍可见的信息，不适合传输密码这些重要的隐私信息。当传输隐私信息可以使用POST来请求，不可见相对安全</li><li><strong>POST会发送两个TCP数据包</strong>，因为POST是把header和body分开，先发送header，当服务端返回100状态码之后再发送body</li></ul></li></ol><h1 id="TCP-amp-UDP"><a href="#TCP-amp-UDP" class="headerlink" title="TCP &amp; UDP"></a>TCP &amp; UDP</h1><p>首先是传输层里面的：</p><p><strong>UDP协议：</strong></p><ul><li>无连接协议</li><li>不能保证可靠的信息交付数据</li><li>没有报文传输，不做处理</li><li>没有拥塞控制，头部开销很小</li></ul><p><strong>TCP协议：</strong></p><ul><li>面向连接的协议</li><li>有两端，点对点通信</li><li>安全可靠</li><li>两端可以同时发送接收数据的通信</li><li>是面向字节流的协议</li></ul><p><strong>如果确认号是N，则代表N-1序号的数据都已经收到</strong></p><ol><li>TCP的可靠传输</li></ol><p>主要了解两个协议：<strong>停止等待协议，连续ARQ协议</strong></p><ul><li>停止等待协议：就是每发送完一个分组就停止发送，等待对方的确认。在收到确认后再发送下一组数据。</li><li>连续ARQ协议：如果在传输过程中出现意外，比如B没收到A发送的报文，这时候A就会有一个超时计时器，当超时计时器到期没有收到B的确认报文，A就会重新发送</li></ul><ol start="2"><li>TCP的流量控制</li></ol><p>避免发送方的发送速率太快。<strong>利用滑动窗口实现的。</strong></p><p>滑动窗口协议既保证了分组无差错，有序接收，也实现了流量控制。主要是的方式就是接收方返回的ACk中会包含自己的接收窗口的大小，并且利用大小来控制发送方的数据发送。</p><p><strong>当窗口为0后，会启动持续定时器，避免死锁：</strong></p><ul><li>每当发送者收到一个零窗口的应答后就启动该计时器。时间一到便主动发送报文询问接收者的窗口大小。若接收者仍然返回零窗口，则重置该计时器继续等待；若窗口不为0，则表示应答报文丢失了，此时重置发送窗口后开始发送，这样就避免了死锁的产生。</li></ul><ol start="3"><li>TCP的拥塞控制</li></ol><p>为了防止过多的数据注入到网络中，避免出现网络负载过大的情况。常用的方法就是：</p><ul><li>慢开始，拥塞避免</li><li>快重传，快回复</li></ul><p><strong>TCP报文头：</strong></p><p><img src="/post/1c59/1.png" alt></p><p><strong>1、源端口（Source Port）/ 目的端口（Destination Port）</strong>：他们各占2个字节，标示该段报文来自哪里（源端口）以及要传给哪个上层协议或应用程序（目的端口）。进行tcp通信时，一般client是通过系统自动选择的临时端口号，而服务器一般是使用知名服务端口号或者自己指定的端口号<code>（比如DNS协议对应端口53，HTTP协议对应80）</code></p><p><strong>2、序号（Sequence Number）</strong>：占据四个字节，TCP是面向字节流的，TCP连接中传送的字节流中的每个字节都按顺序编号，例如如一段报文的序号字段值是<code>107</code>，而携带的数据共有<code>100个字段</code>，如果有下一个报文过来，那么序号就从<code>207（100+107）</code>开始，整个要传送的字节流的起始序号必须要在连接建立时设置。首部中的序号字段值指的是本报文段所发送的数据的第一个字节的序号</p><p><strong>3、确认序号（Acknowledgment Number）</strong>：4个字节，是期望收到对方下一个报文段的第一个数据字节的序号，若确认号=N，则表明：到序号N-1为止的所有数据都已正确收到，例如：B收到A发送过来的报文，其序列号字段是<code>301</code>，而数据长度是<code>200字节</code>，这表明了B正确的收到了A到序号<code>500（301+200-1）</code>为止的数据，因此B希望收到A的下一个数据序号是<code>501</code>，于是B在发送给A的确认报文段中，会把ACK确认号设置为<code>501</code></p><p><strong>4、数据偏移（Offset）</strong>：4个字节。指出TCP报文段的数据起始处距离报文段的起始处有多远，这个字段实际上是指出TCP报文段的首部长度。由于首部中还有长度不确定的选项字段，因此数据偏移字段是必要的。单位是32位字，也就是4字节，4位二进制最大表示15，所以数据偏移也就是TCP首部最大60字节</p><p><strong>5、保留（Reserved）</strong>：6个字节。保留域</p><p><strong>6、TCP Flags</strong>：控制位，由八个标志位组成，每个标志位表示控制的功能，我们主要来介绍TCP Flags中常用的六个，</p><ul><li><strong>URG（紧急指针标志）</strong>：当<code>URG=1</code>时，表明紧急指针字段有效。它告诉系统此报文段中有紧急数据，应尽快传送（相当于高优先级的数据），而不要按原来的排队顺序来传送。例如，已经发送了很长的一个程序在主机上运行。但后来发现了一些问题，需要取消该程序的运行。因此用户从键盘发出中断命令。如果不使用紧急数据，那么这两个字符将存储在接收TCP的缓存末尾。只有在所有的数据被处理完毕后这两个字符才被交付接收方的应用进程。这样做就浪费了许多时间</li><li><strong>ACK（确认序号标志）</strong>：当<code>ACK=1</code>时确认号字段有效。当<code>ACK=0</code>时，确认号无效。TCP规定，在连接建立后所有的传送的报文段都必须把ACK置1</li><li><strong>PSH（push标志）</strong>：当两个应用进程进行交互式的通信时，有时在一端的应用进程希望在键入一个命令后立即就能收到对方的响应。在这种情况下，TCP就可以使用推送操作。这时，发送方TCP把PSH置1，并立即创建一个报文段发送出去。接收方TCP收到PSH=1的报文段，就尽快地交付接收应用进程，而不再等到整个缓存都填满了后向上交付</li><li><strong>RST（重置连接标志）</strong>：TCP连接中出现严重差错（如由于主机崩溃或其他原因），必须释放连接，然后再重新建立运输连接，可以用来拒绝一个非法的报文段或拒绝打开一个连接</li><li><strong>SYN（同步序号，用于建立连接过程）</strong>：在连接建立时用来同步序号。当<code>SYN=1而ACK=0</code>时，表明这是一个连接请求报文段。对方若同意建立连接，则应在相应的报文段中使用<code>SYN=1和ACK=1</code>。因此，SYN置为1就表示这是一个连接请求或连接接受保温。</li><li><strong>FIN（finish标志，用于释放连接）</strong>：当<code>FIN=1</code>时，表明此报文段的发送方的数据已发送完毕，并要求释放运输连接</li></ul><p><strong>7、窗口（Window）</strong>：<code>是TCP流量控制的一个手段</code>。这里说的窗口，指的是接收通告窗口（Receiver Window，RWND）。它告诉对方本端的TCP接收缓冲区还能容纳多少字节的数据，这样就可以控制发送数据的速度</p><p><strong>8、检验和（Checksum）</strong>：检验范围包括首部和数据两部分，由发送端填充，接收端对TCP报文段执行CRC算法以检验TCP报文段在传输过程中是否损坏。这也是TCP可靠传输的一个重要保障</p><p><strong>9、紧急指针（Urgent Pointer）</strong>：紧急指针仅在URG=1时才有意义，它指出本报文段中的紧急数据的字节数（紧急数据结束后就是普通数据）。因此，紧急指针指出了紧急数据的末尾在报文段中的位置。当所有紧急数据都处理完时，TCP就告诉应用程序恢复到正常操作。值得注意的是，即使窗口为零时也可发送紧急数据。</p><p><strong>10、TCP可选项（TCP Options）</strong>：长度可变，最长可达40字节。当没有使用“选项”时，TCP的首部长度是20字节。</p><p><strong>TCP三次握手：</strong></p><p><img src="/post/1c59/2.png" alt></p><p><strong>第一次握手：</strong>建立连接时，客户端发送SYN（SYN=j）到服务器，并进入SYN_SEND状态，等待服务器确认（SYN：同步序列编号）</p><p><strong>第二次握手：</strong>服务器接受到SYN的包，必须确认客户端的SYN（ack=j+1），同时自己也发送一个SYN包（SYN=k）即SYN+ACK包，此时服务器进入SYN_RECV状态。</p><p><strong>第三次握手：</strong>客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK（ACK=k+1），该包发送完之后客户端和服务器进入TCP链接成功。完成三次握手。</p><p><strong>为什么需要三次握手才能建立连接？</strong></p><ul><li>为了初始化SEQ的初始值，实现可靠数据传输，TCP协议的通信双方都必须维护一个序列号，以标识发送出去的数据包中哪些是已经被对方收到的。</li><li>如果只有两次握手，最多只有客户端的SEQ能被确认（只能一方发送数据）</li></ul><p><strong>TCP的四次挥手：</strong></p><p><img src="/post/1c59/3.png" alt></p><p><strong>第一次握手：</strong>客户端发送一个FIN，用来关闭客户端到服务端的数据传送，客户端进入FIN_WAIT_1状态</p><p><strong>第二次握手：</strong>服务端接受到FIN之后，发送一个ACK给客户端，确认序号为收到的序号+1（ack = seq+1）</p><p><strong>第三次握手：</strong>服务端发送一个FIN，用来关闭服务端到客户端的数据传送，服务端进入LAST ACK状态</p><p><strong>第四次握手：</strong>客户端在收到FIN后，<strong>客户端进入TIME_WAIT状态</strong>，接着发送一个ACK给服务端，ack=seq+q，服务端进入CLOSED状态。</p><p>可以简单理解为：</p><ol><li>client发送FIN到Server请求关闭</li><li>server发送ACK，SEQ给client表示收到了关闭的请求</li><li>server关闭和client的通道并发送一个FIN的标识</li><li>client收到server发送的FIN并发挥一个ACK表示确认收到，并关闭</li></ol><p><strong>为什么会有TIME_WAIT：</strong></p><ul><li>在client收到server的结束报文的时候不会立马关闭，会进入到TIME_WAIT状态。在这个状态client等待2MSL，主要原因：<ul><li>确保对方有最够的时间收到ACK报文</li><li>避免新旧连接混淆</li></ul></li></ul><p><strong>出现大量的CLOSE_WAIT状态的原因：</strong></p><ul><li>由于对方关闭socket链接，我方忙于读/写，没能及时关闭。</li></ul><h1 id="Web-前端知识"><a href="#Web-前端知识" class="headerlink" title="Web 前端知识"></a>Web 前端知识</h1><p>304：如果客户端发送了一个带条件的GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个304状态码。（就是为什么数据不会被更新降低请求量：合并资源，减少HTTP 请求数，minify / gzip 压缩，webP，lazyLoad。</p><p><strong>加快请求速度：</strong>预解析DNS，减少域名数，并行加载，CDN 分发。</p><p><strong>缓存</strong>：HTTP 协议缓存请求，离线缓存 manifest，离线数据缓存localStorage。</p><p><strong>渲染</strong>：JS/CSS优化，加载顺序，服务端渲染，pipeline。</p><p><strong>301和302的区别：</strong></p><p>301 Moved Permanently 被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。</p><p>302 Found 请求的资源现在临时从不同的URI响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。</p><p>字面上的区别就是301是永久重定向，而302是临时重定向。</p><p>301比较常用的场景是使用域名跳转。302用来做临时跳转 比如未登陆的用户访问用户中心重定向到登录页面</p><p><strong>缓存（304和200的区别）：</strong></p><p>状态码200：请求已成功，请求所希望的响应头或数据体将随此响应返回。即返回的数据为全量的数据，如果文件不通过GZIP压缩的话，文件是多大，则要有多大传输量。</p><p>状态码304：如果客户端发送了一个带条件的 GET 请求且该请求已被允许，<strong>而文档的内容（自上次访问以来或者根据请求的条件）并没有改变</strong>，则服务器应当返回这个状态码。即客户端和服务器端只需要传输很少的数据量来做文件的校验，如果文件没有修改过，则不需要返回全量的数据。（<strong>可以通过在请求的时候封装一个时间戳来解决</strong>）</p><h2 id="Cookie和Session的区别"><a href="#Cookie和Session的区别" class="headerlink" title="Cookie和Session的区别"></a>Cookie和Session的区别</h2><ol><li>Cookie是存放在浏览器端的数据，每次都随请求发送给 Server。存储<code>cookie</code>是浏览器提供的功能。<code>cookie</code> 其实是存储在浏览器中的纯文本，浏览器的安装目录下会专门有一个 cookie 文件夹来存放各个域下设置的<code>cookie</code>。只有4K左右的大小。</li><li>而Session是存放在服务器端的内存中，其 Session ID 是通过 Cookie 发送给客户端的，这个Session ID每次都随请求发送给 Server。</li></ol><h2 id="Cookie-和-LocalStorage-的区别"><a href="#Cookie-和-LocalStorage-的区别" class="headerlink" title="Cookie 和 LocalStorage 的区别"></a>Cookie 和 LocalStorage 的区别</h2><ol><li><code>Set-Cookie</code>之后，用户的每次访问服务器，请求里面都会带着<code>Cookie</code>到服务器上，与HTTP有关，而<code>LocalStorage</code>不用发到服务器端，它是存储在浏览器里面的，与HTTP无关，是浏览器的属性，<code>window.localStorage</code>。</li><li><code>Cookie</code>一般比较小，大约4k左右，而<code>LocalStorage</code>大约能用5M</li><li><code>Cookie</code>默认会在用户关闭页面后失效，不过后端可以设置保存时间，而<code>LocalStorage</code>永久有效，除非用户手动清理。</li></ol><h2 id="LocalStorage-和-SessionStorage-的区别"><a href="#LocalStorage-和-SessionStorage-的区别" class="headerlink" title="LocalStorage 和 SessionStorage 的区别"></a>LocalStorage 和 SessionStorage 的区别</h2><ol><li><code>LocalStorage</code>永久有效，除非用户手动清理<code>localStorage.clear()</code>。不会自动过期</li><li>但是SessionStorage在会话结束后就会失效，也就是用户关闭了页面，就失效了。会自动过期</li><li><strong>Localstorage和sessionstorage：可以保存5M的信息</strong></li></ol><h2 id="csrf和xss的网络攻击及防范"><a href="#csrf和xss的网络攻击及防范" class="headerlink" title="csrf和xss的网络攻击及防范"></a>csrf和xss的网络攻击及防范</h2><h3 id="参考回答："><a href="#参考回答：" class="headerlink" title="参考回答："></a>参考回答：</h3><p>CSRF：跨站请求伪造，可以理解为攻击者盗用了用户的身份，以用户的名义发送了恶意请求，比如用户登录了一个网站后，立刻在另一个tab页面访问量攻击者用来制造攻击的网站，这个网站要求访问刚刚登陆的网站，并发送了一个恶意请求，这时候CSRF就产生了，比如这个制造攻击的网站使用一张图片，但是这种图片的链接却是可以修改数据库的，这时候攻击者就可以以用户的名义操作这个数据库，防御方式的话：使用验证码，检查https头部的refer，<strong>使用token</strong></p><p>XSS：跨站脚本攻击，是说攻击者通过注入恶意的脚本，在用户浏览网页的时候进行攻击，比如获取cookie，或者其他用户身份信息，可以分为存储型和反射型，存储型是攻击者输入一些数据并且存储到了数据库中，其他浏览者看到的时候进行攻击，反射型的话不存储在数据库中，往往表现为将攻击代码放在url地址的请求参数中，防御的话为<strong>cookie设置httpOnly属性</strong>，对用户的输入进行检查，进行特殊字符过滤</p><h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><h4 id="https的原理及其局限性"><a href="#https的原理及其局限性" class="headerlink" title="https的原理及其局限性"></a><strong>https的原理及其局限性</strong></h4><p><strong>一、原理：</strong></p><p>（1）客户使用https的URL访问Web服务器，要求与Web服务器建立SSL连接。</p><p>（2）Web服务器收到客户端请求后，会将网站的证书信息（证书中包含公钥）传送一份给客户端。</p><p>（3）客户端的浏览器与Web服务器开始协商SSL连接的安全等级，也就是信息加密的等级。</p><p>（4）客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。</p><p>（5）Web服务器利用自己的私钥解密出会话密钥。</p><p>（6）Web服务器利用会话密钥加密与客户端之间的通信。</p><p><strong>二、HTTPS的优点</strong></p><p>尽管HTTPS并非绝对安全，掌握根证书的机构、掌握加密算法的组织同样可以进行中间人形式的攻击，但HTTPS仍是现行架构下最安全的解决方案，主要有以下几个好处：</p><p>（1）使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；</p><p>（2）HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。</p><p>（3）HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。</p><p>（4）谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”。</p><p><strong>三、HTTPS的缺点</strong></p><p>虽然说HTTPS有很大的优势，但其相对来说，还是存在不足之处的：</p><p>（1）HTTPS协议握手阶段比较费时，会使页面的加载时间延长近50%，增加10%到20%的耗电；</p><p>（2）HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；</p><p>（3）SSL证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。</p><p>（4）SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗。</p><p>（5）HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行。</p><p><strong>Socket协议：基于TCP建立的链接</strong></p><h1 id="Nginx的原理"><a href="#Nginx的原理" class="headerlink" title="Nginx的原理"></a>Nginx的原理</h1><ul><li>Nginx接收用户请求是异步的，即先将用户请求全部接收下来，再一次性发送到后端Web服务器，极大减轻后端Web服务器的压力。 </li><li>发送响应报文时，是边接收来自后端Web服务器的数据，边发送给客户端。 </li><li><strong>多进程机制</strong><ul><li>服务器每当收到一个客户端时，就有 服务器主进程 （ master process ）生成一个 子进程（ worker process ）出来和客户端建立连接进行交互，直到连接断开，该子进程就结束了。</li></ul></li><li><strong>异步非阻塞机制</strong><ul><li>每个工作进程 使用异步非阻塞方式 ，可以处理 多个客户端请求 。</li></ul></li><li><strong>什么是反向代理</strong><ul><li>反向代理服务器可以隐藏源服务器的存在和特征。它充当互联网云和web服务器之间的中间层。这对于安全方面来说是很好的，特别是当您使用web托管服务时。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OSI-七层模型&quot;&gt;&lt;a href=&quot;#OSI-七层模型&quot; class=&quot;headerlink&quot; title=&quot;OSI 七层模型&quot;&gt;&lt;/a&gt;OSI 七层模型&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;物理层&lt;ul&gt;
&lt;li&gt;主要作用就是传输比特流（1，0转化成电流强弱来进行传输）
      
    
    </summary>
    
    
      <category term="network" scheme="https://shunyangli.github.io/categories/network/"/>
    
    
      <category term="network" scheme="https://shunyangli.github.io/tags/network/"/>
    
  </entry>
  
</feed>
