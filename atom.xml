<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shunyang Li</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shunyangli.github.io/"/>
  <updated>2023-12-29T03:29:16.709Z</updated>
  <id>https://shunyangli.github.io/</id>
  
  <author>
    <name>Shunyang Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CMake Usage</title>
    <link href="https://shunyangli.github.io/post/89b4/"/>
    <id>https://shunyangli.github.io/post/89b4/</id>
    <published>2023-12-29T03:28:06.000Z</published>
    <updated>2023-12-29T03:29:16.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CMake-Usage"><a href="#CMake-Usage" class="headerlink" title="CMake Usage"></a>CMake Usage</h1><p>在我的 C++ 项目中，我更倾向于使用 CMake 而非 Make。这主要是因为 CMake 在整合第三方库时表现出了更高的便捷性，同时在项目维护方面也更为出色。下面简要介绍一下 CMake 的一些常用方法和特点：</p><ol><li><strong>跨平台构建系统</strong>：CMake 支持多平台，无论是 Windows、Linux 还是 MacOS，都可以使用相同的 CMake 文件来构建项目。</li><li><strong>更易于管理依赖关系</strong>：当涉及到第三方库时，CMake 使得管理和链接这些库变得更加简单。通过简单的指令，可以轻松地将外部库集成到项目中。</li><li><strong>易于维护和扩展</strong>：CMake 的脚本语言清晰明了，使得项目的维护和扩展变得更加容易。即便项目规模扩大，使用 CMake 也可以保持构建配置的清晰和简洁。</li><li><strong>生成原生构建环境</strong>：CMake 能够为不同的编译器生成原生的构建文件。例如，它可以为 Visual Studio 生成解决方案文件，为 Make 生成 Makefile，这让开发者可以使用自己熟悉的工具进行构建。</li><li><strong>灵活性和可配置性</strong>：CMake 允许用户编写复杂的构建脚本，这些脚本可以根据不同的平台和条件进行适当的调整和配置。</li></ol><p>总结一下，CMake 由于其跨平台性、易于管理依赖关系、良好的可维护性和灵活性，成为了构建 C++ 项目的优选工具。对于希望简化构建过程并增强项目可维护性的开发者来说，学习并使用 CMake 是非常值得的。</p><h2 id="CMake-Third-Part-Library"><a href="#CMake-Third-Part-Library" class="headerlink" title="CMake Third Part Library"></a>CMake Third Part Library</h2><p>C++ 生态中有许多功能强大的第三方库，比如 Abseil 和 argparse。然而，对于初学者来说，学习如何在 CMake 项目中正确调用这些库可能会有些挑战。以下是一个简单的指南，帮助您开始使用这些库：</p><h3 id="Load-Library"><a href="#Load-Library" class="headerlink" title="Load Library"></a>Load Library</h3><p>使用<a href="https://github.com/abseil/abseil-cpp" target="_blank" rel="noopener">abseil</a>当作例子来详细的解释一下，首先我们的CMakeLists.txt初始化如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.22</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">test</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="keyword">test</span> main.cpp)</span><br></pre></td></tr></table></figure><p>当我们想添加<code>abseil</code>可以进行一下操作：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.22</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">test</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(FetchContent)</span><br><span class="line">FetchContent_Declare(</span><br><span class="line">        abseil</span><br><span class="line">        GIT_REPOSITORY https://github.com/abseil/abseil-cpp.git</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(ABSL_PROPAGATE_CXX_STD <span class="keyword">ON</span> CACHE BOOL <span class="string">"Enable C++ standard propagation to Abseil targets"</span> FORCE)</span><br><span class="line"></span><br><span class="line">FetchContent_MakeAvailable(abseil)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="keyword">test</span> main.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment">#目标链接中添加 absl</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="keyword">test</span> absl::flat_hash_map)</span><br></pre></td></tr></table></figure><p><code>FetchContent</code> 是 CMake 3.11 及更高版本中引入的一个模块，旨在简化从外部源获取代码的过程。这个模块允许您在构建时下载或更新外部依赖项，而不需要预先下载这些依赖项或将它们包含在您的项目源代码中。这种方法对于管理外部库非常有用，特别是当这些库频繁更新或者有多个项目共享时。</p><ol><li><p><strong>声明外部内容</strong>：使用 <code>FetchContent_Declare</code> 函数，您可以指定要获取的外部内容。您需要提供一些细节，比如项目名称、源代码的位置（例如 Git 仓库）等。例如：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FetchContent_Declare(</span><br><span class="line">        abseil</span><br><span class="line">        GIT_REPOSITORY https://github.com/abseil/abseil-cpp.git</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p><strong>获取内容</strong>：<code>FetchContent_MakeAvailable</code> 或 <code>FetchContent_GetProperties</code> 和 <code>FetchContent_Populate</code> 函数用于下载和更新声明的内容。当这些命令执行时，CMake 会检查是否已经下载了内容，如果没有，则会从指定的源获取它。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FetchContent_MakeAvailable(abseil)</span><br></pre></td></tr></table></figure></li><li><p><strong>集成到项目中</strong>：一旦内容被获取，它就可以被集成到您的项目中。通常，这意味着添加对应的子目录或链接库到您的项目中。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">target_link_libraries</span>(<span class="keyword">test</span> absl::flat_hash_map)</span><br></pre></td></tr></table></figure></li></ol><p>添加完<code>abseil</code>的库之后我们就可以在项目中调用该库，比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"absl/container/flat_hash_map.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"absl/container/flat_hash_set.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    absl::flat_hash_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; <span class="built_in">map</span>;</span><br><span class="line">    <span class="built_in">map</span>[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">map</span>[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    absl::flat_hash_set&lt;<span class="keyword">int</span>&gt; <span class="built_in">set</span>;</span><br><span class="line">    <span class="built_in">set</span>.insert(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">set</span>.insert(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">set</span>.insert(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"map[1] = "</span> &lt;&lt; <span class="built_in">map</span>[<span class="number">1</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"map[2] = "</span> &lt;&lt; <span class="built_in">map</span>[<span class="number">2</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"set size: "</span> &lt;&lt; <span class="built_in">set</span>.size() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中我们调用了<code>absl::flat_hash_map</code>和<code>absl::flat_hash_set</code>编译顺利通过，说明成功调用了该库。</p><h2 id="CMake-Subdirectory"><a href="#CMake-Subdirectory" class="headerlink" title="CMake Subdirectory"></a>CMake Subdirectory</h2><p>在处理大型 C++ 项目时，有效地组织代码和文件夹结构是至关重要的。这不仅有助于保持项目的整洁，还能简化构建和维护过程。在这里，我们将讨论如何在 CMake 中添加子文件夹，并将必要的库链接到这些子文件夹中，以实现更好的项目结构和模块化。</p><p>按照上面的例子，我们把<code>absl::flat_hash_map</code>添加到一个单独的文件夹中，我们首先创建一个文件夹<code>src</code>在<code>src</code>文件夹下创建<code>hash.cpp</code>，<code>hash.h</code>和<code>CMakeLists.txt</code>三个文件，内容分别如下：</p><p><code>hash.h</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TEST_HASH_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEST_HASH_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"absl/container/flat_hash_map.h"</span></span></span><br><span class="line"></span><br><span class="line">auto test_hash() -&gt; void;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//TEST_HASH_H</span></span></span><br></pre></td></tr></table></figure><p><code>hash.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"hash.h"</span></span></span><br><span class="line"></span><br><span class="line">auto test_hash() -&gt; void &#123;</span><br><span class="line">    absl::flat_hash_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; <span class="built_in">map</span>;</span><br><span class="line">    <span class="built_in">map</span>[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">map</span>[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"map[1] = "</span> &lt;&lt; <span class="built_in">map</span>[<span class="number">1</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"map[2] = "</span> &lt;&lt; <span class="built_in">map</span>[<span class="number">2</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CMakeLists.txt</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_library</span>(src</span><br><span class="line">        hash.h</span><br><span class="line">        hash.cpp</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(src PUBLIC absl::flat_hash_map)</span><br></pre></td></tr></table></figure><p>这种在根目录下的<code>CMakeLists.txt</code>也需要简单修改如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.22</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">test</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(FetchContent)</span><br><span class="line">FetchContent_Declare(</span><br><span class="line">        abseil</span><br><span class="line">        GIT_REPOSITORY https://github.com/abseil/abseil-cpp.git</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(ABSL_PROPAGATE_CXX_STD <span class="keyword">ON</span> CACHE BOOL <span class="string">"Enable C++ standard propagation to Abseil targets"</span> FORCE)</span><br><span class="line"></span><br><span class="line">FetchContent_MakeAvailable(abseil)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_subdirectory</span>(src)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="keyword">test</span> main.cpp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="keyword">test</span> absl::flat_hash_map src)</span><br></pre></td></tr></table></figure><ol><li><code>add_subdirectory(src)</code>： 这行命令告诉 CMake 在当前项目中添加一个子目录，这里是名为 <code>src</code> 的目录。CMake 会查找 <code>src</code> 目录下的 <code>CMakeLists.txt</code> 文件，并执行其中的命令。这种做法通常用于项目结构中的源代码组织，将不同的代码部分放在不同的目录中，有助于保持项目的整洁和模块化。</li><li><code>add_executable(test main.cpp)</code>： 这个命令创建了一个名为 <code>test</code> 的可执行文件。<code>main.cpp</code> 是这个可执行文件的源文件。这行命令告诉 CMake 编译 <code>main.cpp</code> 并将生成的可执行文件命名为 <code>test</code>。通常，<code>main.cpp</code> 包含程序的入口点，即 <code>main</code> 函数。</li><li><code>target_link_libraries(test absl::flat_hash_map src)</code>： 这行命令用于将库链接到您的目标可执行文件（这里是 <code>test</code>）上。这意味着它指定了构建 <code>test</code> 时需要使用的库。<ul><li><code>absl::flat_hash_map</code>：来自于 Abseil 库的组件，这里作为一个链接目标。它表明您的程序使用了 Abseil 中的 <code>flat_hash_map</code> 容器。</li><li><code>src</code>：这是指在之前通过 <code>add_subdirectory(src)</code> 添加的子目录。假设 <code>src</code> 目录下的 <code>CMakeLists.txt</code> 中定义了一个库（例如静态库或共享库），则 <code>src</code> 代表该库。这样，<code>test</code> 可执行文件会链接该目录下定义的目标。</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CMake-Usage&quot;&gt;&lt;a href=&quot;#CMake-Usage&quot; class=&quot;headerlink&quot; title=&quot;CMake Usage&quot;&gt;&lt;/a&gt;CMake Usage&lt;/h1&gt;&lt;p&gt;在我的 C++ 项目中，我更倾向于使用 CMake 而非 Make。
      
    
    </summary>
    
    
      <category term="Backend" scheme="https://shunyangli.github.io/categories/Backend/"/>
    
    
      <category term="CMake" scheme="https://shunyangli.github.io/tags/CMake/"/>
    
      <category term="cpp" scheme="https://shunyangli.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>Docker Usage</title>
    <link href="https://shunyangli.github.io/post/5b28/"/>
    <id>https://shunyangli.github.io/post/5b28/</id>
    <published>2023-09-29T05:37:39.000Z</published>
    <updated>2023-09-29T05:38:13.889Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-Usage"><a href="#Docker-Usage" class="headerlink" title="Docker Usage"></a>Docker Usage</h1><p>docker主要分成images和container，images可以理解成系统的源文件，container就像是把源文件实例化成系统。把images启动成container那我们就相当于得到了可以操作的系统。</p><h2 id="Docker-image"><a href="#Docker-image" class="headerlink" title="Docker image"></a>Docker image</h2><p><code>docker images</code> 可以查看已经下载下来的镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; docker images   </span><br><span class="line">REPOSITORY           TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">neo4j                latest    f9fb4836fab8   8 days ago    494MB</span><br><span class="line">ubuntu               22.04     c6b84b685f35   6 weeks ago   77.8MB</span><br></pre></td></tr></table></figure><p>列表包含了 <code>仓库名</code>、<code>标签</code>、<code>镜像 ID</code>、<code>创建时间</code> 以及 <code>所占用的空间</code>。</p><p>我们可以使用 <code>docker pull image_name:tag</code> 来拉去我们需要的Docker镜像，（请将 <strong><code>image_name:tag</code></strong> 替换为你要拉取的实际镜像名称和标签）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu:18.04</span><br></pre></td></tr></table></figure><h2 id="Docker-container"><a href="#Docker-container" class="headerlink" title="Docker container"></a>Docker container</h2><p>在有了镜像之后，我们需要使用 <code>docker run</code> 命令把镜像作为基础启动并运行一个容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --it ubuntu:18.04 /bin/bash</span><br></pre></td></tr></table></figure><p><code>-it</code>：这是两个参数，一个是 <code>-i</code>：交互式操作，一个是 <code>-t</code> 终端。我们这里打算进入 <code>bash</code> 执行一些命令并查看返回结果，因此我们需要交互式终端。</p><p><code>ubuntu:18.04</code>：这是指用 <code>ubuntu:18.04</code> 镜像为基础来启动容器。</p><p><code>bin/bash</code>：放在镜像名后的是 <strong>命令</strong>，这里我们希望有个交互式 Shell，因此用的是 <code>bash</code>。</p><p>执行该命令docker会分配一个虚拟终端并绑定到容器的标准输入输出。切记：<strong>我们只需要创建一次container</strong>，如果退出了container终端，我们可以使用 <code>docker exec</code> 来再次启动，不用反复使用 <code>docker run</code> ，因为 <code>docker run</code> 每执行一次都会创建一个新的container。</p><p><code>docker start CONTAINER ID</code> 可以启动一个正在运行container，相反的<code>docker stop CONTAINER ID</code>  可以停止一个正在运行container，<code>CONTAINER ID</code> 可以通过 <code>docker ps -a</code>  来查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; docker ps -a </span><br><span class="line">CONTAINER ID   IMAGE                COMMAND       CREATED        STATUS                           PORTS                                             NAMES</span><br><span class="line">fc807980a0c2   sagikazarmark/dvwa   <span class="string">"/run.sh"</span>     19 hours ago   Up 43 minutes                    3306/tcp, 0.0.0.0:8080-&gt;80/tcp, :::8080-&gt;80/tcp   dvwa</span><br><span class="line">d17bdede58fe   ubuntu:22.04         <span class="string">"/bin/bash"</span>   44 hours ago   Exited (137) About an hour ago                                                     janusgraph</span><br></pre></td></tr></table></figure><h3 id="Share-path"><a href="#Share-path" class="headerlink" title="Share path"></a>Share path</h3><p>使用 <strong><code>docker run</code></strong> 命令来创建和运行容器。如果你需要将本地文件与容器中的文件关联，可以使用 <strong><code>-v</code></strong> 或 <strong><code>--volume</code></strong> 选项来实现。语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v /path/to/<span class="built_in">local</span>/directory:/container/path -it image_name:tag</span><br></pre></td></tr></table></figure><h2 id="Access-container"><a href="#Access-container" class="headerlink" title="Access container"></a>Access container</h2><p>某些时候需要进入容器进行操作，包括使用 <code>docker attach</code> 命令或 <code>docker exec</code> 命令，推荐大家使用 <code>docker exec</code> 命令，原因会在下面说明。</p><h2 id="attach-命令"><a href="#attach-命令" class="headerlink" title="attach 命令"></a><code>attach</code> 命令</h2><p>下面示例如何使用 <code>docker attach</code> 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -dit ubuntu</span><br><span class="line"></span><br><span class="line">243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550</span><br><span class="line"></span><br><span class="line">$ docker container ls</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line"></span><br><span class="line">243c32535da7        ubuntu:latest       <span class="string">"/bin/bash"</span>         18 seconds ago      Up 17 seconds                           nostalgic_hypatia</span><br><span class="line"></span><br><span class="line">$ docker attach 243c</span><br><span class="line"></span><br><span class="line">root@243c32535da7:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><em>注意：</em> <strong>如果从这个 stdin 中 exit，会导致容器的停止。</strong></p><h2 id="exec-命令"><a href="#exec-命令" class="headerlink" title="exec 命令"></a><code>exec</code> 命令</h2><p><code>-i</code> <code>-t</code> 参数</p><p><code>docker exec</code> 后边可以跟多个参数，这里主要说明 <code>-i</code> <code>-t</code> 参数。</p><p>只用 <code>-i</code> 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执行结果仍然可以返回。</p><p>当 <code>-i</code> <code>-t</code> 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -dit ubuntu</span><br><span class="line"></span><br><span class="line">69d137adef7a8a689cbcb059e94da5489d3cddd240ff675c640c8d96e84fe1f6</span><br><span class="line"></span><br><span class="line">$ docker container ls</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line"></span><br><span class="line">69d137adef7a        ubuntu:latest       <span class="string">"/bin/bash"</span>         18 seconds ago      Up 17 seconds                           zealous_swirles</span><br><span class="line"></span><br><span class="line">$ docker <span class="built_in">exec</span> -i 69d1 bash</span><br><span class="line"></span><br><span class="line">ls</span><br><span class="line"></span><br><span class="line">bin</span><br><span class="line"></span><br><span class="line">boot</span><br><span class="line"></span><br><span class="line">dev</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$ docker <span class="built_in">exec</span> -it 69d1 bash</span><br><span class="line"></span><br><span class="line">root@69d137adef7a:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>如果从这个 stdin 中 exit，不会导致容器的停止。这就是为什么推荐大家使用 <code>docker exec</code> 的原因。</p><h2 id="Make-image"><a href="#Make-image" class="headerlink" title="Make image"></a>Make image</h2><p>要将 Docker 容器打包成镜像，可以使用 <strong><code>docker commit</code></strong> 命令。这个命令会将容器的当前状态保存为一个新的镜像。下面是一个简单的步骤：<br>使用<code>docker commit container_id new_image_name</code>命令将容器保存为新的镜像，其中 <strong><code>container_id</code></strong> 是你要保存的容器的 ID，<strong><code>new_image_name</code></strong> 是你想要为新镜像指定的名称和标签：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit 123456789abc my_new_image:1.0</span><br></pre></td></tr></table></figure><p>完成后，你可以使用 <strong><code>docker images</code></strong> 命令来验证新的镜像是否已经创建。</p><h3 id="Push-to-docker-hub"><a href="#Push-to-docker-hub" class="headerlink" title="Push to docker hub"></a>Push to docker hub</h3><ol><li><strong>登录到 Docker Hub</strong>：首先，确保你在 Docker Hub 上有一个账户。如果没有，请访问 <strong><a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a></strong> 注册一个账户。</li><li><strong>在本地标记镜像</strong>：在推送之前，你需要为你的镜像添加一个标签，以指定它的名称和版本。使用 <strong><code>docker tag</code></strong> 命令来完成这个任务，语法如下：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag existing_image_name:existing_tag your_dockerhub_username/new_image_name:new</span><br></pre></td></tr></table></figure><p>例如，如果你的镜像是 <strong><code>my_app</code></strong>，标签是 <strong><code>1.0</code></strong>，并且你的 Docker Hub 用户名是 <strong><code>yourusername</code></strong>，你可以运行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag my_app:1.0 yourusername/my_app:1.0</span><br></pre></td></tr></table></figure><ol><li><strong>登录到 Docker Hub</strong>：在推送之前，使用 <strong><code>docker login</code></strong> 命令登录到 Docker Hub，输入你的用户名和密码：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure><ol><li><strong>推送镜像</strong>：使用 <strong><code>docker push</code></strong> 命令将镜像推送到 Docker Hub：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push yourusername/my_app:1.0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker-Usage&quot;&gt;&lt;a href=&quot;#Docker-Usage&quot; class=&quot;headerlink&quot; title=&quot;Docker Usage&quot;&gt;&lt;/a&gt;Docker Usage&lt;/h1&gt;&lt;p&gt;docker主要分成images和container，ima
      
    
    </summary>
    
    
    
      <category term="-docker" scheme="https://shunyangli.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Server Monitor Scripts</title>
    <link href="https://shunyangli.github.io/post/e75a/"/>
    <id>https://shunyangli.github.io/post/e75a/</id>
    <published>2022-12-11T03:36:15.000Z</published>
    <updated>2022-12-11T03:37:28.953Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Server-Monitoring-Scripts"><a href="#Server-Monitoring-Scripts" class="headerlink" title="Server Monitoring Scripts"></a>Server Monitoring Scripts</h1><p>最近在帮组里维护服务器，写了几个简单的脚本，很久没更新了，顺便记录一下。服务器监控最重要的就是<code>CPU</code>, <code>RAM</code>和<code>Disk</code>。<code>RAM</code>达到100%的时候会导致服务器死机，重启，等一系列问题。所以为了防止服务器出现这种问题，我们需要做的就是在<code>RAM</code>使用率达到100%之前就给<code>KILL</code>或者设置一个阈值，当使用率达到阈值的时候发邮件通知正在跑程序的用户来及时的关闭正在执行的程序。为了安全问题，我这边没有设置自动<code>KILL</code>的方式，因为<code>KILL</code>别人启动的线程需要root权限。所以为了安全起见，还是通知用户自己去关闭的比较好。</p><h2 id="Psutil"><a href="#Psutil" class="headerlink" title="Psutil"></a>Psutil</h2><p>psutil是一个Python模块用来获取正在运行的进程信息和系统的CPU和内存的利用率。 类似Linux的ps、top和Windows的任务管理器等程序。可以通过少量的代码来实现服务器资源的监控。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>因为是python的库，所以直接使用<code>pip3</code>来安装就行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install psutil</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取CPU核心数，逻辑上的数量</span></span><br><span class="line">psutil.cpu_count()</span><br><span class="line"><span class="comment"># 获取CPU实际的核心数</span></span><br><span class="line">psutil.cpu_count(logical=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 获取CPU一秒内的使用率</span></span><br><span class="line">psutil.cpu_percent(interval=<span class="number">1</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>psutil</code>还可以获取网络，磁盘，线程，内存等等的信息。感兴趣的可以去查一下。</p><h2 id="线程监控"><a href="#线程监控" class="headerlink" title="线程监控"></a>线程监控</h2><p>首先我们需要对所有的线程进行监控。监控的内容包括，线程的<code>pid</code>, <code>name</code>, <code>username</code>, <code>vms</code> 以及运行时间（<code>times</code>）等等。对<code>vms</code>和时间的要求如下：</p><blockquote><ol><li><code>vms</code>使用率不超过95%</li><li><code>times</code>不超过24小时</li></ol></blockquote><p><code>vms</code>的使用率很好算，直接通过简单的计算就能得到结果。但是程序运行的时间需要调用<code>datetime</code>的库进行运算。程序实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">TIMELIMIT = <span class="number">24</span> * <span class="number">3600</span></span><br><span class="line">MEMLIMIT = xx</span><br><span class="line"></span><br><span class="line">users = &#123;</span><br><span class="line">    <span class="string">'user1'</span>: <span class="string">'email@email.com'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> proc <span class="keyword">in</span> psutil.process_iter():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        proc_info = proc.as_dict(attrs=[<span class="string">"pid"</span>, <span class="string">"name"</span>, <span class="string">"username"</span>])</span><br><span class="line">        proc_info[<span class="string">"vms"</span>] = proc.memory_info().rss / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">        ct = datetime.datetime.fromtimestamp(proc.create_time())</span><br><span class="line">        nt = datetime.datetime.now()</span><br><span class="line">        diff = nt - ct</span><br><span class="line">        proc_info[<span class="string">"times"</span>] = diff.total_seconds()</span><br><span class="line">44</span><br><span class="line">        <span class="comment"># avoid the root process</span></span><br><span class="line">        <span class="keyword">if</span> proc_info[<span class="string">"username"</span>] <span class="keyword">not</span> <span class="keyword">in</span> users:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># avoid the useless process</span></span><br><span class="line">        <span class="keyword">if</span> proc_info[<span class="string">"name"</span>] <span class="keyword">in</span> [<span class="string">"zsh"</span>, <span class="string">"screen"</span>, <span class="string">"systemd"</span>, <span class="string">"sshd"</span>]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># running time</span></span><br><span class="line">        <span class="keyword">if</span> proc_info[<span class="string">"times"</span>] &gt;= TIMELIMIT:</span><br><span class="line">             <span class="comment"># send email or other notice</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># ram usage</span></span><br><span class="line">        <span class="keyword">if</span> proc_info[<span class="string">"vms"</span>] &gt;= MEMLIMIT:</span><br><span class="line">            <span class="comment"># send email or other notice</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>发邮件的方法可以参考<code>smtplib</code>库。</p><h2 id="服务器监控"><a href="#服务器监控" class="headerlink" title="服务器监控"></a>服务器监控</h2><p>我们不仅需要对线程进行监控，我们还需要对服务器整体状态进行监控，这个比较简单。程序如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">MINMEM = <span class="number">4</span> <span class="comment"># 4GB</span></span><br><span class="line">MAXCPU = <span class="number">97</span> <span class="comment"># 97%</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_server_mem</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    check the server free memory</span></span><br><span class="line"><span class="string">    @return: True if mempry free is not enough</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    mem = psutil.virtual_memory()</span><br><span class="line">    free = float(mem.free) / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> free &gt; MINMEM:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_server_cpu</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    check the server cpu usage</span></span><br><span class="line"><span class="string">    @return: True if the cpu usage more than MAX</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    cpu = psutil.cpu_percent(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cpu &gt;= MAXCPU:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>检测到服务器没有足够多的内存的时候我们可以强制停止正在运行的进程，避免宕机的存在。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>我们可以通过使用<code>schedule</code>库来进行一个周期执行程序。比如我们可以每10分钟检查一次服务器的状态，每10个小时检查一下进程的运行时间等等。比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> schedule</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_process</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    checking the running process</span></span><br><span class="line"><span class="string">    @return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_server</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    checking the server</span></span><br><span class="line"><span class="string">    @return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    check_server_mem()</span><br><span class="line">    check_server_cpu()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    schedule.every(<span class="number">10</span>).minutes.do(check_server)</span><br><span class="line">    schedule.every(<span class="number">11</span>).hours.do(check_process)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        schedule.run_pending()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>在程序休眠的时候是不占用CPU资源的，所以大家不用担心改程序会占用太多资源，并且这个程序可以在几秒内完成检查，对CPU的使用基本可以忽略不记。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Server-Monitoring-Scripts&quot;&gt;&lt;a href=&quot;#Server-Monitoring-Scripts&quot; class=&quot;headerlink&quot; title=&quot;Server Monitoring Scripts&quot;&gt;&lt;/a&gt;Server Moni
      
    
    </summary>
    
    
      <category term="Server" scheme="https://shunyangli.github.io/categories/Server/"/>
    
    
      <category term="Server" scheme="https://shunyangli.github.io/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>Flink Gelly</title>
    <link href="https://shunyangli.github.io/post/a496/"/>
    <id>https://shunyangli.github.io/post/a496/</id>
    <published>2022-08-27T13:05:38.000Z</published>
    <updated>2022-09-01T11:16:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flink-Gelly"><a href="#Flink-Gelly" class="headerlink" title="Flink Gelly"></a>Flink Gelly</h1><p>Gelly is Flink’s Graph API. It contains a set of methods and utilities designed to simplify the development of graph analysis applications in Flink. In Gelly, graphs can be converted and modified using advanced functions similar to those provided by the batch API. gelly provides methods for creating, converting and modifying graphs, as well as a library of graph algorithms.</p><h1 id="Load-Graph"><a href="#Load-Graph" class="headerlink" title="Load Graph"></a>Load Graph</h1><p>In Gelly, a <code>Graph</code> is consist of <code>DataSet</code> vertices and <code>DataSet</code> Edges. <code>Vertex</code> is implement based on <code>Tuple2</code>. <code>Edge</code> is implement based on <code>Tuple3</code>. A <code>Vertex</code> is defined by a unique ID and a value. Vertex IDs should implement the Comparable interface. Vertices without value can be represented by setting the value type to NullValue. An <code>Edge</code> is defined by a source ID (the ID of the source Vertex), a target ID (the ID of the target Vertex) and an optional value. The source and target IDs should be of the same type as the Vertex IDs. Edges with no value have a NullValue value type. (<a href="https://nightlies.apache.org/flink/flink-docs-release-1.15/docs/libs/gelly/graph_api/" target="_blank" rel="noopener">https://nightlies.apache.org/flink/flink-docs-release-1.15/docs/libs/gelly/graph_api/</a>).</p><p><code>Graph</code> can be loaded based on <code>DataSet&lt;Vertex&lt;K, VV&gt;&gt;</code> or <code>fromTupleDataSet</code>. To make it easier and faster to load graphs, we can use <code>csv</code> file to load the graph.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">Graph&lt;Long, Long, Long&gt; graph = Graph.fromCsvReader(<span class="string">"data\\taro.v"</span>, <span class="string">"data\\taro.e"</span>, env)</span><br><span class="line">                .types(Long.class, Long.class, Long.class);</span><br></pre></td></tr></table></figure><p>The data graph format shown below.</p><p>For vertices file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1,1</span><br><span class="line">2,2</span><br><span class="line">3,3</span><br><span class="line">4,4</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>For edges file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1,2,0</span><br><span class="line">1,3,0</span><br><span class="line">1,4,0</span><br><span class="line">2,3,0</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>When load the graph with generic type. For example, use <code>fatMap</code> to load the graph. It is possible that you may encounter the following problems:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.apache.flink.api.common.functions.InvalidTypesException: Type of TypeVariable <span class="string">'K'</span> in <span class="string">'class org.dkr.graph.io.utils.VertexSplitter'</span> could not be determined. This is most likely a type erasure problem. <span class="function">The type extraction currently supports types with generic variables only in cases where all variables in the return type can be deduced from the input <span class="title">type</span><span class="params">(s)</span>. Otherwise the type has to be specified explicitly using type information.</span></span><br></pre></td></tr></table></figure><p>When this problem is encountered, it can be solved by declaring the return data type. For example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DataSet&lt;Tuple2&lt;K, VV&gt;&gt; vertices = data</span><br><span class="line">        .flatMap(<span class="keyword">new</span> FlatMapFunction())</span><br><span class="line">        .returns(Types.TUPLE(TypeInformation.of(dataType), TypeInformation.of(dataType)))</span><br></pre></td></tr></table></figure><p>Another weird issue is that if you use <code>Edge&lt;K, EV&gt;</code> to load edges data, you only have two data types inside your Edge Object (vertex ID type and edge value type). This problem cannot be solved by using <code>returns</code> function. This issue will cause some functions to be unusable, such as <code>graph.inDegrees()</code>. <strong>You can use Tuple&lt;K, K, EV&gt; instead of Edge&lt;K, EV&gt; to solve this issue.</strong> </p><h1 id="Basic-Graph-Algorithms"><a href="#Basic-Graph-Algorithms" class="headerlink" title="Basic Graph Algorithms"></a>Basic Graph Algorithms</h1><h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><p>There are two approaches two deisgn the <code>BFS</code> algorithm in <code>Gelly</code>. We can use <code>runVertexCentricIteration</code> or <code>runScatterGatherIteration</code>. </p><h3 id="runVertexCentricIteration-Approach"><a href="#runVertexCentricIteration-Approach" class="headerlink" title="runVertexCentricIteration Approach:"></a><code>runVertexCentricIteration</code> Approach:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.MapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.Edge;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.Graph;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.Vertex;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.pregel.ComputeFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.pregel.MessageCombiner;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.pregel.MessageIterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BFS</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long src = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> maxInteractions = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BFSV</span><span class="params">(<span class="keyword">int</span> maxInteractions, Long src)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.src = src;</span><br><span class="line">        <span class="keyword">this</span>.maxInteractions = maxInteractions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Graph&lt;Long, Long, Long&gt; <span class="title">run</span><span class="params">(Graph&lt;Long, Long, Long&gt; graph)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> graph</span><br><span class="line">                .mapVertices(<span class="keyword">new</span> InitVertex(<span class="keyword">this</span>.src))</span><br><span class="line">                .runVertexCentricIteration(<span class="keyword">new</span> VertexComputeFunction(<span class="keyword">this</span>.src), <span class="keyword">new</span> VertexValueCombiner(), <span class="keyword">this</span>.maxInteractions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">InitVertex</span> <span class="keyword">implements</span> <span class="title">MapFunction</span>&lt;<span class="title">Vertex</span>&lt;<span class="title">Long</span>, <span class="title">Long</span>&gt;, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Long src;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InitVertex</span><span class="params">(Long src)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.src = src;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Long <span class="title">map</span><span class="params">(Vertex&lt;Long, Long&gt; value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (value.getId().equals(<span class="keyword">this</span>.src)) <span class="keyword">return</span> <span class="number">1L</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * send message and update the values.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">VertexComputeFunction</span> <span class="keyword">extends</span> <span class="title">ComputeFunction</span>&lt;<span class="title">Long</span>, <span class="title">Long</span>, <span class="title">Long</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Long src;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">VertexComputeFunction</span><span class="params">(Long src)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.src = src;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">(Vertex&lt;Long, Long&gt; vertex, MessageIterator&lt;Long&gt; messages)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (vertex.getId().equals(<span class="keyword">this</span>.src)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Edge&lt;Long, Long&gt; edge : getEdges()) &#123;</span><br><span class="line">                    sendMessageTo(edge.getTarget(), vertex.getValue() + <span class="number">1L</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                Long minDistance =  Long.MAX_VALUE;</span><br><span class="line">                <span class="keyword">for</span> (Long msg : messages) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (msg &lt; minDistance) &#123;</span><br><span class="line">                        minDistance = msg;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// does not receive any new values</span></span><br><span class="line">                <span class="keyword">if</span> (minDistance == Long.MAX_VALUE) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (vertex.getValue() &gt; minDistance || vertex.getValue() == <span class="number">0L</span>) &#123;</span><br><span class="line">                    setNewVertexValue(minDistance);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (Edge&lt;Long, Long&gt; edge : getEdges()) &#123;</span><br><span class="line">                        <span class="comment">// can not use vertex value to update.</span></span><br><span class="line">                        sendMessageTo(edge.getTarget(), minDistance + <span class="number">1L</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * combiner for vertex's message, choose the smallest one</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">VertexValueCombiner</span> <span class="keyword">extends</span> <span class="title">MessageCombiner</span>&lt;<span class="title">Long</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">combineMessages</span><span class="params">(MessageIterator&lt;Long&gt; messages)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            Long minDistance = Long.MAX_VALUE;</span><br><span class="line">            <span class="keyword">for</span> (Long msg : messages) &#123;</span><br><span class="line">                <span class="keyword">if</span> (msg &lt; minDistance) &#123;</span><br><span class="line">                    minDistance = msg;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sendCombinedMessage(minDistance);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="runScatterGatherIteration-Approach"><a href="#runScatterGatherIteration-Approach" class="headerlink" title="runScatterGatherIteration Approach:"></a><code>runScatterGatherIteration</code> Approach:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.MapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.Edge;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.Graph;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.Vertex;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.spargel.GatherFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.spargel.MessageIterator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.spargel.ScatterFunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BFS</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long src = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> maxInteractions = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> maxInteractions, Long src)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.src = src;</span><br><span class="line">        <span class="keyword">this</span>.maxInteractions = maxInteractions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * return a new graph with the bfs traversal order</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> graph input data graph</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a new graph</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Graph&lt;Long, Long, Long&gt; <span class="title">run</span><span class="params">(Graph&lt;Long, Long, Long&gt; graph)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> graph</span><br><span class="line">                .mapVertices(<span class="keyword">new</span> InitVertex(<span class="keyword">this</span>.src))</span><br><span class="line">                .runScatterGatherIteration(<span class="keyword">new</span> MapOrderMessenger(), <span class="keyword">new</span> VertexOrderUpdater(), <span class="keyword">this</span>.maxInteractions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * init the vertex value, the vertex value present the traversal order</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">InitVertex</span> <span class="keyword">implements</span> <span class="title">MapFunction</span>&lt;<span class="title">Vertex</span>&lt;<span class="title">Long</span>, <span class="title">Long</span>&gt;, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Long src;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InitVertex</span><span class="params">(Long src)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.src = src;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Long <span class="title">map</span><span class="params">(Vertex&lt;Long, Long&gt; value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (value.getId().equals(<span class="keyword">this</span>.src)) <span class="keyword">return</span> <span class="number">1L</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * traversal the vertex, if it has been visited, then send the traversal order to its neighbor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MapOrderMessenger</span> <span class="keyword">extends</span> <span class="title">ScatterFunction</span>&lt;<span class="title">Long</span>, <span class="title">Long</span>, <span class="title">Long</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessages</span><span class="params">(Vertex&lt;Long, Long&gt; vertex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (vertex.getValue() &gt; <span class="number">0L</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Edge&lt;Long, Long&gt; edge : getEdges()) &#123;</span><br><span class="line">                    sendMessageTo(edge.getTarget(), vertex.getValue() + <span class="number">1L</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * based on the received message, then update the vertex value</span></span><br><span class="line"><span class="comment">     * since the processing is parallel, the received value can be multiple time, choose the smallest one</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">VertexOrderUpdater</span> <span class="keyword">extends</span> <span class="title">GatherFunction</span>&lt;<span class="title">Long</span>, <span class="title">Long</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateVertex</span><span class="params">(Vertex&lt;Long, Long&gt; vertex, MessageIterator&lt;Long&gt; inMessages)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">            Long minDistance = Long.MAX_VALUE;</span><br><span class="line">            <span class="keyword">for</span> (Long msg : inMessages) &#123;</span><br><span class="line">                <span class="keyword">if</span> (msg &lt; minDistance) &#123;</span><br><span class="line">                    minDistance = msg;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (vertex.getValue() &gt; minDistance || vertex.getValue() == <span class="number">0L</span>) &#123;</span><br><span class="line">                setNewVertexValue(minDistance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For the usage of these functions, please refer to <a href="https://nightlies.apache.org/flink/flink-docs-release-1.15/docs/libs/gelly/iterative_graph_processing/" target="_blank" rel="noopener">doc</a></p><h2 id="K-core-Decomposition"><a href="#K-core-Decomposition" class="headerlink" title="K-core Decomposition"></a>K-core Decomposition</h2><blockquote><p>A k-core of G can therefore be obtained by recursively removing all the vertices of degree less than k, until<br>all vertices in the remaining graph have at least degree k (<a href="https://hal.archives-ouvertes.fr/hal-00004807v2/document" target="_blank" rel="noopener">https://hal.archives-ouvertes.fr/hal-00004807v2/document</a>)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.FilterFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.Edge;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.Graph;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.Vertex;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.VertexJoinFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.spargel.GatherFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.spargel.MessageIterator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.spargel.ScatterFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.types.LongValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KCore</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Long k;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> maxInteractions = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KCore</span><span class="params">(<span class="keyword">int</span> maxInteractions, Long k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.k = k;</span><br><span class="line">        <span class="keyword">this</span>.maxInteractions = maxInteractions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Graph&lt;Long, Long, Long&gt; <span class="title">run</span><span class="params">(Graph&lt;Long, Long, Long&gt; graph)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// set the new values</span></span><br><span class="line">        <span class="keyword">return</span> graph</span><br><span class="line">                .joinWithVertices(graph.inDegrees(), <span class="keyword">new</span> VertexUpdateFunction())</span><br><span class="line">                .runScatterGatherIteration(<span class="keyword">new</span> VertexDegreeMessenger(<span class="keyword">this</span>.k), <span class="keyword">new</span> VertexDegreeUpdater(), <span class="keyword">this</span>.maxInteractions)</span><br><span class="line">                .filterOnVertices(<span class="keyword">new</span> FilterFunction&lt;Vertex&lt;Long, Long&gt;&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(Vertex&lt;Long, Long&gt; value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> value.getValue() &gt; <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * based on the degree value to update the vertex value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">VertexUpdateFunction</span> <span class="keyword">implements</span> <span class="title">VertexJoinFunction</span>&lt;<span class="title">Long</span>, <span class="title">LongValue</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Long <span class="title">vertexJoin</span><span class="params">(Long vertexValue, LongValue inputValue)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Long.valueOf(String.valueOf(inputValue));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * if the vertex value is less than k, then set the vertex value as 0</span></span><br><span class="line"><span class="comment">     * and the send the indicator to message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">VertexDegreeMessenger</span> <span class="keyword">extends</span> <span class="title">ScatterFunction</span>&lt;<span class="title">Long</span>, <span class="title">Long</span>, <span class="title">String</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Long k;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">VertexDegreeMessenger</span><span class="params">(Long k)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.k = k;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessages</span><span class="params">(Vertex&lt;Long, Long&gt; vertex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (vertex.getValue() &lt; <span class="keyword">this</span>.k) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Edge&lt;Long, Long&gt; edge : getEdges()) &#123;</span><br><span class="line">                    sendMessageTo(edge.getTarget(), vertex.getId() + <span class="string">" "</span> + edge.getTarget());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                sendMessageTo(vertex.getId(), <span class="string">"0"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * based on the received message, to check whether the degree has been updated</span></span><br><span class="line"><span class="comment">     * if not updated, then update the degree by minus 1. if the status is 0, then set the degree as 0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">VertexDegreeUpdater</span> <span class="keyword">extends</span> <span class="title">GatherFunction</span>&lt;<span class="title">Long</span>, <span class="title">Long</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String, Boolean&gt; map;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">VertexDegreeUpdater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateVertex</span><span class="params">(Vertex&lt;Long, Long&gt; vertex, MessageIterator&lt;String&gt; inMessages)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (String msg : inMessages) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(msg, <span class="string">"0"</span>)) &#123;</span><br><span class="line">                    setNewVertexValue(<span class="number">0L</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (map.containsKey(msg)) <span class="keyword">continue</span>;</span><br><span class="line">                map.put(msg, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">                setNewVertexValue(vertex.getValue() - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Connected-Component"><a href="#Connected-Component" class="headerlink" title="Connected Component"></a>Connected Component</h2><p>Connected component detection in Flink Gelly:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.FilterFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.MapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.Edge;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.Graph;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.Vertex;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.spargel.GatherFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.spargel.MessageIterator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.spargel.ScatterFunction;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Connected component detection</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CC</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxInteractions = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CC</span><span class="params">(<span class="keyword">int</span> maxInteractions)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxInteractions = maxInteractions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Graph&lt;Long, Long, Long&gt; <span class="title">run</span><span class="params">(Graph&lt;Long, Long, Long&gt; graph)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> graph</span><br><span class="line">                .mapVertices(<span class="keyword">new</span> InitVertex())</span><br><span class="line">                .runScatterGatherIteration(</span><br><span class="line">                        <span class="keyword">new</span> MapOrderMessenger(),</span><br><span class="line">                        <span class="keyword">new</span> VertexOrderUpdater(),</span><br><span class="line">                        <span class="keyword">this</span>.maxInteractions);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">InitVertex</span> <span class="keyword">implements</span> <span class="title">MapFunction</span>&lt;<span class="title">Vertex</span>&lt;<span class="title">Long</span>, <span class="title">Long</span>&gt;, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Long <span class="title">map</span><span class="params">(Vertex&lt;Long, Long&gt; value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * the first visited vertex id will be the root of the connect component</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MapOrderMessenger</span> <span class="keyword">extends</span> <span class="title">ScatterFunction</span>&lt;<span class="title">Long</span>, <span class="title">Long</span>, <span class="title">Long</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessages</span><span class="params">(Vertex&lt;Long, Long&gt; vertex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (Edge&lt;Long, Long&gt; edge : getEdges()) &#123;</span><br><span class="line">                sendMessageTo(edge.getTarget(), vertex.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">            sendMessageTo(vertex.getId(), vertex.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * choose the root of the connect component</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">VertexOrderUpdater</span> <span class="keyword">extends</span> <span class="title">GatherFunction</span>&lt;<span class="title">Long</span>, <span class="title">Long</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateVertex</span><span class="params">(Vertex&lt;Long, Long&gt; vertex, MessageIterator&lt;Long&gt; inMessages)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">            Long minDistance = Long.MAX_VALUE;</span><br><span class="line">            <span class="keyword">for</span> (Long msg : inMessages) &#123;</span><br><span class="line">                <span class="keyword">if</span> (msg &lt; minDistance) &#123;</span><br><span class="line">                    minDistance = msg;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (vertex.getValue() &gt; minDistance || vertex.getValue() == <span class="number">0L</span>) &#123;</span><br><span class="line">                setNewVertexValue(minDistance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Single-Source-Shortest-Path"><a href="#Single-Source-Shortest-Path" class="headerlink" title="Single Source Shortest Path"></a>Single Source Shortest Path</h2><p>Given a source vertex, find the shortest path to its neighbor:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.FilterFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.MapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.Edge;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.Graph;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.Vertex;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.spargel.GatherFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.spargel.MessageIterator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.graph.spargel.ScatterFunction;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * single source shortest path</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SSSP</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxInteractions = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> Long src = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SSSP</span><span class="params">(<span class="keyword">int</span> maxInteractions, Long src)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.src = src;</span><br><span class="line">        <span class="keyword">this</span>.maxInteractions = maxInteractions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Graph&lt;Long, Long, Long&gt; <span class="title">run</span><span class="params">(Graph&lt;Long, Long, Long&gt; graph)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> graph</span><br><span class="line">                .mapVertices(<span class="keyword">new</span> InitVertex(<span class="keyword">this</span>.src))</span><br><span class="line">                .runScatterGatherIteration(</span><br><span class="line">                        <span class="keyword">new</span> MapOrderMessenger(),</span><br><span class="line">                        <span class="keyword">new</span> VertexOrderUpdater(),</span><br><span class="line">                        <span class="keyword">this</span>.maxInteractions)</span><br><span class="line">                .filterOnVertices(<span class="keyword">new</span> FilterFunction&lt;Vertex&lt;Long, Long&gt;&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(Vertex&lt;Long, Long&gt; value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> value.getValue() != Long.MAX_VALUE;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">InitVertex</span> <span class="keyword">implements</span> <span class="title">MapFunction</span>&lt;<span class="title">Vertex</span>&lt;<span class="title">Long</span>, <span class="title">Long</span>&gt;, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Long src;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InitVertex</span><span class="params">(Long src)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.src = src;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Long <span class="title">map</span><span class="params">(Vertex&lt;Long, Long&gt; value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (value.getId().equals(<span class="keyword">this</span>.src)) <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">            <span class="keyword">return</span> Long.MAX_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MapOrderMessenger</span> <span class="keyword">extends</span> <span class="title">ScatterFunction</span>&lt;<span class="title">Long</span>, <span class="title">Long</span>, <span class="title">Long</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessages</span><span class="params">(Vertex&lt;Long, Long&gt; vertex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (vertex.getValue() != Long.MAX_VALUE) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Edge&lt;Long, Long&gt; edge : getEdges()) &#123;</span><br><span class="line">                    sendMessageTo(edge.getTarget(), vertex.getValue() + edge.getValue());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * choose the root of the connect component</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">VertexOrderUpdater</span> <span class="keyword">extends</span> <span class="title">GatherFunction</span>&lt;<span class="title">Long</span>, <span class="title">Long</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateVertex</span><span class="params">(Vertex&lt;Long, Long&gt; vertex, MessageIterator&lt;Long&gt; inMessages)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">            Long minDistance = Long.MAX_VALUE;</span><br><span class="line">            <span class="keyword">for</span> (Long msg : inMessages) &#123;</span><br><span class="line">                <span class="keyword">if</span> (msg &lt; minDistance) &#123;</span><br><span class="line">                    minDistance = msg;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (vertex.getValue() &gt; minDistance) &#123;</span><br><span class="line">                setNewVertexValue(minDistance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Flink-Gelly&quot;&gt;&lt;a href=&quot;#Flink-Gelly&quot; class=&quot;headerlink&quot; title=&quot;Flink Gelly&quot;&gt;&lt;/a&gt;Flink Gelly&lt;/h1&gt;&lt;p&gt;Gelly is Flink’s Graph API. It con
      
    
    </summary>
    
    
    
      <category term="Distributed" scheme="https://shunyangli.github.io/tags/Distributed/"/>
    
  </entry>
  
  <entry>
    <title>Flask API</title>
    <link href="https://shunyangli.github.io/post/30e4/"/>
    <id>https://shunyangli.github.io/post/30e4/</id>
    <published>2022-07-20T10:08:04.000Z</published>
    <updated>2022-07-20T10:17:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask-API"><a href="#Flask-API" class="headerlink" title="Flask API"></a>Flask API</h1><p>给大家分享一下<code>flask api</code> 和 <a href="https://flask-restful.readthedocs.io/en/latest/" target="_blank" rel="noopener">Flask-RESTful API </a> 的两种不同用法。。首先API只会返回json的类型，不会返回HTML。API一般适用于前后端分离的情况。Flask API的实现方式有两种。第一种就是不用<code>flask_restplus</code>。第二种是用<code>flask_restplus</code>。首先给大家说一下不用<code>flask_restplus</code>怎么写。</p><h2 id="不使用-flask-restplus"><a href="#不使用-flask-restplus" class="headerlink" title="不使用 flask_restplus"></a>不使用 flask_restplus</h2><p>在不适用<code>flask_restplus</code>的情况下我们可以直接使用route的形式来写API。只是把<code>return render_template</code>改成了<code>return jsonify</code> 来返回一个json类型的数据。可以根据不同的request的方式(GET, POST, DELETE)可以处理不同的事情，比如DELETE可以用来删除数据， POST可以添加数据，GET可以获取数据。具体实现方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># SECRET_KEY 可以设置为任意的string</span></span><br><span class="line">app.config[<span class="string">"SECRET_KEY"</span>] = <span class="string">"WHATEVER"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index', methods=["POST","GET","DELETE"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"GET"</span>:</span><br><span class="line">        username = request.args.get(<span class="string">"username"</span>)</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">"GET"</span>: username&#125;)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        username = request.args.get(<span class="string">"username"</span>)</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">"POST"</span>: username&#125;)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"DELETE"</span>:</span><br><span class="line">        username = request.args.get(<span class="string">"username"</span>)</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">"DELETE"</span>: username&#125;)</span><br><span class="line"></span><br><span class="line">app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>GET 请求测试如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET "http://127.0.0.1:5000/index?username=admin" -H "accept: application/json"</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"GET"</span>: <span class="string">"admin"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>POST 请求测试如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST "http://127.0.0.1:5000/index?username=admin" -H "accept: application/json"</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"POST"</span>: <span class="string">"admin"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DELETE 请求测试如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X DELETE "http://127.0.0.1:5000/index?username=admin" -H "accept: application/json"</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"DELETE"</span>: <span class="string">"admin"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用flask-restplus"><a href="#使用flask-restplus" class="headerlink" title="使用flask_restplus"></a>使用flask_restplus</h2><p>Flask-RESTful 提供了 reqparse 一种类似 argparse 参数解析机制以简化参数处理。所以处理请求数据的时候和Flask不太一样。<code>parser = reqparse.RequestParser():</code> reqparse使用RequestParser() 可以从 flask.Request.values，以及 flask.Request.json 解析值。这里创建了一个解析对象parser。<code>parser.add_argument(&#39;task&#39;)：</code>向parser对象中添加你要关注的命令行参数和选项，每一个add_argument方法对应一个你要关注的参数或选项。<code>parser.parse_args()：</code>调用parse_args()方法进行解析，解析成功之后即可使用。<code>POST, GET, DELETE</code>获取参数的方式一样。在定义API的时候可以是用<code>@api.param</code>添加参数，在web端测试的时候比较方便。<code>@app.doc(description=&#39;xx&#39;)</code>添加对这个API的描述。<code>@app.response(200,&#39;success&#39;)</code>定义路由code的信息，普遍是用的是200，404，400，403等等。</p><p>我发现最近flask的版本稳定性很差，尤其是<code>werkzeug</code>和flask之间的版本冲突，大家最好用虚拟机进行测试实验比较好。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, make_response, request</span><br><span class="line"><span class="keyword">from</span> flask_restplus <span class="keyword">import</span> Api, reqparse, abort, Resource</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">api = Api(app)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = <span class="string">'WHATEVER'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@api.route('/login')</span></span><br><span class="line"><span class="meta">@api.param('username')</span></span><br><span class="line"><span class="meta">@api.doc(description="This is test")</span></span><br><span class="line"><span class="meta">@api.response(200, 'Success')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span><span class="params">(Resource)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">()</span>:</span></span><br><span class="line">        parser = reqparse.RequestParser()</span><br><span class="line">        parser.add_argument(<span class="string">'username'</span>, type=str)</span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        username = args.get(<span class="string">"username"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果结果正确可以直接make_response</span></span><br><span class="line">        <span class="comment"># 如果不正确可以用abort</span></span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">"admin"</span>:</span><br><span class="line">            <span class="keyword">return</span> make_response(jsonify(&#123;<span class="string">"POST"</span>: username&#125;),<span class="number">200</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            abort(<span class="number">400</span>, <span class="string">"username not currect"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">()</span>:</span></span><br><span class="line">        parser = reqparse.RequestParser()</span><br><span class="line">        parser.add_argument(<span class="string">'username'</span>, type=str)</span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        username = args.get(<span class="string">"username"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">"admin"</span>:</span><br><span class="line">            <span class="keyword">return</span> make_response(jsonify(&#123;<span class="string">"GET"</span>: username&#125;),<span class="number">200</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            abort(<span class="number">400</span>, <span class="string">"username not currect"</span>)</span><br><span class="line"></span><br><span class="line">app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>GET 请求测试：</p><p>API的请求方法和flask不太一样，需要 <code>-d 加上参数</code>， POST请求也是一样</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET "http://127.0.0.1:5000/login" -H "accept: application/json" -d "username=admin"</span><br></pre></td></tr></table></figure><p>请求结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"GET"</span>: <span class="string">"admin"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>POST 请求测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST "http://127.0.0.1:5000/login" -H "accept: application/json" -d "username=admin"</span><br></pre></td></tr></table></figure><p>请求结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"POST"</span>: <span class="string">"admin"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给大家看一下<code>abort</code>的显示结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"username not currect"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者大家可以直接打开<code>http://127.0.0.1:5000</code>可以显示界面来测试。 如下图所示： </p><p><img src="/post/30e4/s.png" alt></p><h1 id="前端请求API"><a href="#前端请求API" class="headerlink" title="前端请求API"></a>前端请求API</h1><p>昨天写的太晚就先睡了，今天给补上怎么用<code>AJAX</code>也就是前端来请求API数据的。大家可以自行了解一下<code>AJAX</code>的function什么的，demo用的是<code>JQuery</code>中的<code>AJAX</code>。因为牵涉到了跨域请求，所以后端也稍微有一点改变。需要用到<code>flask_cors</code>来解决这个问题。只需要在上面的Python代码加两行代码就OK了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS</span><br><span class="line">...... <span class="comment"># 这些是初始化app部分</span></span><br><span class="line">CORS(app)</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>如果不加<code>CROS(app)</code>的话会在浏览器的调试<code>Console</code>出现以下报错：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access to XMLHttpRequest at <span class="string">'http://127.0.0.1:5000/login?username=admi'</span> <span class="keyword">from</span> origin <span class="string">'null'</span> has been blocked by CORS policy: No <span class="string">'Access-Control-Allow-Origin'</span> header is present on the requested resource.</span><br></pre></td></tr></table></figure><p>前端代码具体实现如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    $.ajax (&#123;</span></span><br><span class="line"><span class="javascript">        url: <span class="string">'http://127.0.0.1:5000/login'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            username: <span class="string">"admin"</span></span></span><br><span class="line">        &#125;, </span><br><span class="line"><span class="javascript">        error: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// data 包含了整个的错误信息</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// data.status 指的是返回的错误代码，比如400</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// data.responseJSON.message 指返回的错误信息， username not currect</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"ERROR: "</span>, data)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        type: <span class="string">"GET"</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><p>当我们有多个<code>api</code>功能需要实现，比如登录，注册等等。为了更好的区分每个功能之间的url，我们可以使用<code>api.namespace()</code>对不同功能创建不同的变量。比如我们需要实现注册，登录（验证模块）时我们可以使用<code>auth = api.namespace(&#39;auth&#39;, description=&quot;Authentication Services&quot;)</code>。同时为了能更加方便的在api提供的接口里面进行测试，我们可以对每个method进行声明<code>response</code>，<code>param</code> 或者<code>doc</code>等等。比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, make_response, request</span><br><span class="line"><span class="keyword">from</span> flask_restplus <span class="keyword">import</span> Api, reqparse, abort, Resource</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">api = Api(app)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = <span class="string">'WHATEVER'</span></span><br><span class="line"></span><br><span class="line">auth = api.namespace(<span class="string">'auth'</span>, description=<span class="string">"Authentication Services"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@auth.route("/login", strict_slashes=False)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span><span class="params">(Resource)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @auth.response(200, 'Success')</span></span><br><span class="line"><span class="meta">    @auth.response(400, 'Missing args')</span></span><br><span class="line"><span class="meta">    @auth.response(403, 'Not register')</span></span><br><span class="line"><span class="meta">    @auth.param('password', 'Password')</span></span><br><span class="line"><span class="meta">    @auth.param('username', 'Username')</span></span><br><span class="line"><span class="meta">    @auth.doc(description="Please enter username and password. "</span></span><br><span class="line">                          <span class="string">"If the username and password correct, a token will be returned"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        username = get_request_args(<span class="string">"username"</span>, str)</span><br><span class="line">        password = get_request_args(<span class="string">"password"</span>, str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> make_response(jsonify(username=username,password=password), <span class="number">200</span>)</span><br><span class="line">  </span><br><span class="line">app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>为了方便使用，我创造了一个公开的轻量级<a href="https://github.com/ShunyangLi/API-Template" target="_blank" rel="noopener">API模板</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Flask-API&quot;&gt;&lt;a href=&quot;#Flask-API&quot; class=&quot;headerlink&quot; title=&quot;Flask API&quot;&gt;&lt;/a&gt;Flask API&lt;/h1&gt;&lt;p&gt;给大家分享一下&lt;code&gt;flask api&lt;/code&gt; 和 &lt;a href=&quot;h
      
    
    </summary>
    
    
      <category term="Backend" scheme="https://shunyangli.github.io/categories/Backend/"/>
    
      <category term="API" scheme="https://shunyangli.github.io/categories/Backend/API/"/>
    
    
      <category term="Flask" scheme="https://shunyangli.github.io/tags/Flask/"/>
    
      <category term="API" scheme="https://shunyangli.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>Sliding Window</title>
    <link href="https://shunyangli.github.io/post/6284/"/>
    <id>https://shunyangli.github.io/post/6284/</id>
    <published>2022-07-07T10:35:03.000Z</published>
    <updated>2022-07-07T11:03:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>滑动窗口的核心在于hua（<del>划水的hua</del>）。滑动窗口有点类似动态规划，在一些区间内找到最优解，而且也有一点双指针的思想。滑动窗口可以用以解决数组/字符串的子元素问题，它可以将嵌套的循环问题，转换为单循环问题，降低时间复杂度。可以把比较常见的暴力解法$O(n^2)$降到$O(n)$。其实如果提升算法效率就大概率会牺牲空间，提升空间大概率牺牲时间。大部分情况两者不能兼得。leetcode有很多关于滑动窗口比较有趣的问题。</p><h2 id="76-Minimum-Window-Substring"><a href="#76-Minimum-Window-Substring" class="headerlink" title="76. Minimum Window Substring"></a>76. Minimum Window Substring</h2><p>Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string “”.</p><p>The testcases will be generated such that the answer is unique.</p><p>A substring is a contiguous sequence of characters within the string.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;</span><br><span class="line">Output: &quot;BANC&quot;</span><br><span class="line">Explanation: The minimum window substring &quot;BANC&quot; includes &apos;A&apos;, &apos;B&apos;, and &apos;C&apos; from string t.</span><br></pre></td></tr></table></figure><p>大致意思就是找到一个包含<code>t</code>的最小的子序列。这个问题可以使用最简单的暴力解法，双重循环就能解决，但是时间复杂度太高，这时候我们就可以通过滑动窗口来解决。滑动窗口一半是有左右两个指针来进行控制窗口的大小。右侧指针负责扩大窗口，左侧指针负责缩小窗口。右侧指针负责寻找到包含<code>t</code>的子序列，左侧指针负责对该子序列不断进行缩小直到找到最小包含<code>t</code>的子序列。</p><p><img src="/post/6284/1.png" alt></p><p>核心可以分成三部，如图所示。在第一步立马，<code>R</code>（右侧指针）先找到了满足需求的子序列，这时候<code>L</code>（左侧指针）开始减小窗口以便找到最小的子序列，当<code>L</code>指向<code>D</code>的时候该子序列不满足要求，然后<code>R</code>开始继续向右边移动来找到满足条件的子序列。当<code>R</code>指向<code>A</code>的时候，该子序列满足要求，然后<code>L</code>向右移动来缩小窗口大小。然后重复该步骤，直到找到最小的子序列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minWindow</span><span class="params">(self, s: str, t: str)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> len(s) &lt; len(t):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line">        target = &#123;&#125;</span><br><span class="line">        windows = &#123;&#125;</span><br><span class="line">        end = len(s)</span><br><span class="line">        start = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        tValid = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> val <span class="keyword">in</span> t:</span><br><span class="line">            target[val] = target.get(val, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> right &lt; len(s):</span><br><span class="line">            c = s[right]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> target:</span><br><span class="line">                right += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            windows[c] = windows.get(c, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> windows[c] == target[c]:</span><br><span class="line">                tValid += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># then left start to move</span></span><br><span class="line">            <span class="keyword">while</span> tValid == len(target):</span><br><span class="line">                lc = s[left]</span><br><span class="line">                <span class="keyword">if</span> lc <span class="keyword">not</span> <span class="keyword">in</span> target:</span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># remove the element from the window</span></span><br><span class="line">                windows[lc] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> windows[lc] &lt; target[lc]:</span><br><span class="line">                    tValid -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> right - left &lt; end:</span><br><span class="line">                        end = right - left + <span class="number">1</span></span><br><span class="line">                        start = left</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            right += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> start == <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        <span class="keyword">return</span> s[start:start + end]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;滑动窗口的核心在于hua（&lt;del&gt;划水的hua&lt;/del&gt;）。滑动窗口有点类似动态规划，在一些区间内找到最优解，而且也有一点双指针的思想。滑动窗口可以用以解决数组/字符串的子元素问题，它可以将嵌套的循环问题，转换为单循环问题，降低时间复杂度。可以把比较常见的暴力解法$O(
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://shunyangli.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://shunyangli.github.io/tags/leetcode/"/>
    
      <category term="algorithm" scheme="https://shunyangli.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>COMP9311 Extension</title>
    <link href="https://shunyangli.github.io/post/5fc4/"/>
    <id>https://shunyangli.github.io/post/5fc4/</id>
    <published>2022-06-17T23:52:21.000Z</published>
    <updated>2022-06-19T05:56:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="COMP9311-extension"><a href="#COMP9311-extension" class="headerlink" title="COMP9311 extension"></a>COMP9311 extension</h1><p>This is an extension knowledge about COMP9311</p><h2 id="Auto-deploy-PostgreSQL"><a href="#Auto-deploy-PostgreSQL" class="headerlink" title="Auto deploy PostgreSQL"></a>Auto deploy PostgreSQL</h2><p>You can find the shell script <a href="deploy.sh">here</a>. You can execute the following command in <code>grieg</code> server to deploy the SQL server.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod +x deploy.sh</span><br><span class="line"></span><br><span class="line">./deploy.sh</span><br></pre></td></tr></table></figure><p>The code in <code>deploy.sh</code> is:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">user=$(whoami)</span><br><span class="line"></span><br><span class="line">priv srvr</span><br><span class="line"></span><br><span class="line">~cs9311/bin/pginit</span><br><span class="line"></span><br><span class="line">echo "if [ \`hostname\` = \"grieg\" ]</span><br><span class="line">then</span><br><span class="line">    source /srvr/$user/env</span><br><span class="line">fi</span><br><span class="line">" &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure><h2 id="Backgroud-information"><a href="#Backgroud-information" class="headerlink" title="Backgroud information"></a>Backgroud information</h2><ul><li><code>grieg</code> means a server named grieg</li></ul><h2 id="Login-CSE-GRIEG"><a href="#Login-CSE-GRIEG" class="headerlink" title="Login CSE/GRIEG"></a>Login CSE/GRIEG</h2><p>You can log in to <code>cse</code> server by using the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh ZID@cse.unsw.edu.au</span><br></pre></td></tr></table></figure><p>PS: Please replace <code>ZID</code> with your zid, and the password is same as your zid passowrd (typing the password in terminal is <strong>unvisitable</strong>).</p><p>After log in to the <code>cse</code> server, then you can log in to <code>grieg</code> server by using the following command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh grieg</span><br></pre></td></tr></table></figure><p>Also, you can log in to <code>grieg</code> directly by using the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh ZID@grieg.cse.unsw.edu.au</span><br></pre></td></tr></table></figure><p>PS: Please replace <code>ZID</code> with your zid, and the password is same as your zid passowrd (typing the password in terminal is <strong>unvisitable</strong>).</p><h2 id="Log-in-to-cse-server-without-password"><a href="#Log-in-to-cse-server-without-password" class="headerlink" title="Log in to cse server without password"></a>Log in to <code>cse</code> server without password</h2><p>You can log in to <code>cse</code> server without password by uploading <code>ssh-key</code> into the server. If you did not have a <code>ssh-key</code>, you can generate a <code>ssh-key</code> by using the following command (please execute these commands in personal computer) :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>Then you can use <code>ssh-copy-id</code> to copy your key to server:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id ZID@cse.unsw.edu.au</span><br></pre></td></tr></table></figure><p>PS: Please replace <code>ZID</code> with your zid.</p><p>You can find more details <a href="https://www.ssh.com/ssh/copy-id" target="_blank" rel="noopener">here</a></p><h2 id="bash-profile-settings"><a href="#bash-profile-settings" class="headerlink" title=".bash_profile settings"></a>.bash_profile settings</h2><p>When you logging in to <code>cse</code> server, you may can not find these files (.bash_profile, .bashrc or .profile). You can use <code>touch</code> command to create a empty file in home directory.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~  // switch the directory into home directory</span><br><span class="line">touch .bash_profile</span><br></pre></td></tr></table></figure><p>Then you can find the <code>.bash_profile</code> file by using:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al</span><br></pre></td></tr></table></figure><p>Then you can add the following config code into <code>.bash_profile</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if [ `hostname` = "grieg" ]</span><br><span class="line">then</span><br><span class="line">    source /srvr/ZID/env</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>PS: Please replace <code>ZID</code> with your zid.</p><h2 id="Terminal-display"><a href="#Terminal-display" class="headerlink" title="Terminal display"></a>Terminal display</h2><p>Several students asked how to modify the Linux terminal display. After logging in to <code>grieg</code> server, on the left hand side it looks like:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grieg %</span><br></pre></td></tr></table></figure><p>It only shows the hostname which is very inconvenient when we want to know which folder we are in. The following commands can help you to solve the issue:</p><ol><li>Log in to <code>grieg</code> server</li><li>Add this line <code>export PS1=&quot;\u@\h \w $ &quot;</code> into the <code>.bash_profile</code> file</li><li>Execute <code>source ~/.bash_profile</code></li></ol><p>Then the terminal display should like:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZID@grieg ~ $</span><br></pre></td></tr></table></figure><p>Where <code>~</code> means home directory.</p><p>You can find more details <a href="https://www.thegeekstuff.com/2008/09/bash-shell-ps1-10-examples-to-make-your-linux-prompt-like-angelina-jolie/" target="_blank" rel="noopener">here</a></p><h2 id="Upload-files-to-cse-server"><a href="#Upload-files-to-cse-server" class="headerlink" title="Upload files to cse server"></a>Upload files to <code>cse</code> server</h2><p>Use <code>scp</code> (srcure copy) command can upload files/directory from local (Linux or Mac system) to remote <code>cse</code> server:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp [source file] [username]@[destination server]:/path/</span><br></pre></td></tr></table></figure><p>For example:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp schema.sql ZID@cse.unsw.edu.au:~</span><br></pre></td></tr></table></figure><p>Which means upload the <code>schema.sql</code> file into your <code>cse</code> server home directory.</p><p>If you want to upload a directory you can use:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r [source directory] [username]@[destination server]:/path/</span><br></pre></td></tr></table></figure><p>If you are using windows system, you can have a look <code>winscp</code>. And UNSW gives a <a href="https://taggi.cse.unsw.edu.au/FAQ/Accessing_Your_Files/" target="_blank" rel="noopener">guideline</a> about that</p><h2 id="SSH-config"><a href="#SSH-config" class="headerlink" title="SSH config"></a>SSH config</h2><p>After finished configuration of <em>log in without password. (section 1.3)</em>. You can config the ssh config file like:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host cse</span><br><span class="line">    HostName cse.unsw.edu.au</span><br><span class="line">    Port 22</span><br><span class="line">    User ZID</span><br></pre></td></tr></table></figure><p>Where <code>ZID</code> is your zid. Now, you can use <code>ssh cse</code> instead of <code>ssh zid@cse.unsw.edu.au</code>.</p><h1 id="Lab-02"><a href="#Lab-02" class="headerlink" title="Lab 02"></a>Lab 02</h1><p>The lab 02 slides is available <a href="https://docs.google.com/presentation/d/1nRCQGahTeVD0qvVuNeTMYEBgLvrqs-rvqKCjTJjMUOc/edit?usp=sharing" target="_blank" rel="noopener">here</a>, if you have any issues, please email me.</p><iframe src="lab02.pdf" style="width: 100%;height: 500px" title="COMP9311 Lab02"></iframe><h1 id="Lab03"><a href="#Lab03" class="headerlink" title="Lab03"></a>Lab03</h1><h2 id="Step-up"><a href="#Step-up" class="headerlink" title="Step up"></a>Step up</h2><ol><li><p>Download the <a href="https://www.cse.unsw.edu.au/~cs9311/21T1/lab/04/weblog.zip" target="_blank" rel="noopener">weblog.zip</a> by using <code>wget</code> command in the terminal: <code>wget https://www.cse.unsw.edu.au/~cs9311/21T1/lab/04/weblog.zip</code></p></li><li><p>Unzip the weblog.zip files: <code>unzip weblog.zip</code></p></li><li><p>Create a database for this lab: <code>createdb weblog</code></p></li><li><p>Load SQL file</p><ol><li><p>switch to the weblog directory: <code>cd weblog</code></p></li><li><p>load schema: <code>psql weblog -f schema.sql</code></p></li><li><p>load data sql file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">psql weblog -f Hosts.sql</span><br><span class="line">psql weblog -f Sessions.sql</span><br><span class="line">psql weblog -f Accesses.sql</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>Regex online test <a href="https://regexr.com" target="_blank" rel="noopener">regex</a></p><h1 id="K-Core-decomposition"><a href="#K-Core-decomposition" class="headerlink" title="K-Core decomposition"></a>K-Core decomposition</h1><p>Given a graph G, the k-core of G can be computed by recursively deleting every node and its adjacent edges if its degree is less than <code>k</code>.<br>The python code of k-core as shown in the following part.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">edges = &#123;</span><br><span class="line">    <span class="string">'a'</span>: [<span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>],</span><br><span class="line">    <span class="string">'b'</span>: [<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>],</span><br><span class="line">    <span class="string">'c'</span>: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>],</span><br><span class="line">    <span class="string">'d'</span>: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_k_core</span><span class="params">(k, edges)</span>:</span></span><br><span class="line">    deleted_nodes = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> edges:</span><br><span class="line">            <span class="keyword">if</span> len(edges[node]) &lt; k:</span><br><span class="line">                deleted_nodes.append(node)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> len(deleted_nodes) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> deleted_nodes:</span><br><span class="line">            <span class="keyword">if</span> u <span class="keyword">not</span> <span class="keyword">in</span> edges:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> v <span class="keyword">in</span> edges[u]:</span><br><span class="line">                edges[v].remove(u)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">del</span> edges[u]</span><br><span class="line">        deleted_nodes.clear()</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">", "</span>.join(edges.keys()))</span><br><span class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> edges:</span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> edges[u]:</span><br><span class="line">            print(<span class="string">"&#123;&#125;, &#123;&#125;"</span>.format(u,v))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    compute_k_core(<span class="number">2</span>, edges=copy.deepcopy(edges))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;COMP9311-extension&quot;&gt;&lt;a href=&quot;#COMP9311-extension&quot; class=&quot;headerlink&quot; title=&quot;COMP9311 extension&quot;&gt;&lt;/a&gt;COMP9311 extension&lt;/h1&gt;&lt;p&gt;This i
      
    
    </summary>
    
    
      <category term="COMP" scheme="https://shunyangli.github.io/categories/COMP/"/>
    
    
      <category term="COMP" scheme="https://shunyangli.github.io/tags/COMP/"/>
    
  </entry>
  
  <entry>
    <title>Entropy</title>
    <link href="https://shunyangli.github.io/post/663/"/>
    <id>https://shunyangli.github.io/post/663/</id>
    <published>2022-06-14T06:15:20.000Z</published>
    <updated>2022-06-14T06:41:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Entropy"><a href="#Entropy" class="headerlink" title="Entropy"></a>Entropy</h1><p>Entropy can be used as a measure of uncertainty in information theory.</p><p>Entropy <code>H(Y)</code> of a random <code>Y</code> with <code>n</code> different possible values:<br>$$<br>H(Y) =-\sum^{n}_{i=1}P(y_i)log_2P(y_i)<br>$$</p><p>Where $P(y_i)$ is the probaility that random variable <code>Y</code> equals $y_i$ (One of <code>n</code> different possible values of <code>Y</code>).</p><p><code>n</code> represents the number of types of outcomes, for example, if the outcome is 1, 2, 3 then n is 3. $P(y_i)$represents the probability of different outcomes, for example, if 1, 2, 3 then the probability of 1 is $1/3$.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><table><thead><tr><th align="center">$X_1$</th><th align="center">$X_2$</th><th align="center">Y</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">F</td><td align="center">T</td></tr><tr><td align="center">T</td><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">F</td><td align="center">F</td><td align="center">F</td></tr><tr><td align="center">F</td><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">T</td><td align="center">F</td><td align="center">F</td></tr></tbody></table><p>Y has two values: T and F. In the equation <code>n</code> = 2. Therefore, we can get:</p><p>$$<br>H(Y) =-\sum^{n}_{i=1}P(y_i)log_2P(y_i)<br>$$</p><p>$$<br>H(Y) =-\frac{3}{5}log_2\frac{3}{5}-\frac{2}{5}log_2\frac{2}{5} \approx0.292<br>$$</p><h2 id="Conditional-entropy"><a href="#Conditional-entropy" class="headerlink" title="Conditional entropy"></a>Conditional entropy</h2><p>Conditional entropy $H(Y|X=x_j)$ of <code>Y</code> given $X=x_i$.</p><p>$$<br>H(Y|X=x_j)=-\sum^{n}_{i=1}P(y_i|X=x_j)log_2P(y_i|X=x_j)<br>$$</p><p>After split we can get:</p><p>$$<br>H(Y|X)=\sum^{k}_{j=1}P(x_j)H(Y|X=x_j)<br>$$</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><table><thead><tr><th align="center">$X_1$</th><th align="center">$X_2$</th><th align="center">Y</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">F</td><td align="center">T</td></tr><tr><td align="center">T</td><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">F</td><td align="center">F</td><td align="center">F</td></tr><tr><td align="center">F</td><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">T</td><td align="center">F</td><td align="center">F</td></tr></tbody></table><p>Suppose we split the data based on the value of $X_1$. $X_1$ has two possible values: T and F. We can compute the conditional entropy for $X_1=T$ and $X_1=F$.</p><blockquote><p>Compute $X_1=T$</p></blockquote><table><thead><tr><th align="center">$X_1$</th><th align="center">Y</th></tr></thead><tbody><tr><td align="center"><em>T</em></td><td align="center"><em>T</em></td></tr><tr><td align="center"><em>T</em></td><td align="center"><em>T</em></td></tr><tr><td align="center"><em>T</em></td><td align="center"><em>F</em></td></tr><tr><td align="center">F</td><td align="center">T</td></tr><tr><td align="center">F</td><td align="center">F</td></tr></tbody></table><p>After splitting, when $X_1=T$, Y has two values. Therefore, $P(Y=T|X_1=T) = 2/3$ and $P(Y=F|X_1=T) = 2/3$.</p><p>We can jave the following entropy when $X_1=T$:</p><p>$$<br>H(Y|X_1=T)=-\sum^{n}_{i=1}P(y_i|X_1=T)log_2P(y_i|X_1=T)<br>$$</p><p>$$<br>H(Y|X_1=T)= -\frac{2}{3}log_2(\frac{2}{3})-\frac{1}{3}log_2(\frac{1}{3}) \approx 0.28<br>$$</p><blockquote><p>Compute $X_1=F$</p></blockquote><table><thead><tr><th align="center">$X_1$</th><th align="center">Y</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">T</td><td align="center">F</td></tr><tr><td align="center"><em>F</em></td><td align="center"><em>T</em></td></tr><tr><td align="center"><em>F</em></td><td align="center"><em>F</em></td></tr></tbody></table><p>After splitting, when $X_1=F$, Y has two values. Therefore, $P(Y=T|X_1=F) = 1/2$ and $P(Y=F|X_1=T) = 1/2$.</p><p>We can jave the following entropy when $X_1=F$:</p><p>$$<br>H(Y|X_1=T)=-\sum^{n}_{i=1}P(y_i|X_1=F)log_2P(y_i|X_1=F)<br>$$</p><p>$$<br>H(Y|X_1=T)=-\frac{1}{2}log_2(\frac{1}{2})-\frac{1}{2}log_2(\frac{1}{2}) \approx 0.3<br>$$</p><h3 id="Entropy-after-split"><a href="#Entropy-after-split" class="headerlink" title="Entropy after split"></a>Entropy after split</h3><table><thead><tr><th align="center">$X_1$</th><th align="center">Y</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">T</td><td align="center">F</td></tr><tr><td align="center">F</td><td align="center">T</td></tr><tr><td align="center">F</td><td align="center">F</td></tr></tbody></table><p>We get $P(X_1=T)=3/5$ and $P(X_1=F)=2/5$. We have the following overall conditional entropy:</p><p>$$<br>H(Y|X_1)=\frac{3}{5}<em>0.28+\frac{2}{5}</em>0.3=0.288<br>$$</p><h2 id="Information-Gain"><a href="#Information-Gain" class="headerlink" title="Information Gain"></a>Information Gain</h2><p>Information Gain $I(X,Y)$ is defined as the expected reduction in entropy of target varible Y after split over variable X.</p><p>$$<br>I(X,Y)=H(Y)-H(Y|X)<br>$$</p><p>In the previous example, we can get the infromation gain is:</p><p>$$<br>I(X_1,Y)=H(Y)-H(Y|X_1)=0.292-0.288\approx0.004<br>$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Entropy&quot;&gt;&lt;a href=&quot;#Entropy&quot; class=&quot;headerlink&quot; title=&quot;Entropy&quot;&gt;&lt;/a&gt;Entropy&lt;/h1&gt;&lt;p&gt;Entropy can be used as a measure of uncertainty in
      
    
    </summary>
    
    
      <category term="COMP" scheme="https://shunyangli.github.io/categories/COMP/"/>
    
    
      <category term="COMP" scheme="https://shunyangli.github.io/tags/COMP/"/>
    
  </entry>
  
  <entry>
    <title>Upload Large File</title>
    <link href="https://shunyangli.github.io/post/4707/"/>
    <id>https://shunyangli.github.io/post/4707/</id>
    <published>2022-04-30T14:30:48.000Z</published>
    <updated>2022-06-14T06:41:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>python实现大文件切片上传。有段时间没学习一下新东西了，最近偶尔在学习一下并行和分布式的东西。大文件上传的方式有点并行处理的那味道。所以就抽时间写了一点python实现大文件上传，代码写的比较简陋，大家感兴趣的可以自己实现一个。大部分上传文件其实是在前端实现的，但是原理都差不多，知道懂原理实现就很简单。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>文件上传这个需求在哪都有，网盘，上传各种文件等等。在文件比较大的时候有一些比较容易遇到的问题：</p><ol><li>超时。因为前端或者后端代理都有限制最长请求时间，一旦超时文件就没办法长上传成功。</li><li>大小限制。一般后端对上传文件大小会有一定限制。</li></ol><p>当然我们可以通过调整最大请求时间和大小限制来解决这个问题，但是会对服务器造成负载。上传失败重来这玩意有点头大。</p><h2 id="文件切片"><a href="#文件切片" class="headerlink" title="文件切片"></a>文件切片</h2><p>我们可以通过把文件切分成若干个小文件，并且把这些小文件并行的上传到后台，这样的话会节省大量的时间。当上传完成之后，后台会对这些若干个小文件进行合并。这个有点类似分布式（HDFS）的储存方法。</p><p>我们可以把文件读取成bytes格式，然后对这些bytes进行切片：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span><span class="params">(filename)</span>:</span></span><br><span class="line">    CHUNSIZE = <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line">    file_size = os.stat(filename).st_size</span><br><span class="line">    f = open(filename, <span class="string">'rb'</span>)</span><br><span class="line">    data = f.read()</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"file size: "</span>, file_size)</span><br><span class="line"></span><br><span class="line">    cursor = <span class="number">0</span></span><br><span class="line">    chunk_list = []</span><br><span class="line">    <span class="keyword">while</span> cursor &lt;= file_size:</span><br><span class="line">        chunk_list.append(data[cursor:cursor + CHUNSIZE]) </span><br><span class="line">        cursor = cursor + CHUNSIZE</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"chunk number: "</span>, len(chunk_list))</span><br></pre></td></tr></table></figure><p>我们可以根据网络状态，文件大小等因素来决定<code>CHUNSIZE</code>的大小。为了方便实现，我这里直接固定了切片的大小。在上传到后台的时候我们需要考虑切片文件的顺序，不然可能会导致文件发生错误，当然这个是后台需要实现的功能，可以稍后讨论。为了让资源得到充分利用我们可以使用多线程进行上传，如果是前端可以采用异步的方式。在这里我用的是<code>Thread</code>的方式实现多线程上传。</p><h2 id="文件合并"><a href="#文件合并" class="headerlink" title="文件合并"></a>文件合并</h2><p>文件合并常见的方式有：</p><ol><li>上传完所有的小文件之后发送一个请求来合并文件，请求的时候可以传递合并之后文件的名字。</li><li>后台记录切片的<code>index</code>，当达到末尾的时候自动合并。</li></ol><p>在这里我实现的是第一种方法（因为懒/(ㄒoㄒ)/~~）。</p><p>先简单介绍一个文件合并的原理，先把所有切分的文件根据bytes的格式读取，然后把这些读取的bytes按照顺序写入到新的文件中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'./xx.tar.bz2'</span>, <span class="string">'ab'</span>)</span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> chunk_list:</span><br><span class="line">    f.write(chunk)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>当把所有的文件都写入到文件之后就成功把这个文件合并了。注意：<code>ab</code>表示appending bytes。</p><h2 id="文件秒传"><a href="#文件秒传" class="headerlink" title="文件秒传"></a>文件秒传</h2><p>文件秒传是指如果后台已经有一个一样的文件，那么就没必要再次上传，直接返回上传成功即可。这个功能还是比较使用的，比如某盘的资源共享等等。</p><p>妙传的关键在于文件的唯一标识。我们可以根据文件的二进制编码进行计算hash值，用来当作文件的唯一标识。通常使用的算法是<code>md5</code>。对于<code>md5</code>算法，我们也有两种不同的方式去计算文件的hahs值。第一种是直接计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">f = open(filename, <span class="string">'rb'</span>).read()</span><br><span class="line">md5 = hashlib.md5(f)</span><br><span class="line">hash = md5.hexdigest()</span><br><span class="line">print(hash)</span><br></pre></td></tr></table></figure><p>第二种根据每行数据进行update hash值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> lines:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        md5.update(line)</span><br><span class="line">hash = md5.hexdigest()</span><br><span class="line">print(hash)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总体代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upload</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, filename, url, CHUNSIZE=<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">30</span>)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.filename = filename</span><br><span class="line">        self.url = url</span><br><span class="line">        self.md5 = <span class="string">""</span></span><br><span class="line">        self.chunk_list = []</span><br><span class="line">        self.CHUNSIZE = CHUNSIZE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">md5_small</span><span class="params">(self)</span>:</span></span><br><span class="line">        f = open(self.filename, <span class="string">'rb'</span>).read()</span><br><span class="line">        md5 = hashlib.md5(f)</span><br><span class="line">        self.md5 = md5.hexdigest()</span><br><span class="line">        print(md5.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">md5_large</span><span class="params">(self)</span>:</span></span><br><span class="line">        md5 = hashlib.md5()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> open(self.filename, <span class="string">'rb'</span>) <span class="keyword">as</span> lines:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">                md5.update(line)</span><br><span class="line">        </span><br><span class="line">        self.md5 = md5.hexdigest()</span><br><span class="line">        print(md5.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">split</span><span class="params">(self)</span>:</span></span><br><span class="line">        file_size = os.stat(self.filename).st_size</span><br><span class="line">        f = open(self.filename, <span class="string">'rb'</span>)</span><br><span class="line">        data = f.read()</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"file size: "</span>, file_size)</span><br><span class="line"></span><br><span class="line">        cursor = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> cursor &lt;= file_size:</span><br><span class="line">            self.chunk_list.append(data[cursor:cursor + self.CHUNSIZE]) </span><br><span class="line">            cursor = cursor + self.CHUNSIZE</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"chunk number: "</span>, len(self.chunk_list))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">async_upload</span><span class="params">(self, chunks, offset, filename=<span class="string">"upt"</span>)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> index, chunk <span class="keyword">in</span> enumerate(chunks):</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">'index'</span>: index + offset,</span><br><span class="line">                <span class="string">'chunk'</span>: chunk.decode(<span class="string">'latin-1'</span>),</span><br><span class="line">                <span class="string">'filename'</span>: filename</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            response = requests.get(</span><br><span class="line">                url=<span class="string">'&#123;&#125;/upload'</span>.format(self.url),</span><br><span class="line">                data=json.dumps(data),</span><br><span class="line">                headers = &#123;</span><br><span class="line">                    <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">                    <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            print(response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        merge is not belong to this part</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"path"</span>: <span class="string">"upt"</span>,</span><br><span class="line">            <span class="string">"filename"</span>: <span class="string">"xx.tar.bz2"</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.get(</span><br><span class="line">            url=<span class="string">'&#123;&#125;/merge'</span>.format(self.url),</span><br><span class="line">            data=json.dumps(data),</span><br><span class="line">            headers = &#123;</span><br><span class="line">                <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">                <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        print(response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">(self)</span>:</span></span><br><span class="line">        TREADNUM = <span class="number">3</span></span><br><span class="line">        CHUNKSIZE = len(self.chunk_list)</span><br><span class="line">        PERSIZE = int(CHUNKSIZE / TREADNUM)</span><br><span class="line">        threads = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, CHUNKSIZE, PERSIZE):</span><br><span class="line">            t = Thread(target=self.async_upload, args=[self.chunk_list[i : i + PERSIZE], i])</span><br><span class="line">            t.start()</span><br><span class="line">            threads.append(t)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">                <span class="keyword">if</span> t.is_alive():</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">"Finish"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    upload = Upload(<span class="string">'comp-books-master.zip'</span>, <span class="string">'http://127.0.0.1:5000'</span>)</span><br><span class="line">    upload.split()</span><br><span class="line">    upload.upload()</span><br><span class="line">    <span class="comment"># upload.merge()</span></span><br></pre></td></tr></table></figure><p>后台模拟代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">CURR = os.getcwd()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/upload', methods=["POST","GET"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    data = request.get_json()</span><br><span class="line">    index = data[<span class="string">'index'</span>]</span><br><span class="line">    chunk = data[<span class="string">'chunk'</span>]</span><br><span class="line">    filename = data[<span class="string">'filename'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(os.path.join(CURR, filename)):</span><br><span class="line">        os.mkdir(os.path.join(CURR, filename))</span><br><span class="line">    </span><br><span class="line">    f = open(os.path.join(CURR, filename, str(index)), <span class="string">'ab'</span>)</span><br><span class="line">    f.write(chunk.encode(<span class="string">'latin-1'</span>))</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"SUCCESS"</span>, <span class="number">200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/merge', methods=["POST","GET"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">meger</span><span class="params">()</span>:</span></span><br><span class="line">    data = request.get_json()</span><br><span class="line">    mp = data[<span class="string">'path'</span>]</span><br><span class="line">    filename = data[<span class="string">'filename'</span>]</span><br><span class="line"></span><br><span class="line">    f = open(filename, <span class="string">'ab'</span>)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(os.path.join(CURR, mp)):</span><br><span class="line">        tf = open(os.path.join(CURR, mp, file), <span class="string">'rb'</span>)</span><br><span class="line">        f.write(tf.read())</span><br><span class="line">        tf.close()</span><br><span class="line">    </span><br><span class="line">    f.close()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"SUCCESS"</span>, <span class="number">200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;python实现大文件切片上传。有段时间没学习一下新东西了，最近偶尔在学习一下并行和分布式的东西。大文件上传的方式有点并行处理的那味道。所以就抽时间写了一点python实现大文件上传，代码写的比较简陋，大家感兴趣的可以自己实现一个。大部分上传文件其实是在前端实现的，但是原理
      
    
    </summary>
    
    
    
      <category term="backend" scheme="https://shunyangli.github.io/tags/backend/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Part 2</title>
    <link href="https://shunyangli.github.io/post/b672/"/>
    <id>https://shunyangli.github.io/post/b672/</id>
    <published>2022-02-26T03:30:31.000Z</published>
    <updated>2022-06-14T06:41:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>An extension of <a href="https://shunyangli.github.io/2020/05/26/leetcode/#more">leetcode</a>. Keep working on leetcode.</p><h1 id="Daily-Temperatures"><a href="#Daily-Temperatures" class="headerlink" title="Daily Temperatures"></a>Daily Temperatures</h1><p><a href="https://leetcode.com/problems/daily-temperatures/" target="_blank" rel="noopener">Daily Temperatures</a>: Given a list of daily temperatures T, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead.</p><p>For example, given the list of temperatures T = [73, 74, 75, 71, 69, 72, 76, 73], your output should be [1, 1, 4, 2, 1, 1, 0, 0].</p><h2 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dailyTemperatures</span><span class="params">(self, T: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        num = len(T) - <span class="number">1</span></span><br><span class="line">        data = [<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(T) - <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> T[i] &gt;= T[num]:</span><br><span class="line">                data.insert(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">                num = i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                count = <span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, num + <span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">if</span> T[j] &lt;= T[i]:</span><br><span class="line">                        count += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                data.insert(<span class="number">0</span>, count)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><p>However, the worst time complexity is $O(N^2)$. The code can not pass one of the complex test case which is (Time Limit Exceeded).</p><h2 id="Advance-Approach"><a href="#Advance-Approach" class="headerlink" title="Advance Approach"></a>Advance Approach</h2><p>Stack can be used to improve the efficiency of this issue. We use stack to store a key-value temperature with decreasing order where key is the index of temperature, and value is the temperature. The time complexity of this approache is $O(N)$. For example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Temperature: [73, 74, 75, 71, 69, 72, 76, 73]</span><br><span class="line">stack = []</span><br><span class="line">res = [0, 0, 0, 0, 0, 0, 0, 0]</span><br><span class="line"></span><br><span class="line">1. index = 0</span><br><span class="line">stack = [(0, 73)]</span><br><span class="line"></span><br><span class="line">2. index = 1</span><br><span class="line">74 &gt; 73, pop (0, 73) and set res[0] = index - 0</span><br><span class="line">stack = [(1, 74)]</span><br><span class="line">res = [1, 0, 0, 0, 0, 0, 0, 0]</span><br><span class="line"></span><br><span class="line">3. index = 2</span><br><span class="line">75 &gt; 74, pop (1, 74) and set res[1] = index - 1</span><br><span class="line">stack = [(2, 75)]</span><br><span class="line">res = [1, 1, 0, 0, 0, 0, 0, 0]</span><br><span class="line"></span><br><span class="line">4. index = 3</span><br><span class="line">71 &lt; 75, add (3, 71) into stack</span><br><span class="line">stack = [(2, 75), (3, 71)]</span><br><span class="line"></span><br><span class="line">5. index = 4</span><br><span class="line">69 &lt; 71, add (3, 69) into stack</span><br><span class="line">stack = [(2, 75), (3, 71), (4, 69)]</span><br><span class="line"></span><br><span class="line">6. index = 5</span><br><span class="line">72 &lt; 69, pop (4, 69) and (3, 71), set res[4] = index - 4, and res[3] = index - 3</span><br><span class="line">stack = [(2, 75), (5, 72)]</span><br><span class="line">res = [1, 1, 0, 2, 1, 0, 0, 0]</span><br><span class="line"></span><br><span class="line">7. index = 6</span><br><span class="line">76 &gt; 72 pop (5, 72) and (2, 75), set res[5] = index - 5, and res[2] = index -2</span><br><span class="line">stack = []</span><br><span class="line">res = [1, 1, 4, 2, 1, 1, 0, 0]</span><br></pre></td></tr></table></figure><p>And implementation is:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dailyTemperatures</span><span class="params">(self, T: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        stack = []</span><br><span class="line">        res = [<span class="number">0</span>] * len(T)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(T)):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> stack[<span class="number">-1</span>][<span class="number">1</span>] &lt; T[i]:</span><br><span class="line">                index, val = stack.pop()</span><br><span class="line">                res[index] = i - index</span><br><span class="line"></span><br><span class="line">            stack.append((i, T[i]))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="Minimum-Size-Subarray-Sum"><a href="#Minimum-Size-Subarray-Sum" class="headerlink" title="Minimum Size Subarray Sum"></a>Minimum Size Subarray Sum</h1><p><a href="https://leetcode.com/problems/minimum-size-subarray-sum/submissions/" target="_blank" rel="noopener">Minimum Size Subarray Sum</a>: Given an array of positive integers nums and a positive integer target, return the minimal length of a contiguous subarray [numsl, numsl+1, …, numsr-1, numsr] of which the sum is greater than or equal to target. If there is no such subarray, return 0 instead.</p><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: target = 7, nums = [2,3,1,2,4,3]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The subarray [4,3] has the minimal length under the problem constraint.</span><br></pre></td></tr></table></figure><h2 id="Brute-Force-1"><a href="#Brute-Force-1" class="headerlink" title="Brute Force"></a>Brute Force</h2><p>The basic approach is to use two loops to solve that. The time complexity of this approach is $O(N^2)$. It will cause time limit exceeded.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minSubArrayLen</span><span class="params">(self, target: int, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        length = <span class="number">9999</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(nums)):</span><br><span class="line">            res = nums[i]</span><br><span class="line">            <span class="keyword">if</span> res &gt;= target:</span><br><span class="line">                length = <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(nums)):</span><br><span class="line">                res += nums[j]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> res &gt;= target:</span><br><span class="line">                    length = min(length, j - i + <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> length <span class="keyword">if</span> length != <span class="number">9999</span> <span class="keyword">else</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Advance-Approach-1"><a href="#Advance-Approach-1" class="headerlink" title="Advance Approach"></a>Advance Approach</h2><p><img src="/post/b672/1.png" alt><br>To solve this issue, we can use <strong>Sliding Window</strong> to solve this issue. This method is similar to the double pointer. The <code>index</code> the left index of this array. When the sum between <code>i</code> and <code>index</code> is greater or equal to the target, then advance <code>i</code> and <code>index</code> to find other positions that sum is greater or equal to the target. The basic idea of sliding windows is shown in the Figure.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minSubArrayLen</span><span class="params">(self, target: int, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        min_len = <span class="number">99999999</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(nums)):</span><br><span class="line">            res += nums[i]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> res &gt;= target:</span><br><span class="line">                length = i - index + <span class="number">1</span></span><br><span class="line">                min_len = min(length, min_len)</span><br><span class="line">                res -= nums[index]</span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> min_len <span class="keyword">if</span> min_len != <span class="number">99999999</span> <span class="keyword">else</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="Valid-Anagram"><a href="#Valid-Anagram" class="headerlink" title="Valid Anagram"></a>Valid Anagram</h1><p>Given two strings <code>s</code> and <code>t</code>, return true if <code>t</code> is an anagram of <code>s</code>, and false otherwise.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;anagram&quot;, t = &quot;nagaram&quot;</span><br><span class="line">Output: true</span><br><span class="line">Input: s = &quot;rat&quot;, t = &quot;car&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><h2 id="Brute-Force-2"><a href="#Brute-Force-2" class="headerlink" title="Brute Force"></a>Brute Force</h2><p>This issue can be solved by using two loop. But the time complexity is $O(N)$. In addition, it also can be done through sort algorithm, to check whether same. But it is too complex. Here we did not code for this approache.</p><h2 id="Advance-Approach-2"><a href="#Advance-Approach-2" class="headerlink" title="Advance Approach"></a>Advance Approach</h2><p>We can use <code>hashmap</code> to record that how many times they appeared in the string. Therefore, the time complexity is $O(N)$.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isAnagram</span><span class="params">(self, s: str, t: str)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> len(s) != len(t):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        data = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                data[i] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                data[i] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> data[i] == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    data[i] -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> key, val <span class="keyword">in</span> data.items():</span><br><span class="line">            <span class="keyword">if</span> data[key] != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h1 id="Combinations"><a href="#Combinations" class="headerlink" title="Combinations"></a>Combinations</h1><p>Given two integers <code>n</code> and <code>k</code>, return all possible combinations of <code>k</code> numbers out of the range <code>[1, n]</code>. You may return the answer in any order. For example</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 4, k = 2</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [2,4],</span><br><span class="line">  [3,4],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  [1,3],</span><br><span class="line">  [1,4],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>It is pretty hard to use loop to solve this issue. Beacause the <code>k</code> determine the number of nested loop, when <code>k=2</code> then it should have three nested loop. However, when k in not a const number, then we can not determine how many loops we need.</p><p>Therefore, we can use recursion to do this kind of issues. We can seen it as a tree as shown in the Figure. The root node is <code>1-n</code> and the deep is <code>k</code>. Pick up the number from left to right without repeating. We can set up a <code>path</code> to record the visited path, and when the length of <code>path</code> is equal to <code>k</code> then add the <code>path</code> to result.</p><p><img src="/post/b672/1.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combine</span><span class="params">(self, n: int, k: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">back_tracking</span><span class="params">(n, k, index, path, result)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> len(path) == k:</span><br><span class="line">                result.append([i <span class="keyword">for</span> i <span class="keyword">in</span> path])</span><br><span class="line">                <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(index + <span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">                path.append(i)</span><br><span class="line">                back_tracking(n, k, i, path, result)</span><br><span class="line">                path.pop()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> back_tracking(n, k, <span class="number">0</span>, [], [])</span><br></pre></td></tr></table></figure><h1 id="Combination-Sum-III"><a href="#Combination-Sum-III" class="headerlink" title="Combination Sum III"></a>Combination Sum III</h1><p><a href="https://leetcode.com/problems/combination-sum-iii/" target="_blank" rel="noopener">Combination Sum III</a>: Find all valid combinations of k numbers that sum up to n such that the following conditions are true:</p><ul><li>Only numbers 1 through 9 are used.</li><li>Each number is used at most once.</li></ul><p>Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order. For example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: k = 3, n = 7</span><br><span class="line">Output: [[1,2,4]]</span><br><span class="line">Explanation:</span><br><span class="line">1 + 2 + 4 = 7</span><br><span class="line">There are no other valid combinations.</span><br></pre></td></tr></table></figure><p>This question is pretty similar with the previous one, just add one more constrain (sum = n).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum3</span><span class="params">(self, k: int, n: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">combine</span><span class="params">(k, n, index, path, result)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> len(path) == k:</span><br><span class="line">                <span class="keyword">if</span> sum(path) == n:</span><br><span class="line">                    result.append([i <span class="keyword">for</span> i <span class="keyword">in</span> path])</span><br><span class="line">                <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(index, <span class="number">10</span>):</span><br><span class="line">                path.append(i)</span><br><span class="line">                combine(k, n, i + <span class="number">1</span>, path, result)</span><br><span class="line"></span><br><span class="line">                path.pop()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> combine(k, n, <span class="number">1</span>, [], [])</span><br></pre></td></tr></table></figure><h1 id="Valid-Palindrome"><a href="#Valid-Palindrome" class="headerlink" title="Valid Palindrome"></a>Valid Palindrome</h1><p><a href="https://leetcode.com/problems/valid-palindrome/" target="_blank" rel="noopener">Valid Palindrome</a>: Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;A man, a plan, a canal: Panama&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: &quot;amanaplanacanalpanama&quot; is a palindrome.</span><br></pre></td></tr></table></figure><p>This one is pretty easy, we just need to ignore the char which is not belong to <code>a-z, 0-9</code>. During the processing, we can use double pointer to do that. Set a index from the left and a index from the right.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, s: str)</span> -&gt; bool:</span></span><br><span class="line">        s = s.lower()</span><br><span class="line">        start = <span class="number">0</span></span><br><span class="line">        end = len(s) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> start &lt;= end:</span><br><span class="line">            l = s[start]</span><br><span class="line">            r = s[end]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> l.isalnum():</span><br><span class="line">                start += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> r.isalnum():</span><br><span class="line">                end -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> s[start] != s[end]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            start += <span class="number">1</span></span><br><span class="line">            end -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h1 id="Next-Greater-Node-In-Linked-List"><a href="#Next-Greater-Node-In-Linked-List" class="headerlink" title="Next Greater Node In Linked List"></a>Next Greater Node In Linked List</h1><p><a href="https://leetcode.com/problems/next-greater-node-in-linked-list/" target="_blank" rel="noopener">Next Greater Node In Linked List</a> is a medium problem.<br>We are given a linked list with <code>head</code> as the first node.  Let’s number the nodes in the list: <code>node_1, node_2, node_3, ... etc.</code></p><p>Each node may have a next larger value: for node_i, next_larger(node_i) is the node_j.val such that <code>j &gt; i</code>, <code>node_j.val &gt; node_i.val,</code> and <code>j</code> is the smallest possible choice.  If such a j does not exist, the next larger value is 0.</p><p>Return an array of integers answer, where <code>answer[i] = next_larger(node_{i+1})</code>.</p><p>Note that in the example inputs (not outputs) below, arrays such as <code>[2,1,5]</code> represent the serialization of a linked list with a head node value of 2, second node value of 1, and third node value of 5.</p><h2 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h2><p>This problem is pretty similar with <a href="https://leetcode.com/problems/daily-temperatures/" target="_blank" rel="noopener">Daily Temperatures</a> which can be solved by applying stack. For this issue, we can use <code>stack</code> + <code>hashmap</code> to solve it with $O(n)$ time complexity.</p><ol><li>Init stack and the final result.</li><li><code>result</code>(hashmap) will recored the index as key and greater or 0 value as the value</li><li>When the <code>temp</code> node value is greater then the top value of the stack, update the <code>result</code> value and pop the top value of stack.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextLargerNodes</span><span class="params">(self, head: ListNode)</span> -&gt; List[int]:</span></span><br><span class="line">        stack = []</span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        temp = head</span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># stack store like (val, pos)</span></span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">None</span>):</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> len(stack) != <span class="number">0</span> <span class="keyword">and</span> temp.val &gt; stack[len(stack) - <span class="number">1</span>][<span class="number">0</span>]:</span><br><span class="line">                result[stack[len(stack) - <span class="number">1</span>][<span class="number">1</span>]] = temp.val</span><br><span class="line">                stack.pop(len(stack) - <span class="number">1</span>)</span><br><span class="line">            </span><br><span class="line">            stack.append((temp.val, index))</span><br><span class="line">            result[index] = <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">            temp = temp.next</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result.values()</span><br></pre></td></tr></table></figure><p>We can use the following data to give an example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,1,5]</span><br><span class="line">Output: [5,5,0]</span><br></pre></td></tr></table></figure><p>In the following part, we will display the <code>result</code> and <code>stack</code> storage.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. stack.push((2, 0)) stack = [(2, 0)], result = &#123;0: 0&#125;</span><br><span class="line"></span><br><span class="line">2. stack.push((1, 1)), stack = [(2, 0), (1, 1)], result = &#123;0: 0, 1: 0&#125;</span><br><span class="line"></span><br><span class="line">3. The node value is 5, greater than 1, then</span><br><span class="line">    1. top value of stack is (1, 1), then result[1] = node.val (5), stack pop (1, 1)</span><br><span class="line">    2. top value of stack is (2, 0), then result[0] = node.val (5), stack pop (2, 0)</span><br><span class="line">    3. End while loop, and insert the (5, 3) into stack and result.</span><br><span class="line"></span><br><span class="line">The final value in result is:</span><br><span class="line">result = &#123;</span><br><span class="line">    0: 5,</span><br><span class="line">    1: 5,</span><br><span class="line">    2: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="How-Many-Numbers-Are-Smaller-Than-the-Current-Number"><a href="#How-Many-Numbers-Are-Smaller-Than-the-Current-Number" class="headerlink" title="How Many Numbers Are Smaller Than the Current Number"></a>How Many Numbers Are Smaller Than the Current Number</h1><p><a href="https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/" target="_blank" rel="noopener">How Many Numbers Are Smaller Than the Current Number</a> is an easy problem. Howerver, it is more interesting than other questions.</p><p>Given the array nums, for each <code>nums[i]</code> find out how many numbers in the array are smaller than it. That is, for each <code>nums[i]</code> you have to count the number of valid j’s such that <code>j != i</code> and <code>nums[j] &lt; nums[i]</code>.</p><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [8,1,2,2,3]</span><br><span class="line">Output: [4,0,1,1,3]</span><br><span class="line">Explanation: </span><br><span class="line">For nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). </span><br><span class="line">For nums[1]=1 does not exist any smaller number than it.</span><br><span class="line">For nums[2]=2 there exist one smaller number than it (1). </span><br><span class="line">For nums[3]=2 there exist one smaller number than it (1). </span><br><span class="line">For nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).</span><br></pre></td></tr></table></figure><h2 id="Approach-1"><a href="#Approach-1" class="headerlink" title="Approach"></a>Approach</h2><p>Naive approach is brute force. Just use two nest loop can get the result.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">result = []</span><br><span class="line">for i in range(0, len(nums)):</span><br><span class="line">    num = 0</span><br><span class="line">    for j in range(i, len(nums)):</span><br><span class="line">        if nums[i] &gt; nums[j]:</span><br><span class="line">            num += 1</span><br><span class="line">    result.append(num)</span><br></pre></td></tr></table></figure><p>The time complexity is <code>O(n^2)</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;An extension of &lt;a href=&quot;https://shunyangli.github.io/2020/05/26/leetcode/#more&quot;&gt;leetcode&lt;/a&gt;. Keep working on leetcode.&lt;/p&gt;
&lt;h1 id=&quot;Dail
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://shunyangli.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://shunyangli.github.io/tags/leetcode/"/>
    
      <category term="algorithm" scheme="https://shunyangli.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Nano Editor</title>
    <link href="https://shunyangli.github.io/post/943f/"/>
    <id>https://shunyangli.github.io/post/943f/</id>
    <published>2022-02-08T08:49:26.000Z</published>
    <updated>2022-06-14T06:41:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><a href="https://www.nano-editor.org/" target="_blank" rel="noopener">Nano</a> is a text editor for terminals.</p><h1 id="Open-and-create-files"><a href="#Open-and-create-files" class="headerlink" title="Open and create files"></a>Open and create files</h1><p>Open or create new files, you can type the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano filename</span><br></pre></td></tr></table></figure><p>This will open a new editor window and you can start editing the file. At the bottom of the window, the most basic command shortcuts that can be used with the nano editor are listed. <code>^</code> means <code>Ctrl</code> keys (e.g., <code>^X</code> = <code>Ctrl + X</code>).</p><h1 id="Search-and-replace"><a href="#Search-and-replace" class="headerlink" title="Search and replace"></a>Search and replace</h1><p>You can use <code>Ctrl + w</code> to search key words, it will match the first key word. Then you can use <code>Alt + w</code> to move to the next key word.</p><p>To search and replace, press <code>Ctrl + \</code>. Enter the search term and the text to be replaced. The editor will move to the first match and ask if you want to replace it. y or n will move to the next match. Pressing A will replace all matches.</p><h1 id="Save-and-exit"><a href="#Save-and-exit" class="headerlink" title="Save and exit"></a>Save and exit</h1><p>To save changes made to a file, press <code>Ctrl + o</code>. If the file does not yet exist, it will be created immediately after saving.</p><p>To exit nano, press <code>Ctrl + x</code>. If there are unsaved changes, you will be asked if you want to save the changes (<code>Y</code> means save, <code>N</code> means not save).</p><p>To save a file, you must have write access to the file. To create a new file, you need to have write access to the directory where the file will be createde</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.nano-edit
      
    
    </summary>
    
    
      <category term="tool" scheme="https://shunyangli.github.io/categories/tool/"/>
    
    
      <category term="tool" scheme="https://shunyangli.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop Partition</title>
    <link href="https://shunyangli.github.io/post/8700/"/>
    <id>https://shunyangli.github.io/post/8700/</id>
    <published>2021-10-13T13:11:54.000Z</published>
    <updated>2022-06-14T06:41:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hadoop-Partition-And-Secondary-Sort"><a href="#Hadoop-Partition-And-Secondary-Sort" class="headerlink" title="Hadoop Partition And Secondary Sort"></a>Hadoop Partition And Secondary Sort</h1><p>This article will describe an implementation and process of Hadoop partitioning and secondary sorting. First we need to briefly understand the workflow of Hadoop map-reduce task. In the <a href="https://shunyangli.github.io/2021/09/08/Hadoop-Distributed-System/#more">previous article</a>, we briefly explained the operation mechanism of Hadoop. The mapper task will read the file and process the data, after processing the mapper task will pass the result to the shuffle. shuffle will sort and partition all the map task results, and then will pass the partitioned and sorted data to the reducer, the key-value pairs with the same key will be passed to the same reducer. </p><p><img src="/post/8700/1.png" alt></p><p> The default distribution method used by hadoop is based on the hash value, but in practice, this is not very efficient or performs the task as we require. For example, after partitioning, one node’s reducer is assigned 20 records while the other is assigned 10 million records, so imagine how inefficient this is. Or, we want to process the output file according to a certain rule, assuming there are two reducers, we want the final result to store the results of records starting with “a” in part-00000, and other results in part-00001, the default partitioner is unable to do. So we need to customize our own partition to choose the reducer of records according to our own requirements.</p><h1 id="Why-partition"><a href="#Why-partition" class="headerlink" title="Why partition"></a>Why partition</h1><p>We want to use Hadoop to get a ordered file by using a partition (because it will be sorted before partitioning).  However if the input is huge (e.g. 10 GB), the performance of reducer is pretty inefficient which completely losing the advantage of the parallel architecture provided by MapReduce. We can use a partitioner to sort the data, so that when the reducer processes the data, it can be guaranteed that the data is already sorted. One partition corresponds to one reducer, so all the output of the reducer is ordered, we just need to merge all the output files, then the total file must be ordered.</p><h1 id="Hadoop-Streaming-Partition"><a href="#Hadoop-Streaming-Partition" class="headerlink" title="Hadoop Streaming Partition"></a>Hadoop Streaming Partition</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mapred streaming \</span><br><span class="line"> -D mapreduce.job.output.key.comparator.class=org.apache.hadoop.mapreduce.lib.partition.KeyFieldBasedComparator \</span><br><span class="line"> -D stream.map.output.field.separator=, \</span><br><span class="line"> -D stream.num.map.output.key.fields=2 \</span><br><span class="line"> -D mapreduce.map.output.key.field.separator=,\</span><br><span class="line"> -D mapreduce.partition.keycomparator.options=-k2,2nr \</span><br><span class="line"> -D mapreduce.job.reduces=2\</span><br><span class="line"> -input input</span><br><span class="line"> -output output \</span><br><span class="line"> -mapper /bin/cat \</span><br><span class="line"> -reducer /bin/cat \</span><br><span class="line"> -partitioner org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-D map.output.key.field.separator=, means the separator for the key is “,”</span><br><span class="line">-D stream.num.map.output.key.fields=2 means the prefix up to the second “,” in a line will be the key and the rest of the line (excluding the second “,”) will be the value.</span><br><span class="line"></span><br><span class="line">e.g.:</span><br><span class="line">1,2,3 then &apos;map.output.key.field.separator&apos; split the input by , and &apos;stream.num.map.output.key.fields=2&apos; will set (1,2) is the key and 3 is the value</span><br><span class="line"></span><br><span class="line">-D map.output.key.field.separator=, means the separator for the key is also “,”</span><br><span class="line"></span><br><span class="line">-D mapreduce.partition.keypartitioner.options=-k1,2” means</span><br><span class="line">MapReduce will partition the map outputs by the first two fields of the keys</span><br></pre></td></tr></table></figure><p>For example, the input files is like this, name (input.txt)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">muse,curious,1</span><br><span class="line">muse,days,2</span><br><span class="line">muse,do,3</span><br><span class="line">muse,growing,4</span><br><span class="line">muse,grown,5</span><br><span class="line">muse,in,1</span><br><span class="line">cat,invent,2</span><br><span class="line">muse,more,3</span><br><span class="line">muse,please,4</span><br><span class="line">cat,subject,5</span><br><span class="line">cat,ten,2</span><br><span class="line">muse,these,3</span><br><span class="line">muse,this,2</span><br><span class="line">muse,times,5</span><br><span class="line">muse,to,6</span><br><span class="line">cat,want,8</span><br><span class="line">muse,with,9</span><br><span class="line">muse,worth,0</span><br><span class="line">muse,*,10</span><br><span class="line">muse,age,12</span><br></pre></td></tr></table></figure><p>Put this file into hdfs:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -put input.txt input</span><br></pre></td></tr></table></figure><p>We partition by two different ranges of keys (mapreduce.partition.keypartitioner.options) (e.g.: key is (muse, curious) value is 1), and we get two different results.</p><p>The first command is partition based the first filed in the key.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar $HADOOP_HOME/share/hadoop/tools/lib/hadoop-streaming-*.jar \</span><br><span class="line">-D stream.map.output.field.separator=, \</span><br><span class="line">-D stream.num.map.output.key.fields=2 \</span><br><span class="line">-D map.output.key.field.separator=, \</span><br><span class="line">-D mapreduce.partition.keypartitioner.options=-k1,1 \</span><br><span class="line">-D mapreduce.job.reduces=3 \</span><br><span class="line">-input input/test.txt \</span><br><span class="line">-output ou2 \</span><br><span class="line">-mapper /bin/cat \</span><br><span class="line">-reducer /bin/cat \</span><br><span class="line">-partitioner org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner</span><br></pre></td></tr></table></figure><p>The first reducer gets:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat,invent2</span><br><span class="line">cat,subject5</span><br><span class="line">cat,ten2</span><br><span class="line">cat,want8</span><br></pre></td></tr></table></figure><p>The second reducer gets:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">muse,*10</span><br><span class="line">muse,age12</span><br><span class="line">muse,curious1</span><br><span class="line">muse,days2</span><br><span class="line">muse,do3</span><br><span class="line">muse,growing4</span><br><span class="line">muse,grown5</span><br><span class="line">muse,in1</span><br><span class="line">muse,more3</span><br><span class="line">muse,please4</span><br><span class="line">muse,these3</span><br><span class="line">muse,this2</span><br><span class="line">muse,times5</span><br><span class="line">muse,to6</span><br><span class="line">muse,with9</span><br><span class="line">muse,worth0</span><br></pre></td></tr></table></figure><p>The last reducer is empty. With the result of the reducer we get the desired partition.</p><p>The first command is partition based the second filed in the key.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar $HADOOP_HOME/share/hadoop/tools/lib/hadoop-streaming-*.jar \</span><br><span class="line">-D stream.map.output.field.separator=, \</span><br><span class="line">-D stream.num.map.output.key.fields=2 \</span><br><span class="line">-D map.output.key.field.separator=, \</span><br><span class="line">-D mapreduce.partition.keypartitioner.options=-k2,2 \</span><br><span class="line">-D mapreduce.job.reduces=3 \</span><br><span class="line">-input input/test.txt \</span><br><span class="line">-output ou1 \</span><br><span class="line">-mapper /bin/cat \</span><br><span class="line">-reducer /bin/cat \</span><br><span class="line">-partitioner org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner</span><br></pre></td></tr></table></figure><p>Reducer 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat,subject5</span><br><span class="line">cat,ten2</span><br><span class="line">muse,*10</span><br><span class="line">muse,more3</span><br><span class="line">muse,these3</span><br><span class="line">muse,times5</span><br><span class="line">muse,with9</span><br><span class="line">muse,worth0</span><br></pre></td></tr></table></figure><p>Reducer 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat,invent2</span><br><span class="line">cat,want8</span><br><span class="line">muse,age12</span><br><span class="line">muse,curious1</span><br><span class="line">muse,days2</span><br><span class="line">muse,do3</span><br></pre></td></tr></table></figure><p>Reducer 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">muse,growing4</span><br><span class="line">muse,grown5</span><br><span class="line">muse,in1</span><br><span class="line">muse,please4</span><br><span class="line">muse,this2</span><br><span class="line">muse,to6</span><br></pre></td></tr></table></figure><p>Comparing the two output results we can see that different partition ranges lead to completely different partition results.</p><h1 id="MRJob-example"><a href="#MRJob-example" class="headerlink" title="MRJob example"></a>MRJob example</h1><p>By using the given text file, I did a example that in mrjob.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mrjob.job <span class="keyword">import</span> MRJob</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(MRJob)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    the number of reducer is 1,</span></span><br><span class="line"><span class="string">    then we can use map separator</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mapper</span><span class="params">(self, _, line)</span>:</span></span><br><span class="line">        words = line.split(<span class="string">','</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> words[<span class="number">0</span>]   <span class="string">","</span>   words[<span class="number">1</span>], int(words[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reducer</span><span class="params">(self, key, values)</span>:</span></span><br><span class="line">        <span class="keyword">yield</span> key, sum(values)</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">    SORT_VALUES = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    JOBCONF = &#123;</span><br><span class="line">      <span class="string">'map.output.key.field.separator'</span>: <span class="string">','</span>,</span><br><span class="line">      <span class="string">'mapred.reduce.tasks'</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="string">'mapreduce.partition.keypartitioner.options'</span>:<span class="string">'-k1,1'</span>,</span><br><span class="line">      <span class="string">'partitioner'</span>:<span class="string">'org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner'</span>,</span><br><span class="line">      <span class="string">'mapreduce.partition.keycomparator.options'</span>:<span class="string">'-k1,1 -k2,2n'</span>,</span><br><span class="line">      <span class="string">'mapreduce.job.output.key.comparator.class'</span>:<span class="string">'org.apache.hadoop.mapreduce.lib.partition.KeyFieldBasedComparator'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    Example.run()</span><br></pre></td></tr></table></figure><p>Run the code:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 example.py -r hadoop hdfs:///user/xx/example.txt -o hdfs:///user/xx/output</span><br></pre></td></tr></table></figure><p>The result of three reducers:</p><ol><li><p>None</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">muse,*10</span><br><span class="line">muse,age12</span><br><span class="line">muse,curious1</span><br><span class="line">muse,days2</span><br><span class="line">muse,do3</span><br><span class="line">muse,growing4</span><br><span class="line">muse,grown5</span><br><span class="line">muse,in1</span><br><span class="line">muse,more3</span><br><span class="line">muse,please4</span><br><span class="line">muse,these3</span><br><span class="line">muse,this2</span><br><span class="line">muse,times5</span><br><span class="line">muse,to6</span><br><span class="line">muse,with9</span><br><span class="line">muse,worth0</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat,invent2</span><br><span class="line">cat,subject5</span><br><span class="line">cat,ten2</span><br><span class="line">cat,want8</span><br></pre></td></tr></table></figure></li></ol><h1 id="Partition-and-secondary-sort-video"><a href="#Partition-and-secondary-sort-video" class="headerlink" title="Partition and secondary sort video"></a>Partition and secondary sort video</h1><iframe width="950" height="525" src="https://www.youtube.com/embed/ljFjAeKjZm8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hadoop-Partition-And-Secondary-Sort&quot;&gt;&lt;a href=&quot;#Hadoop-Partition-And-Secondary-Sort&quot; class=&quot;headerlink&quot; title=&quot;Hadoop Partition And S
      
    
    </summary>
    
    
    
      <category term="Distributed" scheme="https://shunyangli.github.io/tags/Distributed/"/>
    
  </entry>
  
  <entry>
    <title>mrjob for hadoop</title>
    <link href="https://shunyangli.github.io/post/af28/"/>
    <id>https://shunyangli.github.io/post/af28/</id>
    <published>2021-09-16T12:42:15.000Z</published>
    <updated>2022-06-14T06:41:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Yelp/mrjob" target="_blank" rel="noopener">mrjob</a> is the easiest way to write python programs that can run on hadoop. Its most prominent feature is that with the help of mrjob, there is no need to install hadoop or deploy any cluster, and we can run the code (for testing) on our local machine. Also, mrjob can easily run on Amazon Elastic MapReduce.</p><p>Since Hadoop does not currently support the python API, we can only use the stream processing method to complete the mapredduce ren using python. mrjob is a good choice.</p><h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><p>If you did not installed <a href="https://pip.pypa.io/en/stable/" target="_blank" rel="noopener">pip3</a> for Linux, then you can execute the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install python3-pip</span><br></pre></td></tr></table></figure><p>After that, you can install mrjob by using <code>pip3</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install mrjob</span><br></pre></td></tr></table></figure><p>To check if your installation is correct you can execute in the python3 terminal:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ &gt; python3</span><br><span class="line">Python 3.8.10 (default, Jun  2 2021, 10:49:15) </span><br><span class="line">[GCC 9.4.0] on linux</span><br><span class="line">Type "help", "copyright", "credits" or "license" for more information.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; import mrjob</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>If there is no output from import, the installation is successful.</p><h1 id="mrjob-example"><a href="#mrjob-example" class="headerlink" title="mrjob example"></a>mrjob example</h1><p>We use a generic word count example to demonstrate the use of mrjob.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mrjob.job <span class="keyword">import</span> MRJob</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordCount</span><span class="params">(MRJob)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mapper</span><span class="params">(self, _, line)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> line.split():</span><br><span class="line">            <span class="keyword">yield</span> (word, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reducer</span><span class="params">(self, key, values)</span>:</span></span><br><span class="line">        <span class="keyword">yield</span> key, sum(values)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    WordCount.run()</span><br></pre></td></tr></table></figure><p>Using yield, you can let the function generate a sequence, the function returns an object of type “generator”, through the object to call the next() method to return the sequence of values.</p><p>Briefly understand: yield is return returns a value, and remember this return position, the next iteration will start from this position after (the next line).</p><p>For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ &gt; python3                         </span><br><span class="line">Python <span class="number">3.8</span><span class="number">.10</span> (default, Jun  <span class="number">2</span> <span class="number">2021</span>, <span class="number">10</span>:<span class="number">49</span>:<span class="number">15</span>) </span><br><span class="line">[GCC <span class="number">9.4</span><span class="number">.0</span>] on linux</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">3</span>):</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">yield</span> i</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num = count()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num</span><br><span class="line">&lt;generator object count at <span class="number">0x7f5786f7d900</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num.__next__()</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num.__next__()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num.__next__()</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num.__next__()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><p>By execute the <code>word_count.py</code> in local environment:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 word_count.py input.txt</span><br></pre></td></tr></table></figure><h1 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h1><p>mapreduce is a system for processing large amounts of data on distributed systems. It is based on the paper <a href="https://dl.acm.org/doi/pdf/10.1145/1327452.1327492" target="_blank" rel="noopener">MapReduce: Simplified Data Processing on Large Clusters</a>. mapreduce divides massive data into small data sets, performs the same task in parallel, and finally collates and merges all the sub-results into the final result. The step of splitting the data for the same is called mapper, and the step of merging and organizing later is called reducer. combiner can be seen as an optimizer, but it is not necessary.</p><p>When we are calling the Hadoop framework with mrjob, we first need to configure Hadoop. <strong>You must make sure that yarn is started at the time of mrjob.</strong> </p><p>Configuration of <code>mapred-site.xml</code> :</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_MAPRED_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_MAPRED_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_MAPRED_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Configuration of <code>yarn-site.xml</code>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Execute-hadoop-on-mrjob"><a href="#Execute-hadoop-on-mrjob" class="headerlink" title="Execute hadoop on mrjob"></a>Execute hadoop on mrjob</h1><p>Use the same word count code, then we can execute the file by using:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 word_count.py -r hadoop input.txt</span><br></pre></td></tr></table></figure><p>mrjob can also call the file above the hdfs:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 word_count.py -r hadoop hdfs:///input/input.txt</span><br></pre></td></tr></table></figure><h1 id="Hadoop-JAVA-and-mrjob-installation"><a href="#Hadoop-JAVA-and-mrjob-installation" class="headerlink" title="Hadoop, JAVA and mrjob installation"></a>Hadoop, JAVA and mrjob installation</h1><iframe width="950" height="534" src="https://www.youtube.com/embed/lux2RA7ul4w" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/Yelp/mrjob&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mrjob&lt;/a&gt; is the easiest way to write python programs that can run
      
    
    </summary>
    
    
    
      <category term="Distributed" scheme="https://shunyangli.github.io/tags/Distributed/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop Distributed System</title>
    <link href="https://shunyangli.github.io/post/515d/"/>
    <id>https://shunyangli.github.io/post/515d/</id>
    <published>2021-09-08T10:01:55.000Z</published>
    <updated>2022-06-14T06:41:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>HDFS的原理以及Hadoop的安装，MapReduce的运行流程，shuffle的运行机制。</p><h1 id="hdfs-功能"><a href="#hdfs-功能" class="headerlink" title="hdfs 功能"></a>hdfs 功能</h1><p>HDFS：分布式文件管理系统 </p><p>Hadoop fs：使用面最广，可以操作任何文件系统。 </p><p>hadoop dfs与hdfs dfs：只能操作HDFS文件系统相关（包括与Local FS间的操作），前者已经Deprecated，一般使用后者。 </p><p>Hadoop/hdfs fs/dfs {args} {args} </p><h1 id="hdfs-实现原理"><a href="#hdfs-实现原理" class="headerlink" title="hdfs 实现原理"></a>hdfs 实现原理</h1><p>当在使用hdfs dfs -put命令的时候，文件会被切块（文件块的大小通过参数来决定，默认是128M）存放到不同的datanode server里面，具体分布到哪个datanode取决于namenode server。<br>namenode会记录并维护不同的文件块所存放的具体位置（存放在哪个datanode里面），这些信息被称作元数据。 </p><pre><code class="shell">e.g.: file被分割成3块，分别存放在datanode0, datanode1 and datanode 2。 那么在namenode会记录: file: {block0: datanode0-server, block1: datanode1-server, block2: datanode2-server。 </code></pre><p>当在使用hdfs dfs -get 的时候，系统会在namenode获取源数据，然后根据元数据记录的文件块存放的位置进行获取文件块，然后合并。<br><img src="/post/515d/1.png" alt></p><h2 id="hdfs副本"><a href="#hdfs副本" class="headerlink" title="hdfs副本"></a>hdfs副本</h2><p>为了防止datanode出现宕机情况，hdfs会对文件进行储存副本，副本的具体数量由用户设定。就是把同一文件块储存在不同的datanode上面。 </p><h2 id="hdfs特点"><a href="#hdfs特点" class="headerlink" title="hdfs特点"></a>hdfs特点</h2><p>hdfs是适应一次写入，多次读的场景，不支持文件的修改。所以hdfs不适合做网盘应用，因为延迟高，开销大。<br>优点：可以线性扩展（不够存我直接再租几个服务器就够了），数据储存可靠性高，分布式运算处理方便。 </p><h1 id="hdfs-读-写数据流程"><a href="#hdfs-读-写数据流程" class="headerlink" title="hdfs 读/写数据流程"></a>hdfs 读/写数据流程</h1><h2 id="hdfs读数据流程"><a href="#hdfs读数据流程" class="headerlink" title="hdfs读数据流程"></a>hdfs读数据流程</h2><ul><li><p>和namenode通信查询元数据，根据元数据找到文件快所在的datanode server </p></li><li><p>挑选一个datanode server（就近原则，然后随机），建立socket 通信 </p></li><li><p>datanode开始发送数据（采用streaming），以packet为单位做校验 </p></li><li><p>client以packet为单位接受，在本地缓存，然后写入目标文件（获取所有的文件快后进行合并） </p></li></ul><p><img src="/post/515d/2.png" alt></p><h2 id="hdfs写数据流程"><a href="#hdfs写数据流程" class="headerlink" title="hdfs写数据流程"></a>hdfs写数据流程</h2><ul><li><p>client和namenode通信并请求上传文件，namenode检查文件是否存在 </p></li><li><p>namenode返回给client是否可以上传 </p></li><li><p>client请求第一个block该传输到哪些datanode（因为包含副本） </p></li><li><p>namenode返回所需要上传的datanode server（数量取决于副本的数量），假设返回A B C三台server </p></li><li><p>client和datanode A建立pipeline（本质是RPC调用），A收到请求后调用B建立pipeline，B收到请求后和C建立pipeline，然后逐级返回client </p></li><li><p>client开始给A上传文件块，以packet为单位，A收到之后传给B，B收到之后传给C </p></li><li><p>当一个文件块上传完成之后，client再次请求namenode上传下一个文件块 </p></li><li><p><img src="/post/515d/3.png" alt></p></li></ul><h1 id="hdfs-namenode-工作原理"><a href="#hdfs-namenode-工作原理" class="headerlink" title="hdfs namenode 工作原理"></a>hdfs namenode 工作原理</h1><p>namenode负责：响应client请求，维护路径树，管理元数据（查询，修改） </p><h2 id="hdfs元数据管理机制"><a href="#hdfs元数据管理机制" class="headerlink" title="hdfs元数据管理机制"></a>hdfs元数据管理机制</h2><ul><li><p>内存中有一份完整的元数据（特定的数据结构） </p></li><li><p>磁盘中有一个准完整的元数据的镜像文件 </p></li><li><p>当client对hdfs中的文件新增或者修改的时候，首先会在edits文件中记录操作日志，当client操作成功之后，相应的元数据会更新到内存中。每隔一段时间会有secondary namenode将namenode上积累的所有edits和一个最新的元数据镜像下载到本地，并加载到内存中进行合并（这个过程被称为checkpoint） </p></li></ul><p><img src="/post/515d/4.png" alt></p><h1 id="MapReduce-原理"><a href="#MapReduce-原理" class="headerlink" title="MapReduce 原理"></a>MapReduce 原理</h1><p><img src="/post/515d/5.png" alt></p><p>在map的时候会对同一个文件进行处理，每一个mserver里面的map会访问不同的部分，然后对文本数据进行处理，且map过程输出的格式是key value的形式。<br>在map task执行完之后会把数据传到shuffle里面，然后shuffle传递给reduce task。reduce会拉取在map里面处理过的数据，对key value进行整合（类似db里面的group by操作）。 </p><h1 id="shuffle原理"><a href="#shuffle原理" class="headerlink" title="shuffle原理"></a>shuffle原理</h1><p>shuffle是map和reduce中间的数据调度机制，主要包含缓存，分区，排序 </p><p>在map task里面有一个缓冲区，把处理过的key-value数据放到缓存里面，但是由于缓存有限，所以当缓冲区使用达到一定限制后（80%），split thread（一个线程，归map task管）会把缓冲区的数据写入到磁盘，split在处理缓冲数据的时候会对数据进行排序和分区，默认是hash partition进行分区，根据key的值hash分区。每split一次会写入到磁盘的一个新的文件（sort and partition）。在map完所有的数据之后，对所有溢出文件进行合并和排序，在合并的时候对每个分区的数据进行合并。 </p><p><img src="/post/515d/6.png" alt></p><p>在reduce阶段，拉取所有map tasks的最终结果，并对这些数据做排序。</p><p><img src="/post/515d/7.png" alt></p><p>Reduce function会拿到根据key聚合数据，每个聚合组调用一次reduce方法。会有多个reduce task同时运行。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HDFS的原理以及Hadoop的安装，MapReduce的运行流程，shuffle的运行机制。&lt;/p&gt;
&lt;h1 id=&quot;hdfs-功能&quot;&gt;&lt;a href=&quot;#hdfs-功能&quot; class=&quot;headerlink&quot; title=&quot;hdfs 功能&quot;&gt;&lt;/a&gt;hdfs 功能&lt;/h
      
    
    </summary>
    
    
    
      <category term="Distributed" scheme="https://shunyangli.github.io/tags/Distributed/"/>
    
  </entry>
  
  <entry>
    <title>bipartite graph data pre-processing</title>
    <link href="https://shunyangli.github.io/post/3fe5/"/>
    <id>https://shunyangli.github.io/post/3fe5/</id>
    <published>2021-07-28T10:16:59.000Z</published>
    <updated>2022-06-14T06:41:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>The initialized downloaded data is messy and the graph id is not continuous, so a data preprocessing method is written to allow the data to be loaded into memory faster. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">filepath = os.getcwd() + <span class="string">"/"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_files</span><span class="params">(filename: str, sep: str, skip: int)</span>:</span></span><br><span class="line">    data = []</span><br><span class="line">    filename = filepath + filename[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> lines:</span><br><span class="line">        lines = list(lines)</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines[skip:]:</span><br><span class="line">            nodes = line.split(sep)</span><br><span class="line">            temp = [int(nodes[<span class="number">0</span>]), int(nodes[<span class="number">1</span>])]</span><br><span class="line">            <span class="keyword">for</span> val <span class="keyword">in</span> nodes[<span class="number">2</span>:]:</span><br><span class="line">                temp.append(val)</span><br><span class="line">            data.append(temp)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_data</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    encoding the data</span></span><br><span class="line"><span class="string">    :param data:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    u_node = &#123;&#125;</span><br><span class="line">    u_id = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    v_node = &#123;&#125;</span><br><span class="line">    v_id = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> u_node:</span><br><span class="line">            u_node[line[<span class="number">0</span>]] = u_id</span><br><span class="line">            u_id += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">1</span>] <span class="keyword">not</span> <span class="keyword">in</span> v_node:</span><br><span class="line">            v_node[line[<span class="number">1</span>]] = v_id</span><br><span class="line">            v_id += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    nodes = <span class="string">""</span></span><br><span class="line">    edges = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> data:</span><br><span class="line">        nodes += <span class="string">"&#123;&#125; &#123;&#125;"</span>.format(u_node[line[<span class="number">0</span>]], v_node[line[<span class="number">1</span>]])</span><br><span class="line">        nodes += <span class="string">" "</span>.join(line[<span class="number">2</span>:])</span><br><span class="line">        nodes += <span class="string">"\n"</span></span><br><span class="line">        edges += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> u_id, v_id, edges, nodes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">store_file</span><span class="params">(filename, data)</span>:</span></span><br><span class="line">    meta = filepath + filename + <span class="string">'.meta'</span></span><br><span class="line">    edge = filepath + filename + <span class="string">'.e'</span></span><br><span class="line"></span><br><span class="line">    f = open(edge, <span class="string">'w'</span>)</span><br><span class="line">    f.write(data[<span class="number">3</span>])</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">    lines = <span class="string">"&#123;&#125;\n&#123;&#125;\n&#123;&#125;\n"</span>.format(data[<span class="number">0</span>], data[<span class="number">1</span>], data[<span class="number">2</span>])</span><br><span class="line">    f = open(meta, <span class="string">'w'</span>)</span><br><span class="line">    f.write(lines)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(args)</span>:</span></span><br><span class="line">    filename = args.filename</span><br><span class="line">    sep = args.sep</span><br><span class="line">    outfile = args.out</span><br><span class="line">    skip = args.skip</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> outfile <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        outfile = str(filename).split(<span class="string">'.'</span>)[<span class="number">1</span>][:<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    data = read_files(filename, sep, int(skip))</span><br><span class="line">    parsed_data = parse_data(data)</span><br><span class="line">    store_file(outfile, parsed_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">'Processing csv data'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--filename'</span>, help=<span class="string">'Please add file name'</span>, required=<span class="literal">True</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--sep'</span>, help=<span class="string">'Separator'</span>, default=<span class="string">' '</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--out'</span>, help=<span class="string">'output file name'</span>, default=<span class="literal">None</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--skip'</span>, help=<span class="string">'how many lines need to be skiped'</span>, default=<span class="number">1</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Start processing: "</span>, args.filename)</span><br><span class="line">    execute(args)</span><br><span class="line">    print(<span class="string">"Finished"</span>)</span><br></pre></td></tr></table></figure><h1 id="How-to-use-it"><a href="#How-to-use-it" class="headerlink" title="How to use it"></a>How to use it</h1><p>You can get help information by using <code>--help</code>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">usage: data.py [-h] --filename FILENAME [--sep SEP] [--out OUT] [--skip SKIP]</span><br><span class="line"></span><br><span class="line">Processing csv data</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help           show this help message and exit</span><br><span class="line">  --filename FILENAME  Please add file name</span><br><span class="line">  --sep SEP            Separator</span><br><span class="line">  --out OUT            output file name</span><br><span class="line">  --skip SKIP          how many lines need to be skiped、</span><br></pre></td></tr></table></figure><p><code>--sep</code> default value is a space, <code>--skip</code> default value is 1.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The initialized downloaded data is messy and the graph id is not continuous, so a data preprocessing method is written to allow the data 
      
    
    </summary>
    
    
      <category term="Data processing" scheme="https://shunyangli.github.io/categories/Data-processing/"/>
    
    
      <category term="Data processing" scheme="https://shunyangli.github.io/tags/Data-processing/"/>
    
  </entry>
  
  <entry>
    <title>Union-Find Set</title>
    <link href="https://shunyangli.github.io/post/14e7/"/>
    <id>https://shunyangli.github.io/post/14e7/</id>
    <published>2021-05-25T03:45:50.000Z</published>
    <updated>2022-06-14T06:41:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>In computer science, a disjoint-set data structure is a data structure used to handle the merging and querying of disjoint sets (a series of sets with no duplicate elements).</p><h1 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h1><p>A non-intersecting forest represents each set as a tree (deepth with 1), where each node is an element. A node holds a reference to its parent node, and the root node of the tree holds an empty reference or a reference to itself or some other invalid value to indicate itself as the root node. This data structure was first proposed by Bernard A. Galler and Michael J. Fischer in 1964,but it took several years before a precise analysis was completed. As shown:<br><img src="/post/14e7/1.png" alt></p><h1 id="New-Approach"><a href="#New-Approach" class="headerlink" title="New Approach"></a>New Approach</h1><p>There are many different types of variations of this data structure that we can change to suit different needs. I used two HashMap to store the roots and parent (<code>parent</code> and <code>roots</code>). For <code>parent</code>, it stores the roots of every element, for <code>roots</code>, it stores the root of all the elements.<br><code>parent</code> can be seen as <code>{node: root}</code>, <code>roots</code> can be seen as <code>{root: [node1, node2, ...]}</code>.</p><h2 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h2><p>In my method, I use Hashmap to store the tree. So, the search complexity is $O(n)$.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> parent[x]</span><br></pre></td></tr></table></figure><h2 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h2><p>For union, we need to set the root of such element to be a new root. And merge the childs of such root.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    rootX = parent[x]</span><br><span class="line">    rootY = parent[y]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> rootX == rootY:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    parent[y] = rootX</span><br><span class="line">    roots[rootX] += roots[y]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> roots[y]:</span><br><span class="line">        parent[n] = rootX</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">del</span> roots[y]</span><br></pre></td></tr></table></figure><h1 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h1><p>It can be used for subgraph pattern matching decompistion, bipartite graph and commuity.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UF</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :param parent &#123;node: root&#125;</span></span><br><span class="line"><span class="string">        :param roots: &#123;root: [n1,n2..]&#125;</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.parent = &#123;&#125;</span><br><span class="line">        self.roots = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">            self.parent[i] = i</span><br><span class="line">            self.roots[i] = [i]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, p, q)</span>:</span></span><br><span class="line">        rootP = self.parent[p]</span><br><span class="line">        rootQ = self.parent[q]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> rootP == rootQ:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        self.parent[q] = rootP</span><br><span class="line">        self.roots[rootP] += self.roots[q]</span><br><span class="line">        <span class="keyword">del</span> self.roots[q]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        to find x parent</span></span><br><span class="line"><span class="string">        :param x:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">in</span> self.parent:</span><br><span class="line">            <span class="keyword">return</span> self.parent[x]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isConnect</span><span class="params">(self, p, q)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        check whether two val has same root</span></span><br><span class="line"><span class="string">        :param p:</span></span><br><span class="line"><span class="string">        :param q:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        rootP = self.find(p)</span><br><span class="line">        rootQ = self.find(q)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rootP == rootQ</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getRoots</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.roots.keys()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getRecords</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.roots</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    uf = UF()</span><br><span class="line">    uf.init(<span class="number">10</span>)</span><br><span class="line">    uf.union(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    uf.union(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    uf.union(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    uf.union(<span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">    uf.union(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    x = uf.find(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In computer science, a disjoint-set data structure is a data structure used to handle the merging and querying of disjoint sets (a series
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://shunyangli.github.io/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://shunyangli.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Prime Number</title>
    <link href="https://shunyangli.github.io/post/4d31/"/>
    <id>https://shunyangli.github.io/post/4d31/</id>
    <published>2021-04-25T05:18:45.000Z</published>
    <updated>2022-06-14T06:41:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>In math, prime numbers are whole numbers greater than 1, that have only two factors – 1 and the number itself. Prime numbers are divisible only by the number 1 or itself. For example, 2, 3, 5, 7 and 11 are the first few prime numbers.</p><h1 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h1><p>For this solution we can use two loops to handle. For example, we want to find all the prime number between 2 and 100, then we can write code like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">100</span></span><br><span class="line">primes = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, num):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>, i):</span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        primes.append(i)</span><br></pre></td></tr></table></figure><p>The time complexity is $O(n\sqrt{n})$. But when the number is huge, then it is very slow. There is a small optimization in the method. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">100</span></span><br><span class="line">primes = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, num):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>, i // <span class="number">2</span> + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        primes.append(i)</span><br></pre></td></tr></table></figure><h1 id="Ehrlich-Sieve-Algorithm"><a href="#Ehrlich-Sieve-Algorithm" class="headerlink" title="Ehrlich Sieve Algorithm"></a>Ehrlich Sieve Algorithm</h1><p>The algorithm enumerates all the numbers from small to large, and for each prime number, it sifts all its multiples, and the rest is the prime number. The time complexity is $O(loglog(n))$.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">primes = []</span><br><span class="line">is_prime = [<span class="literal">True</span>] * (num + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, num):</span><br><span class="line">    <span class="keyword">if</span> is_prime[i]:</span><br><span class="line">        primes.append(i)</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">1</span>, num // i + <span class="number">1</span>):</span><br><span class="line">            is_prime[i * m] = <span class="literal">False</span></span><br></pre></td></tr></table></figure><h1 id="Performance-Evaluation"><a href="#Performance-Evaluation" class="headerlink" title="Performance Evaluation"></a>Performance Evaluation</h1><p>We set the value of <code>num</code> to <code>[10000, 50000, 100000, 200000]</code>. For Brute Force (BF) we used its optimization algorithm. For Ehrlich Sieve (ES) we do not change anything.</p><p><img src="/post/4d31/1.png" alt></p><p>We can see that as the number increases the time consumed by BF is higher. For all the test, the time cost of ES algorithm no more than one seconds.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In math, prime numbers are whole numbers greater than 1, that have only two factors – 1 and the number itself. Prime numbers are divisibl
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://shunyangli.github.io/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://shunyangli.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>A* Search Algorithm</title>
    <link href="https://shunyangli.github.io/post/44e7/"/>
    <id>https://shunyangli.github.io/post/44e7/</id>
    <published>2021-04-21T04:06:33.000Z</published>
    <updated>2022-06-14T06:41:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>A* search algorithm is a heuristic search which works on path planning and graph traversal (weighted).<br>It is an extension of <a href="https://shunyangli.github.io/2020/05/03/Algorithm/">Dijkstra</a> algorithm. The formula of Dijkstra is $f(n)=g(n)$, and the formula of A* is $f(n)=g(n) + h(n)$, where $g(n)$ is the cost from start to current node and $h(n)$ is the estimated cost from source node to target node. Manhattan distance or Euclidean distance is usually used to estimate. A* algorithm is better than Dijkstra when $h(n)$ is admissible (never overstimates). The time complexity is $O(|E|log|V|)$ and space complexity is $O(|v|)$. The worst case is same with Dijkstra. </p><h1 id="Pseudocode"><a href="#Pseudocode" class="headerlink" title="Pseudocode"></a>Pseudocode</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;A* search algorithm is a heuristic search which works on path planning and graph traversal (weighted).&lt;br&gt;It is an extension of &lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://shunyangli.github.io/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://shunyangli.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Bidirectional BFS</title>
    <link href="https://shunyangli.github.io/post/c0bf/"/>
    <id>https://shunyangli.github.io/post/c0bf/</id>
    <published>2021-04-15T13:25:01.000Z</published>
    <updated>2022-06-14T06:41:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Bidirectional BFS is applicable to the case where the target node is known; the initial node expands toward the target node and the target node expands toward the initial node at the same time, until the same node appears in both expansion directions, and the search ends. For example, in a maze, when we need to know the number of steps to reach each location, a normal BFS is sufficient, but if we only need to know the number of steps to reach a specific location, we should use a two-way BFS. Start BFS from two target points at the same time, so we will have two different queues. Update the smaller one each time until there are elements in the two queues that overlap, indicating that the path is found. For example in the following graph, it will stop at node 9.</p><p><img src="/post/c0bf/1.png" alt></p><h1 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity"></a>Time Complexity</h1><p>Suppose if the branching factor of the tree is b and the distance between the target vertex and the source is d, then the normal BFS search complexity will be $O(b^d)$. On the other hand, if we perform two search operations, the complexity of each search will be $O(b^{d/2})$ and the total complexity will be $O(b^{d/2} + b^{d/2})$, which is much less than $O(b^d)$.</p><p>The branch factor refers to the number of children of each node in the expanded tree, i.e., the number of new elements that can be reached by each element. For example, in a maze where you can only move up and down, the branch factor is 4.</p><h1 id="Word-Ladder"><a href="#Word-Ladder" class="headerlink" title="Word Ladder"></a>Word Ladder</h1><p><a href="https://leetcode.com/problems/word-ladder" target="_blank" rel="noopener">Word Ladder</a> is a hard level question. It can be solved by using BFS. However BFS will time out. We can use Bidirectional to solve this issue.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; findLadders(<span class="built_in">string</span> from, <span class="built_in">string</span> to, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; wordList) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="built_in">string</span>&gt; lexicon(wordList.begin(), wordList.end());</span><br><span class="line">        <span class="keyword">auto</span> result = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&gt;&#123;&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// check whether exist to, if not just return a empty</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> lexicon.count(to)) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// init a word maps for double bfs</span></span><br><span class="line">        <span class="keyword">auto</span> word_maps = <span class="built_in">unordered_map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&gt;&#123;&#125;;</span><br><span class="line">        <span class="comment">// the left vector</span></span><br><span class="line">        <span class="keyword">auto</span> left = <span class="built_in">unordered_set</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&#123;from&#125;;</span><br><span class="line">        <span class="comment">// the right vector</span></span><br><span class="line">        <span class="keyword">auto</span> right = <span class="built_in">unordered_set</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&#123;to&#125;;</span><br><span class="line">        <span class="comment">// contain all the visited elements</span></span><br><span class="line">        <span class="keyword">auto</span> visited = <span class="built_in">unordered_set</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the bfs direction, could start at from and start at end</span></span><br><span class="line">        <span class="comment">// true means start at from</span></span><br><span class="line">        <span class="comment">// false means start at end</span></span><br><span class="line">        <span class="comment">// this is helpful for store the word into hashmap</span></span><br><span class="line">        <span class="keyword">auto</span> ahead = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">auto</span> found = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// which contain all the words</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">not</span> left.empty() <span class="keyword">and</span> <span class="keyword">not</span> right.empty()) &#123;</span><br><span class="line">            <span class="comment">// change the position when left &gt; right</span></span><br><span class="line">            <span class="comment">// part of two end bfs algorithm</span></span><br><span class="line">            <span class="keyword">if</span> (left.size() &gt; right.size()) &#123;</span><br><span class="line">                <span class="built_in">std</span>::swap(left, right);</span><br><span class="line">                ahead = <span class="keyword">not</span> ahead;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// contain all the words which generate according to left set words</span></span><br><span class="line">            <span class="comment">// which like insert to queue in bfs</span></span><br><span class="line">            <span class="keyword">auto</span> <span class="built_in">queue</span> = <span class="built_in">unordered_set</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&#123;&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// insert all the left set into visited</span></span><br><span class="line">            visited.insert(left.begin(), left.end());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// loop all the element in the left</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> origin_word : left) &#123;</span><br><span class="line">                <span class="keyword">auto</span> neighbors = neighbor(origin_word, visited, lexicon);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; word : neighbors) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">std</span>::find(right.begin(), right.end(), word) != right.end()) &#123;</span><br><span class="line">                        found = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (ahead) &#123;</span><br><span class="line">                        word_maps[word].push_back(origin_word);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        word_maps[origin_word].push_back(word);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">queue</span>.insert(word);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// put the new path to left then do new iterator</span></span><br><span class="line">            left = <span class="built_in">queue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// if found the to word, then generate the word ladders</span></span><br><span class="line">            <span class="keyword">if</span> (found) &#123;</span><br><span class="line">                result.push_back(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&#123;to&#125;);</span><br><span class="line">                <span class="comment">// the first one should be from</span></span><br><span class="line">                <span class="keyword">while</span> (result[<span class="number">0</span>][<span class="number">0</span>] != from) &#123;</span><br><span class="line">                    result = generate_result(result, word_maps);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// std::sort(result.begin(), result.end());</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * generate the neighbor words according to the word</span></span><br><span class="line"><span class="comment">     * to change the char from a-z</span></span><br><span class="line"><span class="comment">     * @param word the currecnt word to generate neighor words</span></span><br><span class="line"><span class="comment">     * @param visited the visited word</span></span><br><span class="line"><span class="comment">     * @param lexicon all the words</span></span><br><span class="line"><span class="comment">     * @return the neighors of the word</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">neighbor</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; word,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">const</span> <span class="built_in">unordered_set</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp; visited,</span></span></span><br><span class="line">                  const unordered_set&lt;std::string&gt;&amp; lexicon) -&gt; unordered_set&lt;std::string&gt; &#123;</span><br><span class="line">        <span class="comment">// contains all the neighbor words</span></span><br><span class="line">        <span class="keyword">auto</span> words = <span class="built_in">unordered_set</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::size_type&#123;<span class="number">0</span>&#125;; i &lt; word.size(); i++) &#123;</span><br><span class="line">            <span class="comment">// because we does n</span></span><br><span class="line">            <span class="comment">// ot want to change the current word</span></span><br><span class="line">            <span class="comment">// so we use curr_char to store the char which will be replaced</span></span><br><span class="line">            <span class="keyword">char</span> curr_char = word[i];</span><br><span class="line">            <span class="comment">// change the curr with a-z and check whether visited and whether in lexicon</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> c = <span class="string">'a'</span>; c &lt;= <span class="string">'z'</span>; ++c) &#123;</span><br><span class="line">                word[i] = c;</span><br><span class="line">                <span class="comment">// to avoid same word</span></span><br><span class="line">                <span class="keyword">if</span> (curr_char == c) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// the word should not visited and should in lexicon</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">not</span> visited.count(word) </span><br><span class="line">                   <span class="keyword">and</span> lexicon.count(word)) &#123;</span><br><span class="line">                    words.insert(word);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            word[i] = curr_char;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> words;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * iterate the result according to the end word</span></span><br><span class="line"><span class="comment">     * it can be a recurrsion, but I do not want to do that</span></span><br><span class="line"><span class="comment">     * recurrsion not stable.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * In the hashmap the word stored as: end-&gt;&#123;w1, w2, w2&#125;</span></span><br><span class="line"><span class="comment">     * this means w1, w2, w3 can convert to end, similar idea for start</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param words is the result which contain as list</span></span><br><span class="line"><span class="comment">     * @param word_maps hashmap, key is word, values is word ladders</span></span><br><span class="line"><span class="comment">     * @return a new list of result and then loop again</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">generate_result</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&gt;&amp; words,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&gt;&amp; word_maps)</span></span></span><br><span class="line">       -&gt; std::vector&lt;std::vector&lt;std::string&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">auto</span> temp = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&gt;&#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the word_maps were stored as a hashmap</span></span><br><span class="line">        <span class="comment">// key is the word, value is the word ladders</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; word_list : words) &#123;</span><br><span class="line">            <span class="keyword">auto</span> t = word_list[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// get the related word from hashmap</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; word : word_maps[t]) &#123;</span><br><span class="line">                <span class="comment">// insert the value in the front of list</span></span><br><span class="line">                <span class="keyword">auto</span> w = word_list;</span><br><span class="line">                w.insert(w.begin(), word);</span><br><span class="line">                temp.push_back(w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>This problem is also the first assignment of <a href="https://webcms3.cse.unsw.edu.au/COMP6771/20T2/" target="_blank" rel="noopener">COMP6771</a> in 20T2.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Bidirectional BFS is applicable to the case where the target node is known; the initial node expands toward the target node and the targe
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://shunyangli.github.io/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://shunyangli.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Automatically generate gitignore</title>
    <link href="https://shunyangli.github.io/post/c26f/"/>
    <id>https://shunyangli.github.io/post/c26f/</id>
    <published>2021-04-15T11:25:59.000Z</published>
    <updated>2022-06-14T06:41:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>We use <a href="https://github.com/" target="_blank" rel="noopener">Git</a> a lot when working on projects, but not all of the files we need to put into github, such as datasets, virtual environments, and configuration files. So we need to configure .gitignore to automatically ignore these files that don’t need to be added to the Git admin. Configuring .gitignore is usually tedious because you need to add all the uncessary files.</p><p><a href="https://github.com/Antrikshy/ignr.py" target="_blank" rel="noopener">ignr</a> is a tool which can generate .gitignore files automatically. It is implmeneted by Python.</p><h1 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h1><p>If you already installed python and pip, then you can execute the following command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ignr</span><br></pre></td></tr></table></figure><h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><p>The <a href="https://github.com/Antrikshy/ignr.py" target="_blank" rel="noopener">ignr</a> supports over four hundred different .gitignore templates, which we can view with the<code>ignr -l</code>command or search for with the <code>ignr -s</code>  command. For example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ignr -s python</span><br></pre></td></tr></table></figure><p>Searches for supplied query in list of available templates from gitignore.io.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ignr -n python</span><br></pre></td></tr></table></figure><p>It will generate python’s project gitignore file in the currect directory.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;We use &lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git&lt;/a&gt; a lot when working on projects, but not all of the files we n
      
    
    </summary>
    
    
      <category term="git" scheme="https://shunyangli.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://shunyangli.github.io/tags/git/"/>
    
  </entry>
  
</feed>
